/*
 * generated by Xtext 2.23.0
 */
package org.xtext.smartaas.command.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.smartaas.command.dsl.CommandSubmodel;
import org.xtext.smartaas.command.dsl.CommandText;
import org.xtext.smartaas.command.dsl.DslPackage;
import org.xtext.smartaas.command.dsl.Model;
import org.xtext.smartaas.command.dsl.SID;
import org.xtext.smartaas.command.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.COMMAND_SUBMODEL:
				sequence_CommandSubmodel(context, (CommandSubmodel) semanticObject); 
				return; 
			case DslPackage.COMMAND_TEXT:
				sequence_CommandText(context, (CommandText) semanticObject); 
				return; 
			case DslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DslPackage.SID:
				sequence_SID(context, (SID) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CommandSubmodel returns CommandSubmodel
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID commandtext=CommandText?)
	 */
	protected void sequence_CommandSubmodel(ISerializationContext context, CommandSubmodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommandText returns CommandText
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_CommandText(ISerializationContext context, CommandText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.COMMAND_TEXT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.COMMAND_TEXT__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.COMMAND_TEXT__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.COMMAND_TEXT__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandTextAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCommandTextAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     commandsinputsocket+=CommandSubmodel+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SID returns SID
	 *
	 * Constraint:
	 *     (name=STRING II=STRING)
	 */
	protected void sequence_SID(ISerializationContext context, SID semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SID__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SID__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SID__II) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SID__II));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSIDAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSIDAccess().getIISTRINGTerminalRuleCall_4_0(), semanticObject.getII());
		feeder.finish();
	}
	
	
}
