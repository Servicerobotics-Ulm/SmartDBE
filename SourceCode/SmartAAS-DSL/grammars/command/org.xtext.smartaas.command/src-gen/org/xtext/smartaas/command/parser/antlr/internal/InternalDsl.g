/*
 * generated by Xtext 2.23.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.smartaas.command.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.smartaas.command.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.smartaas.command.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getCommandsinputsocketCommandSubmodelParserRuleCall_0());
			}
			lv_commandsinputsocket_0_0=ruleCommandSubmodel
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"commandsinputsocket",
					lv_commandsinputsocket_0_0,
					"org.xtext.smartaas.command.Dsl.CommandSubmodel");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleCommandSubmodel
entryRuleCommandSubmodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandSubmodelRule()); }
	iv_ruleCommandSubmodel=ruleCommandSubmodel
	{ $current=$iv_ruleCommandSubmodel.current; }
	EOF;

// Rule CommandSubmodel
ruleCommandSubmodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='AAS'
		{
			newLeafNode(otherlv_0, grammarAccess.getCommandSubmodelAccess().getAASKeyword_0());
		}
		otherlv_1='::'
		{
			newLeafNode(otherlv_1, grammarAccess.getCommandSubmodelAccess().getColonColonKeyword_1());
		}
		otherlv_2='CommandINPUTSocket'
		{
			newLeafNode(otherlv_2, grammarAccess.getCommandSubmodelAccess().getCommandINPUTSocketKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_STRING
				{
					newLeafNode(lv_name_3_0, grammarAccess.getCommandSubmodelAccess().getNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommandSubmodelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='[['
		{
			newLeafNode(otherlv_4, grammarAccess.getCommandSubmodelAccess().getLeftSquareBracketLeftSquareBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandSubmodelAccess().getSemanticIdSIDParserRuleCall_5_0());
				}
				lv_SemanticId_5_0=ruleSID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandSubmodelRule());
					}
					set(
						$current,
						"SemanticId",
						lv_SemanticId_5_0,
						"org.xtext.smartaas.command.Dsl.SID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=']]'
		{
			newLeafNode(otherlv_6, grammarAccess.getCommandSubmodelAccess().getRightSquareBracketRightSquareBracketKeyword_6());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getCommandSubmodelAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandSubmodelAccess().getCommandtextCommandTextParserRuleCall_8_0_0());
					}
					lv_commandtext_8_0=ruleCommandText
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandSubmodelRule());
						}
						set(
							$current,
							"commandtext",
							lv_commandtext_8_0,
							"org.xtext.smartaas.command.Dsl.CommandText");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getCommandSubmodelAccess().getSemicolonKeyword_8_1());
			}
		)?
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getCommandSubmodelAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleCommandText
entryRuleCommandText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandTextRule()); }
	iv_ruleCommandText=ruleCommandText
	{ $current=$iv_ruleCommandText.current; }
	EOF;

// Rule CommandText
ruleCommandText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CommandText'
		{
			newLeafNode(otherlv_0, grammarAccess.getCommandTextAccess().getCommandTextKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCommandTextAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCommandTextAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommandTextRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='[['
		{
			newLeafNode(otherlv_3, grammarAccess.getCommandTextAccess().getLeftSquareBracketLeftSquareBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandTextAccess().getSemanticIdSIDParserRuleCall_4_0());
				}
				lv_SemanticId_4_0=ruleSID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandTextRule());
					}
					set(
						$current,
						"SemanticId",
						lv_SemanticId_4_0,
						"org.xtext.smartaas.command.Dsl.SID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=']]'
		{
			newLeafNode(otherlv_5, grammarAccess.getCommandTextAccess().getRightSquareBracketRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleSID
entryRuleSID returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSIDRule()); }
	iv_ruleSID=ruleSID
	{ $current=$iv_ruleSID.current; }
	EOF;

// Rule SID
ruleSID returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SemanticId'
		{
			newLeafNode(otherlv_0, grammarAccess.getSIDAccess().getSemanticIdKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getSIDAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getSIDAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSIDRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='|'
		{
			newLeafNode(otherlv_3, grammarAccess.getSIDAccess().getVerticalLineKeyword_3());
		}
		(
			(
				lv_II_4_0=RULE_STRING
				{
					newLeafNode(lv_II_4_0, grammarAccess.getSIDAccess().getIISTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSIDRule());
					}
					setWithLastConsumed(
						$current,
						"II",
						lv_II_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
