/*
 * generated by Xtext 2.23.0
 */
package org.xtext.smartaas.command.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smartaas.command.Dsl.Model");
		private final Assignment cCommandsinputsocketAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsinputsocketCommandSubmodelParserRuleCall_0 = (RuleCall)cCommandsinputsocketAssignment.eContents().get(0);
		
		//Model:
		//	commandsinputsocket+=CommandSubmodel+;
		@Override public ParserRule getRule() { return rule; }
		
		//commandsinputsocket+=CommandSubmodel+
		public Assignment getCommandsinputsocketAssignment() { return cCommandsinputsocketAssignment; }
		
		//CommandSubmodel
		public RuleCall getCommandsinputsocketCommandSubmodelParserRuleCall_0() { return cCommandsinputsocketCommandSubmodelParserRuleCall_0; }
	}
	public class CommandSubmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smartaas.command.Dsl.CommandSubmodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAASKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCommandINPUTSocketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSemanticIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSemanticIdSIDParserRuleCall_5_0 = (RuleCall)cSemanticIdAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cCommandtextAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cCommandtextCommandTextParserRuleCall_8_0_0 = (RuleCall)cCommandtextAssignment_8_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////	cardinalities:
		////	exactly one (the default, no operator)
		////	zero or one (operator ?)
		////	zero or more (operator *)
		////	one or more (operator +)
		//CommandSubmodel:
		//	'AAS' '::' 'CommandINPUTSocket' name=STRING '[[' SemanticId=SID ']]'
		//	'{' (commandtext=CommandText ';')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AAS' '::' 'CommandINPUTSocket' name=STRING '[[' SemanticId=SID ']]' '{' (commandtext=CommandText ';')? '}'
		public Group getGroup() { return cGroup; }
		
		//'AAS'
		public Keyword getAASKeyword_0() { return cAASKeyword_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//'CommandINPUTSocket'
		public Keyword getCommandINPUTSocketKeyword_2() { return cCommandINPUTSocketKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_4() { return cLeftSquareBracketLeftSquareBracketKeyword_4; }
		
		//SemanticId=SID
		public Assignment getSemanticIdAssignment_5() { return cSemanticIdAssignment_5; }
		
		//SID
		public RuleCall getSemanticIdSIDParserRuleCall_5_0() { return cSemanticIdSIDParserRuleCall_5_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_6() { return cRightSquareBracketRightSquareBracketKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//(commandtext=CommandText ';')?
		public Group getGroup_8() { return cGroup_8; }
		
		//commandtext=CommandText
		public Assignment getCommandtextAssignment_8_0() { return cCommandtextAssignment_8_0; }
		
		//CommandText
		public RuleCall getCommandtextCommandTextParserRuleCall_8_0_0() { return cCommandtextCommandTextParserRuleCall_8_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class CommandTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smartaas.command.Dsl.CommandText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommandTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSemanticIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSemanticIdSIDParserRuleCall_4_0 = (RuleCall)cSemanticIdAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CommandText:
		//	'CommandText' ':' name=STRING '[[' SemanticId=SID ']]';
		@Override public ParserRule getRule() { return rule; }
		
		//'CommandText' ':' name=STRING '[[' SemanticId=SID ']]'
		public Group getGroup() { return cGroup; }
		
		//'CommandText'
		public Keyword getCommandTextKeyword_0() { return cCommandTextKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_3() { return cLeftSquareBracketLeftSquareBracketKeyword_3; }
		
		//SemanticId=SID
		public Assignment getSemanticIdAssignment_4() { return cSemanticIdAssignment_4; }
		
		//SID
		public RuleCall getSemanticIdSIDParserRuleCall_4_0() { return cSemanticIdSIDParserRuleCall_4_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_5() { return cRightSquareBracketRightSquareBracketKeyword_5; }
	}
	public class SIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smartaas.command.Dsl.SID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSemanticIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIISTRINGTerminalRuleCall_4_0 = (RuleCall)cIIAssignment_4.eContents().get(0);
		
		//SID:
		//	'SemanticId' ':' name=STRING '|' II=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'SemanticId' ':' name=STRING '|' II=STRING
		public Group getGroup() { return cGroup; }
		
		//'SemanticId'
		public Keyword getSemanticIdKeyword_0() { return cSemanticIdKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
		
		//II=STRING
		public Assignment getIIAssignment_4() { return cIIAssignment_4; }
		
		//STRING
		public RuleCall getIISTRINGTerminalRuleCall_4_0() { return cIISTRINGTerminalRuleCall_4_0; }
	}
	
	
	private final ModelElements pModel;
	private final CommandSubmodelElements pCommandSubmodel;
	private final CommandTextElements pCommandText;
	private final SIDElements pSID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCommandSubmodel = new CommandSubmodelElements();
		this.pCommandText = new CommandTextElements();
		this.pSID = new SIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.smartaas.command.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	commandsinputsocket+=CommandSubmodel+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////	cardinalities:
	////	exactly one (the default, no operator)
	////	zero or one (operator ?)
	////	zero or more (operator *)
	////	one or more (operator +)
	//CommandSubmodel:
	//	'AAS' '::' 'CommandINPUTSocket' name=STRING '[[' SemanticId=SID ']]'
	//	'{' (commandtext=CommandText ';')?
	//	'}';
	public CommandSubmodelElements getCommandSubmodelAccess() {
		return pCommandSubmodel;
	}
	
	public ParserRule getCommandSubmodelRule() {
		return getCommandSubmodelAccess().getRule();
	}
	
	//CommandText:
	//	'CommandText' ':' name=STRING '[[' SemanticId=SID ']]';
	public CommandTextElements getCommandTextAccess() {
		return pCommandText;
	}
	
	public ParserRule getCommandTextRule() {
		return getCommandTextAccess().getRule();
	}
	
	//SID:
	//	'SemanticId' ':' name=STRING '|' II=STRING;
	public SIDElements getSIDAccess() {
		return pSID;
	}
	
	public ParserRule getSIDRule() {
		return getSIDAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
