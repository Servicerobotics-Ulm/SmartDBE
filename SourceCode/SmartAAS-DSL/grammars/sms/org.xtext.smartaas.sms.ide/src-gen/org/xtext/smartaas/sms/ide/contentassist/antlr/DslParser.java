/*
 * generated by Xtext 2.23.0
 */
package org.xtext.smartaas.sms.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.smartaas.sms.ide.contentassist.antlr.internal.InternalDslParser;
import org.xtext.smartaas.sms.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAnyAccess().getNameAlternatives_0(), "rule__Any__NameAlternatives_0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getSMSINTypeAccess().getGroup(), "rule__SMSINType__Group__0");
			builder.put(grammarAccess.getSMSINTypeAccess().getGroup_5(), "rule__SMSINType__Group_5__0");
			builder.put(grammarAccess.getSMSINTypeCommandAccess().getGroup(), "rule__SMSINTypeCommand__Group__0");
			builder.put(grammarAccess.getSMSINTypeCommandAccess().getGroup_5(), "rule__SMSINTypeCommand__Group_5__0");
			builder.put(grammarAccess.getSMSINTypeNameplateAccess().getGroup(), "rule__SMSINTypeNameplate__Group__0");
			builder.put(grammarAccess.getSMSINTypeNameplateAccess().getGroup_5(), "rule__SMSINTypeNameplate__Group_5__0");
			builder.put(grammarAccess.getSMSINTypeTechnicalDataAccess().getGroup(), "rule__SMSINTypeTechnicalData__Group__0");
			builder.put(grammarAccess.getSMSINTypeTechnicalDataAccess().getGroup_5(), "rule__SMSINTypeTechnicalData__Group_5__0");
			builder.put(grammarAccess.getA1Access().getGroup(), "rule__A1__Group__0");
			builder.put(grammarAccess.getA2Access().getGroup(), "rule__A2__Group__0");
			builder.put(grammarAccess.getA3Access().getGroup(), "rule__A3__Group__0");
			builder.put(grammarAccess.getA4Access().getGroup(), "rule__A4__Group__0");
			builder.put(grammarAccess.getA5Access().getGroup(), "rule__A5__Group__0");
			builder.put(grammarAccess.getB1Access().getGroup(), "rule__B1__Group__0");
			builder.put(grammarAccess.getB2Access().getGroup(), "rule__B2__Group__0");
			builder.put(grammarAccess.getB3Access().getGroup(), "rule__B3__Group__0");
			builder.put(grammarAccess.getB4Access().getGroup(), "rule__B4__Group__0");
			builder.put(grammarAccess.getB5Access().getGroup(), "rule__B5__Group__0");
			builder.put(grammarAccess.getModelAccess().getSMSINAssignment_0(), "rule__Model__SMSINAssignment_0");
			builder.put(grammarAccess.getModelAccess().getSMSINCommandAssignment_1(), "rule__Model__SMSINCommandAssignment_1");
			builder.put(grammarAccess.getSMSINTypeAccess().getNameAssignment_3(), "rule__SMSINType__NameAssignment_3");
			builder.put(grammarAccess.getSMSINTypeAccess().getAnyAssignment_5_0(), "rule__SMSINType__AnyAssignment_5_0");
			builder.put(grammarAccess.getSMSINTypeCommandAccess().getNameAssignment_3(), "rule__SMSINTypeCommand__NameAssignment_3");
			builder.put(grammarAccess.getSMSINTypeCommandAccess().getAnyAssignment_5_0(), "rule__SMSINTypeCommand__AnyAssignment_5_0");
			builder.put(grammarAccess.getSMSINTypeNameplateAccess().getNameAssignment_3(), "rule__SMSINTypeNameplate__NameAssignment_3");
			builder.put(grammarAccess.getSMSINTypeNameplateAccess().getAnyAssignment_5_0(), "rule__SMSINTypeNameplate__AnyAssignment_5_0");
			builder.put(grammarAccess.getSMSINTypeTechnicalDataAccess().getNameAssignment_3(), "rule__SMSINTypeTechnicalData__NameAssignment_3");
			builder.put(grammarAccess.getSMSINTypeTechnicalDataAccess().getAnyAssignment_5_0(), "rule__SMSINTypeTechnicalData__AnyAssignment_5_0");
			builder.put(grammarAccess.getAnyAccess().getNameAssignment(), "rule__Any__NameAssignment");
			builder.put(grammarAccess.getA1Access().getNameAssignment_1(), "rule__A1__NameAssignment_1");
			builder.put(grammarAccess.getA2Access().getNameAssignment_1(), "rule__A2__NameAssignment_1");
			builder.put(grammarAccess.getA3Access().getNameAssignment_1(), "rule__A3__NameAssignment_1");
			builder.put(grammarAccess.getA4Access().getNameAssignment_1(), "rule__A4__NameAssignment_1");
			builder.put(grammarAccess.getA5Access().getNameAssignment_1(), "rule__A5__NameAssignment_1");
			builder.put(grammarAccess.getB1Access().getNameAssignment_1(), "rule__B1__NameAssignment_1");
			builder.put(grammarAccess.getB2Access().getNameAssignment_1(), "rule__B2__NameAssignment_1");
			builder.put(grammarAccess.getB3Access().getNameAssignment_1(), "rule__B3__NameAssignment_1");
			builder.put(grammarAccess.getB4Access().getNameAssignment_1(), "rule__B4__NameAssignment_1");
			builder.put(grammarAccess.getB5Access().getNameAssignment_1(), "rule__B5__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
