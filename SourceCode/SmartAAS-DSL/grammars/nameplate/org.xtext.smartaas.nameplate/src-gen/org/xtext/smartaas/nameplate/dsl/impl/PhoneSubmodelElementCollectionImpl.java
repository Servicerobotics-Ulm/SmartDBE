/**
 * generated by Xtext 2.23.0
 */
package org.xtext.smartaas.nameplate.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.smartaas.nameplate.dsl.DslPackage;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyTelephoneNumber;
import org.xtext.smartaas.nameplate.dsl.PhoneSubmodelElementCollection;
import org.xtext.smartaas.nameplate.dsl.PropertyTypeOfTelephone;
import org.xtext.smartaas.nameplate.dsl.SID;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Phone Submodel Element Collection</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smartaas.nameplate.dsl.impl.PhoneSubmodelElementCollectionImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.smartaas.nameplate.dsl.impl.PhoneSubmodelElementCollectionImpl#getSemanticId <em>Semantic Id</em>}</li>
 *   <li>{@link org.xtext.smartaas.nameplate.dsl.impl.PhoneSubmodelElementCollectionImpl#getTelephoneNumber <em>Telephone Number</em>}</li>
 *   <li>{@link org.xtext.smartaas.nameplate.dsl.impl.PhoneSubmodelElementCollectionImpl#getTypeOfTelephone <em>Type Of Telephone</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PhoneSubmodelElementCollectionImpl extends MinimalEObjectImpl.Container implements PhoneSubmodelElementCollection
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSemanticId() <em>Semantic Id</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSemanticId()
   * @generated
   * @ordered
   */
  protected SID semanticId;

  /**
   * The cached value of the '{@link #getTelephoneNumber() <em>Telephone Number</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTelephoneNumber()
   * @generated
   * @ordered
   */
  protected MultiLanguagePropertyTelephoneNumber telephoneNumber;

  /**
   * The cached value of the '{@link #getTypeOfTelephone() <em>Type Of Telephone</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeOfTelephone()
   * @generated
   * @ordered
   */
  protected PropertyTypeOfTelephone typeOfTelephone;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PhoneSubmodelElementCollectionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.PHONE_SUBMODEL_ELEMENT_COLLECTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SID getSemanticId()
  {
    return semanticId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSemanticId(SID newSemanticId, NotificationChain msgs)
  {
    SID oldSemanticId = semanticId;
    semanticId = newSemanticId;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__SEMANTIC_ID, oldSemanticId, newSemanticId);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSemanticId(SID newSemanticId)
  {
    if (newSemanticId != semanticId)
    {
      NotificationChain msgs = null;
      if (semanticId != null)
        msgs = ((InternalEObject)semanticId).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__SEMANTIC_ID, null, msgs);
      if (newSemanticId != null)
        msgs = ((InternalEObject)newSemanticId).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__SEMANTIC_ID, null, msgs);
      msgs = basicSetSemanticId(newSemanticId, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__SEMANTIC_ID, newSemanticId, newSemanticId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiLanguagePropertyTelephoneNumber getTelephoneNumber()
  {
    return telephoneNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTelephoneNumber(MultiLanguagePropertyTelephoneNumber newTelephoneNumber, NotificationChain msgs)
  {
    MultiLanguagePropertyTelephoneNumber oldTelephoneNumber = telephoneNumber;
    telephoneNumber = newTelephoneNumber;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TELEPHONE_NUMBER, oldTelephoneNumber, newTelephoneNumber);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTelephoneNumber(MultiLanguagePropertyTelephoneNumber newTelephoneNumber)
  {
    if (newTelephoneNumber != telephoneNumber)
    {
      NotificationChain msgs = null;
      if (telephoneNumber != null)
        msgs = ((InternalEObject)telephoneNumber).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TELEPHONE_NUMBER, null, msgs);
      if (newTelephoneNumber != null)
        msgs = ((InternalEObject)newTelephoneNumber).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TELEPHONE_NUMBER, null, msgs);
      msgs = basicSetTelephoneNumber(newTelephoneNumber, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TELEPHONE_NUMBER, newTelephoneNumber, newTelephoneNumber));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyTypeOfTelephone getTypeOfTelephone()
  {
    return typeOfTelephone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeOfTelephone(PropertyTypeOfTelephone newTypeOfTelephone, NotificationChain msgs)
  {
    PropertyTypeOfTelephone oldTypeOfTelephone = typeOfTelephone;
    typeOfTelephone = newTypeOfTelephone;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TYPE_OF_TELEPHONE, oldTypeOfTelephone, newTypeOfTelephone);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeOfTelephone(PropertyTypeOfTelephone newTypeOfTelephone)
  {
    if (newTypeOfTelephone != typeOfTelephone)
    {
      NotificationChain msgs = null;
      if (typeOfTelephone != null)
        msgs = ((InternalEObject)typeOfTelephone).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TYPE_OF_TELEPHONE, null, msgs);
      if (newTypeOfTelephone != null)
        msgs = ((InternalEObject)newTypeOfTelephone).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TYPE_OF_TELEPHONE, null, msgs);
      msgs = basicSetTypeOfTelephone(newTypeOfTelephone, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TYPE_OF_TELEPHONE, newTypeOfTelephone, newTypeOfTelephone));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__SEMANTIC_ID:
        return basicSetSemanticId(null, msgs);
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TELEPHONE_NUMBER:
        return basicSetTelephoneNumber(null, msgs);
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TYPE_OF_TELEPHONE:
        return basicSetTypeOfTelephone(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__NAME:
        return getName();
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__SEMANTIC_ID:
        return getSemanticId();
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TELEPHONE_NUMBER:
        return getTelephoneNumber();
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TYPE_OF_TELEPHONE:
        return getTypeOfTelephone();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__NAME:
        setName((String)newValue);
        return;
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__SEMANTIC_ID:
        setSemanticId((SID)newValue);
        return;
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TELEPHONE_NUMBER:
        setTelephoneNumber((MultiLanguagePropertyTelephoneNumber)newValue);
        return;
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TYPE_OF_TELEPHONE:
        setTypeOfTelephone((PropertyTypeOfTelephone)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__SEMANTIC_ID:
        setSemanticId((SID)null);
        return;
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TELEPHONE_NUMBER:
        setTelephoneNumber((MultiLanguagePropertyTelephoneNumber)null);
        return;
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TYPE_OF_TELEPHONE:
        setTypeOfTelephone((PropertyTypeOfTelephone)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__SEMANTIC_ID:
        return semanticId != null;
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TELEPHONE_NUMBER:
        return telephoneNumber != null;
      case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION__TYPE_OF_TELEPHONE:
        return typeOfTelephone != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //PhoneSubmodelElementCollectionImpl
