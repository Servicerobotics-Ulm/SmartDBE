/*
 * generated by Xtext 2.23.0
 */
package org.xtext.smartaas.nameplate.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.smartaas.nameplate.dsl.AddressSubmodelElementCollection;
import org.xtext.smartaas.nameplate.dsl.DslPackage;
import org.xtext.smartaas.nameplate.dsl.EmailSubmodelElementCollection;
import org.xtext.smartaas.nameplate.dsl.FaxSubmodelElementCollection;
import org.xtext.smartaas.nameplate.dsl.FileMarkingFile;
import org.xtext.smartaas.nameplate.dsl.Model;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyAddressOfAdditionalLink;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyAddressRemarks;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyCityTown;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyDepartment;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyFax;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyManufacturerName;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyManufacturerProductDesignation;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyManufacturerProductFamily;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyNationalCode;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyPOBox;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyPublicKey;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertySerialNumber;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyStateCounty;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyStreet;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyTelephoneNumber;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyTypeOfPublickKey;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyVATNumber;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyYearOfConstruction;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyZipCodeOfPOBox;
import org.xtext.smartaas.nameplate.dsl.MultiLanguagePropertyZipcode;
import org.xtext.smartaas.nameplate.dsl.NameplateSubmodel;
import org.xtext.smartaas.nameplate.dsl.PhoneSubmodelElementCollection;
import org.xtext.smartaas.nameplate.dsl.PropertyArbitrary;
import org.xtext.smartaas.nameplate.dsl.PropertyEmailAddress;
import org.xtext.smartaas.nameplate.dsl.PropertyGuidelineForConformityDeclaration;
import org.xtext.smartaas.nameplate.dsl.PropertyMarkingAdditionalText;
import org.xtext.smartaas.nameplate.dsl.PropertyMarkingName;
import org.xtext.smartaas.nameplate.dsl.PropertyTypeOfEmailAddress;
import org.xtext.smartaas.nameplate.dsl.PropertyTypeOfFaxNumber;
import org.xtext.smartaas.nameplate.dsl.PropertyTypeOfTelephone;
import org.xtext.smartaas.nameplate.dsl.SID;
import org.xtext.smartaas.nameplate.dsl.SubmodelElementCollectionAssetSpecificProperties;
import org.xtext.smartaas.nameplate.dsl.SubmodelElementCollectionGuidelineSpecificProperties;
import org.xtext.smartaas.nameplate.dsl.SubmodelElementCollectionMarking;
import org.xtext.smartaas.nameplate.dsl.SubmodelElementCollectionMarkings;
import org.xtext.smartaas.nameplate.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.ADDRESS_SUBMODEL_ELEMENT_COLLECTION:
				sequence_AddressSubmodelElementCollection(context, (AddressSubmodelElementCollection) semanticObject); 
				return; 
			case DslPackage.EMAIL_SUBMODEL_ELEMENT_COLLECTION:
				sequence_EmailSubmodelElementCollection(context, (EmailSubmodelElementCollection) semanticObject); 
				return; 
			case DslPackage.FAX_SUBMODEL_ELEMENT_COLLECTION:
				sequence_FaxSubmodelElementCollection(context, (FaxSubmodelElementCollection) semanticObject); 
				return; 
			case DslPackage.FILE_MARKING_FILE:
				sequence_FileMarkingFile(context, (FileMarkingFile) semanticObject); 
				return; 
			case DslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_ADDRESS_OF_ADDITIONAL_LINK:
				sequence_MultiLanguagePropertyAddressOfAdditionalLink(context, (MultiLanguagePropertyAddressOfAdditionalLink) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_ADDRESS_REMARKS:
				sequence_MultiLanguagePropertyAddressRemarks(context, (MultiLanguagePropertyAddressRemarks) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_CITY_TOWN:
				sequence_MultiLanguagePropertyCityTown(context, (MultiLanguagePropertyCityTown) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_DEPARTMENT:
				sequence_MultiLanguagePropertyDepartment(context, (MultiLanguagePropertyDepartment) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_FAX:
				sequence_MultiLanguagePropertyFax(context, (MultiLanguagePropertyFax) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_NAME:
				sequence_MultiLanguagePropertyManufacturerName(context, (MultiLanguagePropertyManufacturerName) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_DESIGNATION:
				sequence_MultiLanguagePropertyManufacturerProductDesignation(context, (MultiLanguagePropertyManufacturerProductDesignation) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_FAMILY:
				sequence_MultiLanguagePropertyManufacturerProductFamily(context, (MultiLanguagePropertyManufacturerProductFamily) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_NATIONAL_CODE:
				sequence_MultiLanguagePropertyNationalCode(context, (MultiLanguagePropertyNationalCode) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_PO_BOX:
				sequence_MultiLanguagePropertyPOBox(context, (MultiLanguagePropertyPOBox) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_PUBLIC_KEY:
				sequence_MultiLanguagePropertyPublicKey(context, (MultiLanguagePropertyPublicKey) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_SERIAL_NUMBER:
				sequence_MultiLanguagePropertySerialNumber(context, (MultiLanguagePropertySerialNumber) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_STATE_COUNTY:
				sequence_MultiLanguagePropertyStateCounty(context, (MultiLanguagePropertyStateCounty) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_STREET:
				sequence_MultiLanguagePropertyStreet(context, (MultiLanguagePropertyStreet) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_TELEPHONE_NUMBER:
				sequence_MultiLanguagePropertyTelephoneNumber(context, (MultiLanguagePropertyTelephoneNumber) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_TYPE_OF_PUBLICK_KEY:
				sequence_MultiLanguagePropertyTypeOfPublickKey(context, (MultiLanguagePropertyTypeOfPublickKey) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_VAT_NUMBER:
				sequence_MultiLanguagePropertyVATNumber(context, (MultiLanguagePropertyVATNumber) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_YEAR_OF_CONSTRUCTION:
				sequence_MultiLanguagePropertyYearOfConstruction(context, (MultiLanguagePropertyYearOfConstruction) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_ZIP_CODE_OF_PO_BOX:
				sequence_MultiLanguagePropertyZipCodeOfPOBox(context, (MultiLanguagePropertyZipCodeOfPOBox) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_ZIPCODE:
				sequence_MultiLanguagePropertyZipcode(context, (MultiLanguagePropertyZipcode) semanticObject); 
				return; 
			case DslPackage.NAMEPLATE_SUBMODEL:
				sequence_NameplateSubmodel(context, (NameplateSubmodel) semanticObject); 
				return; 
			case DslPackage.PHONE_SUBMODEL_ELEMENT_COLLECTION:
				sequence_PhoneSubmodelElementCollection(context, (PhoneSubmodelElementCollection) semanticObject); 
				return; 
			case DslPackage.PROPERTY_ARBITRARY:
				sequence_PropertyArbitrary(context, (PropertyArbitrary) semanticObject); 
				return; 
			case DslPackage.PROPERTY_EMAIL_ADDRESS:
				sequence_PropertyEmailAddress(context, (PropertyEmailAddress) semanticObject); 
				return; 
			case DslPackage.PROPERTY_GUIDELINE_FOR_CONFORMITY_DECLARATION:
				sequence_PropertyGuidelineForConformityDeclaration(context, (PropertyGuidelineForConformityDeclaration) semanticObject); 
				return; 
			case DslPackage.PROPERTY_MARKING_ADDITIONAL_TEXT:
				sequence_PropertyMarkingAdditionalText(context, (PropertyMarkingAdditionalText) semanticObject); 
				return; 
			case DslPackage.PROPERTY_MARKING_NAME:
				sequence_PropertyMarkingName(context, (PropertyMarkingName) semanticObject); 
				return; 
			case DslPackage.PROPERTY_TYPE_OF_EMAIL_ADDRESS:
				sequence_PropertyTypeOfEmailAddress(context, (PropertyTypeOfEmailAddress) semanticObject); 
				return; 
			case DslPackage.PROPERTY_TYPE_OF_FAX_NUMBER:
				sequence_PropertyTypeOfFaxNumber(context, (PropertyTypeOfFaxNumber) semanticObject); 
				return; 
			case DslPackage.PROPERTY_TYPE_OF_TELEPHONE:
				sequence_PropertyTypeOfTelephone(context, (PropertyTypeOfTelephone) semanticObject); 
				return; 
			case DslPackage.SID:
				sequence_SID(context, (SID) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_COLLECTION_ASSET_SPECIFIC_PROPERTIES:
				sequence_SubmodelElementCollectionAssetSpecificProperties(context, (SubmodelElementCollectionAssetSpecificProperties) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_COLLECTION_GUIDELINE_SPECIFIC_PROPERTIES:
				sequence_SubmodelElementCollectionGuidelineSpecificProperties(context, (SubmodelElementCollectionGuidelineSpecificProperties) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_COLLECTION_MARKING:
				sequence_SubmodelElementCollectionMarking(context, (SubmodelElementCollectionMarking) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_COLLECTION_MARKINGS:
				sequence_SubmodelElementCollectionMarkings(context, (SubmodelElementCollectionMarkings) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AddressSubmodelElementCollection returns AddressSubmodelElementCollection
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         SemanticId=SID 
	 *         Department=MultiLanguagePropertyDepartment? 
	 *         Street=MultiLanguagePropertyStreet 
	 *         Zipcode=MultiLanguagePropertyZipcode 
	 *         POBox=MultiLanguagePropertyPOBox? 
	 *         ZipCodeOfPOBox=MultiLanguagePropertyZipCodeOfPOBox? 
	 *         CityTown=MultiLanguagePropertyCityTown 
	 *         StateCounty=MultiLanguagePropertyStateCounty? 
	 *         NationalCode=MultiLanguagePropertyNationalCode 
	 *         VATNumber=MultiLanguagePropertyVATNumber? 
	 *         AddressRemarks=MultiLanguagePropertyAddressRemarks? 
	 *         AddressOfAdditionalLink=MultiLanguagePropertyAddressOfAdditionalLink? 
	 *         Phone+=PhoneSubmodelElementCollection* 
	 *         Fax+=FaxSubmodelElementCollection* 
	 *         Email+=EmailSubmodelElementCollection*
	 *     )
	 */
	protected void sequence_AddressSubmodelElementCollection(ISerializationContext context, AddressSubmodelElementCollection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EmailSubmodelElementCollection returns EmailSubmodelElementCollection
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         SemanticId=SID 
	 *         EmailAddress=PropertyEmailAddress 
	 *         TypeOfEmailAddress=PropertyTypeOfEmailAddress? 
	 *         (PublicKey=MultiLanguagePropertyPublicKey TypeOfPublickKey=MultiLanguagePropertyTypeOfPublickKey?)?
	 *     )
	 */
	protected void sequence_EmailSubmodelElementCollection(ISerializationContext context, EmailSubmodelElementCollection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FaxSubmodelElementCollection returns FaxSubmodelElementCollection
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID FaxNumber=MultiLanguagePropertyFax TypeOfFaxNumber=PropertyTypeOfFaxNumber?)
	 */
	protected void sequence_FaxSubmodelElementCollection(ISerializationContext context, FaxSubmodelElementCollection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FileMarkingFile returns FileMarkingFile
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_FileMarkingFile(ISerializationContext context, FileMarkingFile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FILE_MARKING_FILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FILE_MARKING_FILE__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FILE_MARKING_FILE__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FILE_MARKING_FILE__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFileMarkingFileAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFileMarkingFileAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     nameplate+=NameplateSubmodel
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyAddressOfAdditionalLink returns MultiLanguagePropertyAddressOfAdditionalLink
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyAddressOfAdditionalLink(ISerializationContext context, MultiLanguagePropertyAddressOfAdditionalLink semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ADDRESS_OF_ADDITIONAL_LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ADDRESS_OF_ADDITIONAL_LINK__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ADDRESS_OF_ADDITIONAL_LINK__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ADDRESS_OF_ADDITIONAL_LINK__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyAddressOfAdditionalLinkAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyAddressOfAdditionalLinkAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyAddressRemarks returns MultiLanguagePropertyAddressRemarks
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyAddressRemarks(ISerializationContext context, MultiLanguagePropertyAddressRemarks semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ADDRESS_REMARKS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ADDRESS_REMARKS__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ADDRESS_REMARKS__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ADDRESS_REMARKS__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyAddressRemarksAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyAddressRemarksAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyCityTown returns MultiLanguagePropertyCityTown
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyCityTown(ISerializationContext context, MultiLanguagePropertyCityTown semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_CITY_TOWN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_CITY_TOWN__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_CITY_TOWN__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_CITY_TOWN__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyCityTownAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyCityTownAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyDepartment returns MultiLanguagePropertyDepartment
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyDepartment(ISerializationContext context, MultiLanguagePropertyDepartment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_DEPARTMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_DEPARTMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_DEPARTMENT__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_DEPARTMENT__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyDepartmentAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyDepartmentAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyFax returns MultiLanguagePropertyFax
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyFax(ISerializationContext context, MultiLanguagePropertyFax semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_FAX__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_FAX__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_FAX__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_FAX__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyFaxAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyFaxAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyManufacturerName returns MultiLanguagePropertyManufacturerName
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyManufacturerName(ISerializationContext context, MultiLanguagePropertyManufacturerName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_NAME__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_NAME__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_NAME__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyManufacturerNameAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyManufacturerNameAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyManufacturerProductDesignation returns MultiLanguagePropertyManufacturerProductDesignation
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyManufacturerProductDesignation(ISerializationContext context, MultiLanguagePropertyManufacturerProductDesignation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_DESIGNATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_DESIGNATION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_DESIGNATION__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_DESIGNATION__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyManufacturerProductDesignationAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyManufacturerProductDesignationAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyManufacturerProductFamily returns MultiLanguagePropertyManufacturerProductFamily
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyManufacturerProductFamily(ISerializationContext context, MultiLanguagePropertyManufacturerProductFamily semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_FAMILY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_FAMILY__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_FAMILY__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_FAMILY__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyManufacturerProductFamilyAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyManufacturerProductFamilyAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyNationalCode returns MultiLanguagePropertyNationalCode
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyNationalCode(ISerializationContext context, MultiLanguagePropertyNationalCode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_NATIONAL_CODE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_NATIONAL_CODE__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_NATIONAL_CODE__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_NATIONAL_CODE__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyNationalCodeAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyNationalCodeAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyPOBox returns MultiLanguagePropertyPOBox
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyPOBox(ISerializationContext context, MultiLanguagePropertyPOBox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_PO_BOX__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_PO_BOX__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_PO_BOX__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_PO_BOX__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyPOBoxAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyPOBoxAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyPublicKey returns MultiLanguagePropertyPublicKey
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyPublicKey(ISerializationContext context, MultiLanguagePropertyPublicKey semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_PUBLIC_KEY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_PUBLIC_KEY__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_PUBLIC_KEY__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_PUBLIC_KEY__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyPublicKeyAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyPublicKeyAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertySerialNumber returns MultiLanguagePropertySerialNumber
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertySerialNumber(ISerializationContext context, MultiLanguagePropertySerialNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_SERIAL_NUMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_SERIAL_NUMBER__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_SERIAL_NUMBER__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_SERIAL_NUMBER__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertySerialNumberAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertySerialNumberAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyStateCounty returns MultiLanguagePropertyStateCounty
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyStateCounty(ISerializationContext context, MultiLanguagePropertyStateCounty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_STATE_COUNTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_STATE_COUNTY__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_STATE_COUNTY__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_STATE_COUNTY__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyStateCountyAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyStateCountyAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyStreet returns MultiLanguagePropertyStreet
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyStreet(ISerializationContext context, MultiLanguagePropertyStreet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_STREET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_STREET__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_STREET__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_STREET__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyStreetAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyStreetAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyTelephoneNumber returns MultiLanguagePropertyTelephoneNumber
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyTelephoneNumber(ISerializationContext context, MultiLanguagePropertyTelephoneNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TELEPHONE_NUMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TELEPHONE_NUMBER__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TELEPHONE_NUMBER__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TELEPHONE_NUMBER__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyTelephoneNumberAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyTelephoneNumberAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyTypeOfPublickKey returns MultiLanguagePropertyTypeOfPublickKey
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyTypeOfPublickKey(ISerializationContext context, MultiLanguagePropertyTypeOfPublickKey semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TYPE_OF_PUBLICK_KEY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TYPE_OF_PUBLICK_KEY__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TYPE_OF_PUBLICK_KEY__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TYPE_OF_PUBLICK_KEY__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyTypeOfPublickKeyAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyTypeOfPublickKeyAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyVATNumber returns MultiLanguagePropertyVATNumber
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyVATNumber(ISerializationContext context, MultiLanguagePropertyVATNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_VAT_NUMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_VAT_NUMBER__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_VAT_NUMBER__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_VAT_NUMBER__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyVATNumberAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyVATNumberAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyYearOfConstruction returns MultiLanguagePropertyYearOfConstruction
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyYearOfConstruction(ISerializationContext context, MultiLanguagePropertyYearOfConstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_YEAR_OF_CONSTRUCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_YEAR_OF_CONSTRUCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_YEAR_OF_CONSTRUCTION__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_YEAR_OF_CONSTRUCTION__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyYearOfConstructionAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyYearOfConstructionAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyZipCodeOfPOBox returns MultiLanguagePropertyZipCodeOfPOBox
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyZipCodeOfPOBox(ISerializationContext context, MultiLanguagePropertyZipCodeOfPOBox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ZIP_CODE_OF_PO_BOX__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ZIP_CODE_OF_PO_BOX__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ZIP_CODE_OF_PO_BOX__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ZIP_CODE_OF_PO_BOX__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyZipCodeOfPOBoxAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyZipCodeOfPOBoxAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyZipcode returns MultiLanguagePropertyZipcode
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyZipcode(ISerializationContext context, MultiLanguagePropertyZipcode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ZIPCODE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ZIPCODE__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ZIPCODE__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_ZIPCODE__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyZipcodeAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyZipcodeAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NameplateSubmodel returns NameplateSubmodel
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         SemanticId=SID 
	 *         ManufacturerName=MultiLanguagePropertyManufacturerName 
	 *         ManufacturerProductDesignation=MultiLanguagePropertyManufacturerProductDesignation 
	 *         Address=AddressSubmodelElementCollection 
	 *         ManufacturerProductFamily=MultiLanguagePropertyManufacturerProductFamily 
	 *         SerialNumber=MultiLanguagePropertySerialNumber? 
	 *         YearOfConstruction=MultiLanguagePropertyYearOfConstruction 
	 *         Markings=SubmodelElementCollectionMarkings? 
	 *         AssetSpecificProperties=SubmodelElementCollectionAssetSpecificProperties?
	 *     )
	 */
	protected void sequence_NameplateSubmodel(ISerializationContext context, NameplateSubmodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PhoneSubmodelElementCollection returns PhoneSubmodelElementCollection
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID TelephoneNumber=MultiLanguagePropertyTelephoneNumber TypeOfTelephone=PropertyTypeOfTelephone?)
	 */
	protected void sequence_PhoneSubmodelElementCollection(ISerializationContext context, PhoneSubmodelElementCollection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PropertyArbitrary returns PropertyArbitrary
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyArbitrary(ISerializationContext context, PropertyArbitrary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_ARBITRARY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_ARBITRARY__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_ARBITRARY__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_ARBITRARY__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyArbitraryAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyArbitraryAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyEmailAddress returns PropertyEmailAddress
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyEmailAddress(ISerializationContext context, PropertyEmailAddress semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_EMAIL_ADDRESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_EMAIL_ADDRESS__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_EMAIL_ADDRESS__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_EMAIL_ADDRESS__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyEmailAddressAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyEmailAddressAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyGuidelineForConformityDeclaration returns PropertyGuidelineForConformityDeclaration
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyGuidelineForConformityDeclaration(ISerializationContext context, PropertyGuidelineForConformityDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_GUIDELINE_FOR_CONFORMITY_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_GUIDELINE_FOR_CONFORMITY_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_GUIDELINE_FOR_CONFORMITY_DECLARATION__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_GUIDELINE_FOR_CONFORMITY_DECLARATION__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyGuidelineForConformityDeclarationAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyGuidelineForConformityDeclarationAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyMarkingAdditionalText returns PropertyMarkingAdditionalText
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyMarkingAdditionalText(ISerializationContext context, PropertyMarkingAdditionalText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_MARKING_ADDITIONAL_TEXT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_MARKING_ADDITIONAL_TEXT__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_MARKING_ADDITIONAL_TEXT__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_MARKING_ADDITIONAL_TEXT__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyMarkingAdditionalTextAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyMarkingAdditionalTextAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyMarkingName returns PropertyMarkingName
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyMarkingName(ISerializationContext context, PropertyMarkingName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_MARKING_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_MARKING_NAME__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_MARKING_NAME__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_MARKING_NAME__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyMarkingNameAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyMarkingNameAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyTypeOfEmailAddress returns PropertyTypeOfEmailAddress
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyTypeOfEmailAddress(ISerializationContext context, PropertyTypeOfEmailAddress semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_EMAIL_ADDRESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_EMAIL_ADDRESS__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_EMAIL_ADDRESS__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_EMAIL_ADDRESS__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyTypeOfEmailAddressAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyTypeOfEmailAddressAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyTypeOfFaxNumber returns PropertyTypeOfFaxNumber
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyTypeOfFaxNumber(ISerializationContext context, PropertyTypeOfFaxNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_FAX_NUMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_FAX_NUMBER__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_FAX_NUMBER__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_FAX_NUMBER__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyTypeOfFaxNumberAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyTypeOfFaxNumberAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyTypeOfTelephone returns PropertyTypeOfTelephone
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyTypeOfTelephone(ISerializationContext context, PropertyTypeOfTelephone semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_TELEPHONE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_TELEPHONE__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_TELEPHONE__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_TYPE_OF_TELEPHONE__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyTypeOfTelephoneAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyTypeOfTelephoneAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SID returns SID
	 *
	 * Constraint:
	 *     (name=STRING II=STRING)
	 */
	protected void sequence_SID(ISerializationContext context, SID semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SID__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SID__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SID__II) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SID__II));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSIDAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSIDAccess().getIISTRINGTerminalRuleCall_4_0(), semanticObject.getII());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementCollectionAssetSpecificProperties returns SubmodelElementCollectionAssetSpecificProperties
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID GuidelineSpecificProperties+=SubmodelElementCollectionGuidelineSpecificProperties+)
	 */
	protected void sequence_SubmodelElementCollectionAssetSpecificProperties(ISerializationContext context, SubmodelElementCollectionAssetSpecificProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementCollectionGuidelineSpecificProperties returns SubmodelElementCollectionGuidelineSpecificProperties
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID GuidelineForConformityDeclaration=PropertyGuidelineForConformityDeclaration Arbitrary+=PropertyArbitrary+)
	 */
	protected void sequence_SubmodelElementCollectionGuidelineSpecificProperties(ISerializationContext context, SubmodelElementCollectionGuidelineSpecificProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementCollectionMarking returns SubmodelElementCollectionMarking
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID MarkingName=PropertyMarkingName MarkingFile=FileMarkingFile MarkingAdditionalText+=PropertyMarkingAdditionalText*)
	 */
	protected void sequence_SubmodelElementCollectionMarking(ISerializationContext context, SubmodelElementCollectionMarking semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementCollectionMarkings returns SubmodelElementCollectionMarkings
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID Marking+=SubmodelElementCollectionMarking+)
	 */
	protected void sequence_SubmodelElementCollectionMarkings(ISerializationContext context, SubmodelElementCollectionMarkings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
