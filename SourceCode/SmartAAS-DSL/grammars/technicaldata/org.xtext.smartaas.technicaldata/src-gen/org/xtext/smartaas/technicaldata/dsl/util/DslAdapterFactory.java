/**
 * generated by Xtext 2.23.0
 */
package org.xtext.smartaas.technicaldata.dsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.smartaas.technicaldata.dsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.smartaas.technicaldata.dsl.DslPackage
 * @generated
 */
public class DslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DslSwitch<Adapter> modelSwitch =
    new DslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseTechnicaldataSubmodel(TechnicaldataSubmodel object)
      {
        return createTechnicaldataSubmodelAdapter();
      }
      @Override
      public Adapter caseSubmodelElementCollectionGeneralInformation(SubmodelElementCollectionGeneralInformation object)
      {
        return createSubmodelElementCollectionGeneralInformationAdapter();
      }
      @Override
      public Adapter casePropertyManufacturerName(PropertyManufacturerName object)
      {
        return createPropertyManufacturerNameAdapter();
      }
      @Override
      public Adapter caseFileManufacturerLogo(FileManufacturerLogo object)
      {
        return createFileManufacturerLogoAdapter();
      }
      @Override
      public Adapter caseMultiLanguagePropertyManufacturerProductDesignation(MultiLanguagePropertyManufacturerProductDesignation object)
      {
        return createMultiLanguagePropertyManufacturerProductDesignationAdapter();
      }
      @Override
      public Adapter casePropertyManufacturerPartNumber(PropertyManufacturerPartNumber object)
      {
        return createPropertyManufacturerPartNumberAdapter();
      }
      @Override
      public Adapter casePropertyManufacturerOrderCode(PropertyManufacturerOrderCode object)
      {
        return createPropertyManufacturerOrderCodeAdapter();
      }
      @Override
      public Adapter caseFileProductImage(FileProductImage object)
      {
        return createFileProductImageAdapter();
      }
      @Override
      public Adapter caseSubmodelElementCollectionProductClassifications(SubmodelElementCollectionProductClassifications object)
      {
        return createSubmodelElementCollectionProductClassificationsAdapter();
      }
      @Override
      public Adapter caseSubmodelElementCollectionProductClassificationItem(SubmodelElementCollectionProductClassificationItem object)
      {
        return createSubmodelElementCollectionProductClassificationItemAdapter();
      }
      @Override
      public Adapter casePropertyProductClassificationSystem(PropertyProductClassificationSystem object)
      {
        return createPropertyProductClassificationSystemAdapter();
      }
      @Override
      public Adapter casePropertyClassificationSystemVersion(PropertyClassificationSystemVersion object)
      {
        return createPropertyClassificationSystemVersionAdapter();
      }
      @Override
      public Adapter casePropertyProductClassId(PropertyProductClassId object)
      {
        return createPropertyProductClassIdAdapter();
      }
      @Override
      public Adapter caseSubmodelElementCollectionTechnicalProperties(SubmodelElementCollectionTechnicalProperties object)
      {
        return createSubmodelElementCollectionTechnicalPropertiesAdapter();
      }
      @Override
      public Adapter caseSubmodelElementArbitrary(SubmodelElementArbitrary object)
      {
        return createSubmodelElementArbitraryAdapter();
      }
      @Override
      public Adapter caseSubmodelElementCollectionSection(SubmodelElementCollectionSection object)
      {
        return createSubmodelElementCollectionSectionAdapter();
      }
      @Override
      public Adapter caseSubmodelElementCollectionSubSection(SubmodelElementCollectionSubSection object)
      {
        return createSubmodelElementCollectionSubSectionAdapter();
      }
      @Override
      public Adapter caseSubmodelElementCollectionFurtherInformation(SubmodelElementCollectionFurtherInformation object)
      {
        return createSubmodelElementCollectionFurtherInformationAdapter();
      }
      @Override
      public Adapter caseMultiLanguagePropertyTextStatement(MultiLanguagePropertyTextStatement object)
      {
        return createMultiLanguagePropertyTextStatementAdapter();
      }
      @Override
      public Adapter casePropertyValidDate(PropertyValidDate object)
      {
        return createPropertyValidDateAdapter();
      }
      @Override
      public Adapter caseSID(SID object)
      {
        return createSIDAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.TechnicaldataSubmodel <em>Technicaldata Submodel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.TechnicaldataSubmodel
   * @generated
   */
  public Adapter createTechnicaldataSubmodelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionGeneralInformation <em>Submodel Element Collection General Information</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionGeneralInformation
   * @generated
   */
  public Adapter createSubmodelElementCollectionGeneralInformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.PropertyManufacturerName <em>Property Manufacturer Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.PropertyManufacturerName
   * @generated
   */
  public Adapter createPropertyManufacturerNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.FileManufacturerLogo <em>File Manufacturer Logo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.FileManufacturerLogo
   * @generated
   */
  public Adapter createFileManufacturerLogoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.MultiLanguagePropertyManufacturerProductDesignation <em>Multi Language Property Manufacturer Product Designation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.MultiLanguagePropertyManufacturerProductDesignation
   * @generated
   */
  public Adapter createMultiLanguagePropertyManufacturerProductDesignationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.PropertyManufacturerPartNumber <em>Property Manufacturer Part Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.PropertyManufacturerPartNumber
   * @generated
   */
  public Adapter createPropertyManufacturerPartNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.PropertyManufacturerOrderCode <em>Property Manufacturer Order Code</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.PropertyManufacturerOrderCode
   * @generated
   */
  public Adapter createPropertyManufacturerOrderCodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.FileProductImage <em>File Product Image</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.FileProductImage
   * @generated
   */
  public Adapter createFileProductImageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionProductClassifications <em>Submodel Element Collection Product Classifications</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionProductClassifications
   * @generated
   */
  public Adapter createSubmodelElementCollectionProductClassificationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionProductClassificationItem <em>Submodel Element Collection Product Classification Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionProductClassificationItem
   * @generated
   */
  public Adapter createSubmodelElementCollectionProductClassificationItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.PropertyProductClassificationSystem <em>Property Product Classification System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.PropertyProductClassificationSystem
   * @generated
   */
  public Adapter createPropertyProductClassificationSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.PropertyClassificationSystemVersion <em>Property Classification System Version</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.PropertyClassificationSystemVersion
   * @generated
   */
  public Adapter createPropertyClassificationSystemVersionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.PropertyProductClassId <em>Property Product Class Id</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.PropertyProductClassId
   * @generated
   */
  public Adapter createPropertyProductClassIdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionTechnicalProperties <em>Submodel Element Collection Technical Properties</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionTechnicalProperties
   * @generated
   */
  public Adapter createSubmodelElementCollectionTechnicalPropertiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.SubmodelElementArbitrary <em>Submodel Element Arbitrary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.SubmodelElementArbitrary
   * @generated
   */
  public Adapter createSubmodelElementArbitraryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionSection <em>Submodel Element Collection Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionSection
   * @generated
   */
  public Adapter createSubmodelElementCollectionSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionSubSection <em>Submodel Element Collection Sub Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionSubSection
   * @generated
   */
  public Adapter createSubmodelElementCollectionSubSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionFurtherInformation <em>Submodel Element Collection Further Information</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionFurtherInformation
   * @generated
   */
  public Adapter createSubmodelElementCollectionFurtherInformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.MultiLanguagePropertyTextStatement <em>Multi Language Property Text Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.MultiLanguagePropertyTextStatement
   * @generated
   */
  public Adapter createMultiLanguagePropertyTextStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.PropertyValidDate <em>Property Valid Date</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.PropertyValidDate
   * @generated
   */
  public Adapter createPropertyValidDateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.smartaas.technicaldata.dsl.SID <em>SID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.smartaas.technicaldata.dsl.SID
   * @generated
   */
  public Adapter createSIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DslAdapterFactory
