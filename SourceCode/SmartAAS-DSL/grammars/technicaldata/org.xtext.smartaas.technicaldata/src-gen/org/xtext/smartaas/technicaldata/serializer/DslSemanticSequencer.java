/*
 * generated by Xtext 2.23.0
 */
package org.xtext.smartaas.technicaldata.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.smartaas.technicaldata.dsl.DslPackage;
import org.xtext.smartaas.technicaldata.dsl.FileManufacturerLogo;
import org.xtext.smartaas.technicaldata.dsl.FileProductImage;
import org.xtext.smartaas.technicaldata.dsl.Model;
import org.xtext.smartaas.technicaldata.dsl.MultiLanguagePropertyManufacturerProductDesignation;
import org.xtext.smartaas.technicaldata.dsl.MultiLanguagePropertyTextStatement;
import org.xtext.smartaas.technicaldata.dsl.PropertyClassificationSystemVersion;
import org.xtext.smartaas.technicaldata.dsl.PropertyManufacturerName;
import org.xtext.smartaas.technicaldata.dsl.PropertyManufacturerOrderCode;
import org.xtext.smartaas.technicaldata.dsl.PropertyManufacturerPartNumber;
import org.xtext.smartaas.technicaldata.dsl.PropertyProductClassId;
import org.xtext.smartaas.technicaldata.dsl.PropertyProductClassificationSystem;
import org.xtext.smartaas.technicaldata.dsl.PropertyValidDate;
import org.xtext.smartaas.technicaldata.dsl.SID;
import org.xtext.smartaas.technicaldata.dsl.SubmodelElementArbitrary;
import org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionFurtherInformation;
import org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionGeneralInformation;
import org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionProductClassificationItem;
import org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionProductClassifications;
import org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionSection;
import org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionSubSection;
import org.xtext.smartaas.technicaldata.dsl.SubmodelElementCollectionTechnicalProperties;
import org.xtext.smartaas.technicaldata.dsl.TechnicaldataSubmodel;
import org.xtext.smartaas.technicaldata.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.FILE_MANUFACTURER_LOGO:
				sequence_FileManufacturerLogo(context, (FileManufacturerLogo) semanticObject); 
				return; 
			case DslPackage.FILE_PRODUCT_IMAGE:
				sequence_FileProductImage(context, (FileProductImage) semanticObject); 
				return; 
			case DslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_DESIGNATION:
				sequence_MultiLanguagePropertyManufacturerProductDesignation(context, (MultiLanguagePropertyManufacturerProductDesignation) semanticObject); 
				return; 
			case DslPackage.MULTI_LANGUAGE_PROPERTY_TEXT_STATEMENT:
				sequence_MultiLanguagePropertyTextStatement(context, (MultiLanguagePropertyTextStatement) semanticObject); 
				return; 
			case DslPackage.PROPERTY_CLASSIFICATION_SYSTEM_VERSION:
				sequence_PropertyClassificationSystemVersion(context, (PropertyClassificationSystemVersion) semanticObject); 
				return; 
			case DslPackage.PROPERTY_MANUFACTURER_NAME:
				sequence_PropertyManufacturerName(context, (PropertyManufacturerName) semanticObject); 
				return; 
			case DslPackage.PROPERTY_MANUFACTURER_ORDER_CODE:
				sequence_PropertyManufacturerOrderCode(context, (PropertyManufacturerOrderCode) semanticObject); 
				return; 
			case DslPackage.PROPERTY_MANUFACTURER_PART_NUMBER:
				sequence_PropertyManufacturerPartNumber(context, (PropertyManufacturerPartNumber) semanticObject); 
				return; 
			case DslPackage.PROPERTY_PRODUCT_CLASS_ID:
				sequence_PropertyProductClassId(context, (PropertyProductClassId) semanticObject); 
				return; 
			case DslPackage.PROPERTY_PRODUCT_CLASSIFICATION_SYSTEM:
				sequence_PropertyProductClassificationSystem(context, (PropertyProductClassificationSystem) semanticObject); 
				return; 
			case DslPackage.PROPERTY_VALID_DATE:
				sequence_PropertyValidDate(context, (PropertyValidDate) semanticObject); 
				return; 
			case DslPackage.SID:
				sequence_SID(context, (SID) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_ARBITRARY:
				sequence_SubmodelElementArbitrary(context, (SubmodelElementArbitrary) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_COLLECTION_FURTHER_INFORMATION:
				sequence_SubmodelElementCollectionFurtherInformation(context, (SubmodelElementCollectionFurtherInformation) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_COLLECTION_GENERAL_INFORMATION:
				sequence_SubmodelElementCollectionGeneralInformation(context, (SubmodelElementCollectionGeneralInformation) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_COLLECTION_PRODUCT_CLASSIFICATION_ITEM:
				sequence_SubmodelElementCollectionProductClassificationItem(context, (SubmodelElementCollectionProductClassificationItem) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_COLLECTION_PRODUCT_CLASSIFICATIONS:
				sequence_SubmodelElementCollectionProductClassifications(context, (SubmodelElementCollectionProductClassifications) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_COLLECTION_SECTION:
				sequence_SubmodelElementCollectionSection(context, (SubmodelElementCollectionSection) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_COLLECTION_SUB_SECTION:
				sequence_SubmodelElementCollectionSubSection(context, (SubmodelElementCollectionSubSection) semanticObject); 
				return; 
			case DslPackage.SUBMODEL_ELEMENT_COLLECTION_TECHNICAL_PROPERTIES:
				sequence_SubmodelElementCollectionTechnicalProperties(context, (SubmodelElementCollectionTechnicalProperties) semanticObject); 
				return; 
			case DslPackage.TECHNICALDATA_SUBMODEL:
				sequence_TechnicaldataSubmodel(context, (TechnicaldataSubmodel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     FileManufacturerLogo returns FileManufacturerLogo
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_FileManufacturerLogo(ISerializationContext context, FileManufacturerLogo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FILE_MANUFACTURER_LOGO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FILE_MANUFACTURER_LOGO__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FILE_MANUFACTURER_LOGO__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FILE_MANUFACTURER_LOGO__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFileManufacturerLogoAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFileManufacturerLogoAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FileProductImage returns FileProductImage
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_FileProductImage(ISerializationContext context, FileProductImage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FILE_PRODUCT_IMAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FILE_PRODUCT_IMAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.FILE_PRODUCT_IMAGE__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.FILE_PRODUCT_IMAGE__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFileProductImageAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFileProductImageAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     technicaldata+=TechnicaldataSubmodel
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyManufacturerProductDesignation returns MultiLanguagePropertyManufacturerProductDesignation
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyManufacturerProductDesignation(ISerializationContext context, MultiLanguagePropertyManufacturerProductDesignation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_DESIGNATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_DESIGNATION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_DESIGNATION__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_MANUFACTURER_PRODUCT_DESIGNATION__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyManufacturerProductDesignationAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyManufacturerProductDesignationAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiLanguagePropertyTextStatement returns MultiLanguagePropertyTextStatement
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_MultiLanguagePropertyTextStatement(ISerializationContext context, MultiLanguagePropertyTextStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TEXT_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TEXT_STATEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TEXT_STATEMENT__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MULTI_LANGUAGE_PROPERTY_TEXT_STATEMENT__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiLanguagePropertyTextStatementAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiLanguagePropertyTextStatementAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyClassificationSystemVersion returns PropertyClassificationSystemVersion
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyClassificationSystemVersion(ISerializationContext context, PropertyClassificationSystemVersion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_CLASSIFICATION_SYSTEM_VERSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_CLASSIFICATION_SYSTEM_VERSION__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_CLASSIFICATION_SYSTEM_VERSION__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_CLASSIFICATION_SYSTEM_VERSION__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyClassificationSystemVersionAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyClassificationSystemVersionAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyManufacturerName returns PropertyManufacturerName
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyManufacturerName(ISerializationContext context, PropertyManufacturerName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_NAME__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_NAME__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_NAME__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyManufacturerNameAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyManufacturerNameAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyManufacturerOrderCode returns PropertyManufacturerOrderCode
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyManufacturerOrderCode(ISerializationContext context, PropertyManufacturerOrderCode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_ORDER_CODE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_ORDER_CODE__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_ORDER_CODE__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_ORDER_CODE__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyManufacturerOrderCodeAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyManufacturerOrderCodeAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyManufacturerPartNumber returns PropertyManufacturerPartNumber
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyManufacturerPartNumber(ISerializationContext context, PropertyManufacturerPartNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_PART_NUMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_PART_NUMBER__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_PART_NUMBER__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_MANUFACTURER_PART_NUMBER__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyManufacturerPartNumberAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyManufacturerPartNumberAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyProductClassId returns PropertyProductClassId
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyProductClassId(ISerializationContext context, PropertyProductClassId semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_PRODUCT_CLASS_ID__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_PRODUCT_CLASS_ID__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_PRODUCT_CLASS_ID__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_PRODUCT_CLASS_ID__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyProductClassIdAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyProductClassIdAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyProductClassificationSystem returns PropertyProductClassificationSystem
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyProductClassificationSystem(ISerializationContext context, PropertyProductClassificationSystem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_PRODUCT_CLASSIFICATION_SYSTEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_PRODUCT_CLASSIFICATION_SYSTEM__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_PRODUCT_CLASSIFICATION_SYSTEM__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_PRODUCT_CLASSIFICATION_SYSTEM__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyProductClassificationSystemAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyProductClassificationSystemAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PropertyValidDate returns PropertyValidDate
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_PropertyValidDate(ISerializationContext context, PropertyValidDate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_VALID_DATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_VALID_DATE__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROPERTY_VALID_DATE__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROPERTY_VALID_DATE__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyValidDateAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyValidDateAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SID returns SID
	 *
	 * Constraint:
	 *     (name=STRING II=STRING)
	 */
	protected void sequence_SID(ISerializationContext context, SID semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SID__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SID__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SID__II) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SID__II));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSIDAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSIDAccess().getIISTRINGTerminalRuleCall_4_0(), semanticObject.getII());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementArbitrary returns SubmodelElementArbitrary
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID)
	 */
	protected void sequence_SubmodelElementArbitrary(ISerializationContext context, SubmodelElementArbitrary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SUBMODEL_ELEMENT_ARBITRARY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SUBMODEL_ELEMENT_ARBITRARY__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.SUBMODEL_ELEMENT_ARBITRARY__SEMANTIC_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.SUBMODEL_ELEMENT_ARBITRARY__SEMANTIC_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubmodelElementArbitraryAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSubmodelElementArbitraryAccess().getSemanticIdSIDParserRuleCall_4_0(), semanticObject.getSemanticId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementCollectionFurtherInformation returns SubmodelElementCollectionFurtherInformation
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID TextStatement+=MultiLanguagePropertyTextStatement* ValidDate=PropertyValidDate)
	 */
	protected void sequence_SubmodelElementCollectionFurtherInformation(ISerializationContext context, SubmodelElementCollectionFurtherInformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementCollectionGeneralInformation returns SubmodelElementCollectionGeneralInformation
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         SemanticId=SID 
	 *         ManufacturerName=PropertyManufacturerName 
	 *         ManufacturerLogo=FileManufacturerLogo? 
	 *         ManufacturerProductDesignation=MultiLanguagePropertyManufacturerProductDesignation 
	 *         ManufacturerPartNumber=PropertyManufacturerPartNumber 
	 *         ManufacturerOrderCode=PropertyManufacturerOrderCode 
	 *         ProductImage+=FileProductImage*
	 *     )
	 */
	protected void sequence_SubmodelElementCollectionGeneralInformation(ISerializationContext context, SubmodelElementCollectionGeneralInformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementCollectionProductClassificationItem returns SubmodelElementCollectionProductClassificationItem
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         SemanticId=SID 
	 *         ProductClassificationSystem=PropertyProductClassificationSystem 
	 *         ClassificationSystemVersion=PropertyClassificationSystemVersion? 
	 *         ProductClassId=PropertyProductClassId
	 *     )
	 */
	protected void sequence_SubmodelElementCollectionProductClassificationItem(ISerializationContext context, SubmodelElementCollectionProductClassificationItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementCollectionProductClassifications returns SubmodelElementCollectionProductClassifications
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID ProductClassificationItem+=SubmodelElementCollectionProductClassificationItem*)
	 */
	protected void sequence_SubmodelElementCollectionProductClassifications(ISerializationContext context, SubmodelElementCollectionProductClassifications semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementCollectionSection returns SubmodelElementCollectionSection
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID Arbitrary+=SubmodelElementArbitrary* SubSection+=SubmodelElementCollectionSubSection*)
	 */
	protected void sequence_SubmodelElementCollectionSection(ISerializationContext context, SubmodelElementCollectionSection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementCollectionSubSection returns SubmodelElementCollectionSubSection
	 *
	 * Constraint:
	 *     (name=STRING SemanticId=SID Arbitrary+=SubmodelElementArbitrary* SubSection+=SubmodelElementCollectionSubSection*)
	 */
	protected void sequence_SubmodelElementCollectionSubSection(ISerializationContext context, SubmodelElementCollectionSubSection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubmodelElementCollectionTechnicalProperties returns SubmodelElementCollectionTechnicalProperties
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         SemanticId=SID 
	 *         Arbitrary+=SubmodelElementArbitrary* 
	 *         Section+=SubmodelElementCollectionSection* 
	 *         SubSection+=SubmodelElementCollectionSubSection*
	 *     )
	 */
	protected void sequence_SubmodelElementCollectionTechnicalProperties(ISerializationContext context, SubmodelElementCollectionTechnicalProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TechnicaldataSubmodel returns TechnicaldataSubmodel
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         SemanticId=SID 
	 *         GeneralInformation=SubmodelElementCollectionGeneralInformation 
	 *         ProductClassifications=SubmodelElementCollectionProductClassifications? 
	 *         TechnicalProperties=SubmodelElementCollectionTechnicalProperties 
	 *         FurtherInformation=SubmodelElementCollectionFurtherInformation?
	 *     )
	 */
	protected void sequence_TechnicaldataSubmodel(ISerializationContext context, TechnicaldataSubmodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
