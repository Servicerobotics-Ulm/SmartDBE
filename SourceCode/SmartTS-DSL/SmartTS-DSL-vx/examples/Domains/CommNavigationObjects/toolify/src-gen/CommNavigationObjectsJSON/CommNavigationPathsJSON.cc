//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommNavigationPathsJSON.hh"

#include "CommNavigationObjectsJSON/CommCorridorNodeJSON.hh"

namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommNavigationPaths& obj, nlohmann::json& j)
{
	// nodes: CommCorridorNode[]
	for(size_t idx=0; idx < obj.nodes.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.nodes.at(idx), array_element);
		j["nodes"].emplace_back(array_element);
	}
	// pathWidth: Double[]
	j["pathWidth"] = obj.pathWidth;
	// robotID: String
	j["robotID"] = obj.robotID;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommNavigationPaths& obj)
{
	// nodes: CommCorridorNode[]
	if(j.contains("nodes") && j["nodes"].is_array()) {
		auto jnodes = j["nodes"];
		obj.nodes.resize(jnodes.size());
		for(size_t idx=0; idx < jnodes.size(); idx++) {
			// convert the json array values individually
			if(jnodes.at(idx).is_object()) {
				// from_json(jnodes.at(idx), obj.nodes.at(idx));
				obj.nodes[idx] = jnodes[idx].get<CommNavigationObjectsIDL::CommCorridorNode>();
			}
		}
	}
	// pathWidth: Double[]
	if(j.contains("pathWidth") && j["pathWidth"].is_array()) {
		obj.pathWidth = j["pathWidth"].get<std::vector<double>>();
	}
	// robotID: String
	if(j.contains("robotID") && j["robotID"].is_string()) {
		obj.robotID = j["robotID"].get<std::string>();
	}
}

} // end namespace CommNavigationObjectsIDL
