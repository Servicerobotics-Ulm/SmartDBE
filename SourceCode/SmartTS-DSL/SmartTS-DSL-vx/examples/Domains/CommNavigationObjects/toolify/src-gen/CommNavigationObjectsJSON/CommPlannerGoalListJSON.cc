//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommPlannerGoalListJSON.hh"


namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommPlannerGoalList& obj, nlohmann::json& j)
{
	// id: Int32
	j["id"] = obj.id;
	// flag: Int32
	j["flag"] = obj.flag;
	// goalXvector: Double[]
	j["goalXvector"] = obj.goalXvector;
	// goalYvector: Double[]
	j["goalYvector"] = obj.goalYvector;
	// nodeObstacleVector: Double[]
	j["nodeObstacleVector"] = obj.nodeObstacleVector;
	// finalGoalX: Double
	j["finalGoalX"] = obj.finalGoalX;
	// finalGoalY: Double
	j["finalGoalY"] = obj.finalGoalY;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommPlannerGoalList& obj)
{
	// id: Int32
	if(j.contains("id") && j["id"].is_number_integer()) {
		obj.id = j["id"].get<int>();
	}
	// flag: Int32
	if(j.contains("flag") && j["flag"].is_number_integer()) {
		obj.flag = j["flag"].get<int>();
	}
	// goalXvector: Double[]
	if(j.contains("goalXvector") && j["goalXvector"].is_array()) {
		obj.goalXvector = j["goalXvector"].get<std::vector<double>>();
	}
	// goalYvector: Double[]
	if(j.contains("goalYvector") && j["goalYvector"].is_array()) {
		obj.goalYvector = j["goalYvector"].get<std::vector<double>>();
	}
	// nodeObstacleVector: Double[]
	if(j.contains("nodeObstacleVector") && j["nodeObstacleVector"].is_array()) {
		obj.nodeObstacleVector = j["nodeObstacleVector"].get<std::vector<double>>();
	}
	// finalGoalX: Double
	if(j.contains("finalGoalX") && j["finalGoalX"].is_number_float()) {
		obj.finalGoalX = j["finalGoalX"].get<double>();
	}
	// finalGoalY: Double
	if(j.contains("finalGoalY") && j["finalGoalY"].is_number_float()) {
		obj.finalGoalY = j["finalGoalY"].get<double>();
	}
}

} // end namespace CommNavigationObjectsIDL
