//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommGridMapJSON.hh"

#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"

namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommGridMap& obj, nlohmann::json& j)
{
	// id: UInt32
	j["id"] = obj.id;
	// is_valid: Boolean
	j["is_valid"] = obj.is_valid;
	// time: CommTimeStamp
	to_json(obj.time, j["time"]);
	// xOffsetMM: Int32
	j["xOffsetMM"] = obj.xOffsetMM;
	// yOffsetMM: Int32
	j["yOffsetMM"] = obj.yOffsetMM;
	// xOffsetCells: Int32
	j["xOffsetCells"] = obj.xOffsetCells;
	// yOffsetCells: Int32
	j["yOffsetCells"] = obj.yOffsetCells;
	// cellSizeMM: Int32
	j["cellSizeMM"] = obj.cellSizeMM;
	// xSizeMM: UInt32
	j["xSizeMM"] = obj.xSizeMM;
	// ySizeMM: UInt32
	j["ySizeMM"] = obj.ySizeMM;
	// xSizeCells: UInt32
	j["xSizeCells"] = obj.xSizeCells;
	// ySizeCells: UInt32
	j["ySizeCells"] = obj.ySizeCells;
	// size: UInt32
	j["size"] = obj.size;
	// cell: UInt8[]
	j["cell"] = obj.cell;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommGridMap& obj)
{
	// id: UInt32
	if(j.contains("id") && j["id"].is_number_unsigned()) {
		obj.id = j["id"].get<unsigned int>();
	}
	// is_valid: Boolean
	if(j.contains("is_valid") && j["is_valid"].is_boolean()) {
		obj.is_valid = j["is_valid"].get<bool>();
	}
	// time: CommTimeStamp
	if(j.contains("time") && j["time"].is_object()) {
		//from_json(j["time"], obj.time);
		obj.time = j["time"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
	// xOffsetMM: Int32
	if(j.contains("xOffsetMM") && j["xOffsetMM"].is_number_integer()) {
		obj.xOffsetMM = j["xOffsetMM"].get<int>();
	}
	// yOffsetMM: Int32
	if(j.contains("yOffsetMM") && j["yOffsetMM"].is_number_integer()) {
		obj.yOffsetMM = j["yOffsetMM"].get<int>();
	}
	// xOffsetCells: Int32
	if(j.contains("xOffsetCells") && j["xOffsetCells"].is_number_integer()) {
		obj.xOffsetCells = j["xOffsetCells"].get<int>();
	}
	// yOffsetCells: Int32
	if(j.contains("yOffsetCells") && j["yOffsetCells"].is_number_integer()) {
		obj.yOffsetCells = j["yOffsetCells"].get<int>();
	}
	// cellSizeMM: Int32
	if(j.contains("cellSizeMM") && j["cellSizeMM"].is_number_integer()) {
		obj.cellSizeMM = j["cellSizeMM"].get<int>();
	}
	// xSizeMM: UInt32
	if(j.contains("xSizeMM") && j["xSizeMM"].is_number_unsigned()) {
		obj.xSizeMM = j["xSizeMM"].get<unsigned int>();
	}
	// ySizeMM: UInt32
	if(j.contains("ySizeMM") && j["ySizeMM"].is_number_unsigned()) {
		obj.ySizeMM = j["ySizeMM"].get<unsigned int>();
	}
	// xSizeCells: UInt32
	if(j.contains("xSizeCells") && j["xSizeCells"].is_number_unsigned()) {
		obj.xSizeCells = j["xSizeCells"].get<unsigned int>();
	}
	// ySizeCells: UInt32
	if(j.contains("ySizeCells") && j["ySizeCells"].is_number_unsigned()) {
		obj.ySizeCells = j["ySizeCells"].get<unsigned int>();
	}
	// size: UInt32
	if(j.contains("size") && j["size"].is_number_unsigned()) {
		obj.size = j["size"].get<unsigned int>();
	}
	// cell: UInt8[]
	if(j.contains("cell") && j["cell"].is_array()) {
		obj.cell = j["cell"].get<std::vector<unsigned char>>();
	}
}

} // end namespace CommNavigationObjectsIDL
