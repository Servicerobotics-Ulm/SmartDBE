//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommCorridorNavigationGoalJSON.hh"

#include "CommNavigationObjectsJSON/CommNavigationPathsJSON.hh"

namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommCorridorNavigationGoal& obj, nlohmann::json& j)
{
	// goalID: Int32
	j["goalID"] = obj.goalID;
	// paths: CommNavigationPaths
	to_json(obj.paths, j["paths"]);
	// goalX: Double
	j["goalX"] = obj.goalX;
	// goalY: Double
	j["goalY"] = obj.goalY;
	// goal_id: Int32
	j["goal_id"] = obj.goal_id;
	// startX: Double
	j["startX"] = obj.startX;
	// startY: Double
	j["startY"] = obj.startY;
	// start_id: Int32
	j["start_id"] = obj.start_id;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommCorridorNavigationGoal& obj)
{
	// goalID: Int32
	if(j.contains("goalID") && j["goalID"].is_number_integer()) {
		obj.goalID = j["goalID"].get<int>();
	}
	// paths: CommNavigationPaths
	if(j.contains("paths") && j["paths"].is_object()) {
		//from_json(j["paths"], obj.paths);
		obj.paths = j["paths"].get<CommNavigationObjectsIDL::CommNavigationPaths>();
	}
	// goalX: Double
	if(j.contains("goalX") && j["goalX"].is_number_float()) {
		obj.goalX = j["goalX"].get<double>();
	}
	// goalY: Double
	if(j.contains("goalY") && j["goalY"].is_number_float()) {
		obj.goalY = j["goalY"].get<double>();
	}
	// goal_id: Int32
	if(j.contains("goal_id") && j["goal_id"].is_number_integer()) {
		obj.goal_id = j["goal_id"].get<int>();
	}
	// startX: Double
	if(j.contains("startX") && j["startX"].is_number_float()) {
		obj.startX = j["startX"].get<double>();
	}
	// startY: Double
	if(j.contains("startY") && j["startY"].is_number_float()) {
		obj.startY = j["startY"].get<double>();
	}
	// start_id: Int32
	if(j.contains("start_id") && j["start_id"].is_number_integer()) {
		obj.start_id = j["start_id"].get<int>();
	}
}

} // end namespace CommNavigationObjectsIDL
