//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommNavigationGraphEdgeJSON.hh"


namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommNavigationGraphEdge& obj, nlohmann::json& j)
{
	// u: Int32
	j["u"] = obj.u;
	// v: Int32
	j["v"] = obj.v;
	// path: Int32
	j["path"] = obj.path;
	// way: Int32
	j["way"] = obj.way;
	// gap: Double
	j["gap"] = obj.gap;
	// type: EDGE_TYPE
	j["type"] = obj.type;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommNavigationGraphEdge& obj)
{
	// u: Int32
	if(j.contains("u") && j["u"].is_number_integer()) {
		obj.u = j["u"].get<int>();
	}
	// v: Int32
	if(j.contains("v") && j["v"].is_number_integer()) {
		obj.v = j["v"].get<int>();
	}
	// path: Int32
	if(j.contains("path") && j["path"].is_number_integer()) {
		obj.path = j["path"].get<int>();
	}
	// way: Int32
	if(j.contains("way") && j["way"].is_number_integer()) {
		obj.way = j["way"].get<int>();
	}
	// gap: Double
	if(j.contains("gap") && j["gap"].is_number_float()) {
		obj.gap = j["gap"].get<double>();
	}
	// type: EDGE_TYPE
	if(j.contains("type") && j["type"].is_number_integer()) {
		obj.type = j["type"].get<int>();
	}
}

} // end namespace CommNavigationObjectsIDL
