//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommCorridorNavigationPoseRequestJSON.hh"


namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommCorridorNavigationPoseRequest& obj, nlohmann::json& j)
{
	// requesttype: NavigationNodeRequestType
	j["requesttype"] = obj.requesttype;
	// pose: UInt32
	j["pose"] = obj.pose;
	// robotID: String
	j["robotID"] = obj.robotID;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommCorridorNavigationPoseRequest& obj)
{
	// requesttype: NavigationNodeRequestType
	if(j.contains("requesttype") && j["requesttype"].is_number_integer()) {
		obj.requesttype = j["requesttype"].get<int>();
	}
	// pose: UInt32
	if(j.contains("pose") && j["pose"].is_number_unsigned()) {
		obj.pose = j["pose"].get<unsigned int>();
	}
	// robotID: String
	if(j.contains("robotID") && j["robotID"].is_string()) {
		obj.robotID = j["robotID"].get<std::string>();
	}
}

} // end namespace CommNavigationObjectsIDL
