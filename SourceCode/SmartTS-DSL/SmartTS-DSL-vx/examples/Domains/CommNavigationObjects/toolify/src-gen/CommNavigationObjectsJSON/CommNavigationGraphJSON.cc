//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommNavigationGraphJSON.hh"

#include "CommNavigationObjectsJSON/CommNavigationGraphVertexJSON.hh"
#include "CommNavigationObjectsJSON/CommNavigationGraphEdgeJSON.hh"

namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommNavigationGraph& obj, nlohmann::json& j)
{
	// vertices: CommNavigationGraphVertex[]
	for(size_t idx=0; idx < obj.vertices.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.vertices.at(idx), array_element);
		j["vertices"].emplace_back(array_element);
	}
	// edges: CommNavigationGraphEdge[]
	for(size_t idx=0; idx < obj.edges.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.edges.at(idx), array_element);
		j["edges"].emplace_back(array_element);
	}
	// pathWidth: Double[]
	j["pathWidth"] = obj.pathWidth;
	// valid: Boolean
	j["valid"] = obj.valid;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommNavigationGraph& obj)
{
	// vertices: CommNavigationGraphVertex[]
	if(j.contains("vertices") && j["vertices"].is_array()) {
		auto jvertices = j["vertices"];
		obj.vertices.resize(jvertices.size());
		for(size_t idx=0; idx < jvertices.size(); idx++) {
			// convert the json array values individually
			if(jvertices.at(idx).is_object()) {
				// from_json(jvertices.at(idx), obj.vertices.at(idx));
				obj.vertices[idx] = jvertices[idx].get<CommNavigationObjectsIDL::CommNavigationGraphVertex>();
			}
		}
	}
	// edges: CommNavigationGraphEdge[]
	if(j.contains("edges") && j["edges"].is_array()) {
		auto jedges = j["edges"];
		obj.edges.resize(jedges.size());
		for(size_t idx=0; idx < jedges.size(); idx++) {
			// convert the json array values individually
			if(jedges.at(idx).is_object()) {
				// from_json(jedges.at(idx), obj.edges.at(idx));
				obj.edges[idx] = jedges[idx].get<CommNavigationObjectsIDL::CommNavigationGraphEdge>();
			}
		}
	}
	// pathWidth: Double[]
	if(j.contains("pathWidth") && j["pathWidth"].is_array()) {
		obj.pathWidth = j["pathWidth"].get<std::vector<double>>();
	}
	// valid: Boolean
	if(j.contains("valid") && j["valid"].is_boolean()) {
		obj.valid = j["valid"].get<bool>();
	}
}

} // end namespace CommNavigationObjectsIDL
