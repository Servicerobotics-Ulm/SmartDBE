//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommCorridorNodeJSON.hh"


namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommCorridorNode& obj, nlohmann::json& j)
{
	// id: UInt32
	j["id"] = obj.id;
	// x: Double
	j["x"] = obj.x;
	// y: Double
	j["y"] = obj.y;
	// pose: UInt32
	j["pose"] = obj.pose;
	// path: UInt32
	j["path"] = obj.path;
	// width: Double
	j["width"] = obj.width;
	// type: NODE_TYPE
	j["type"] = obj.type;
	// sts: NODE_STATUS
	j["sts"] = obj.sts;
	// robotID: String
	j["robotID"] = obj.robotID;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommCorridorNode& obj)
{
	// id: UInt32
	if(j.contains("id") && j["id"].is_number_unsigned()) {
		obj.id = j["id"].get<unsigned int>();
	}
	// x: Double
	if(j.contains("x") && j["x"].is_number_float()) {
		obj.x = j["x"].get<double>();
	}
	// y: Double
	if(j.contains("y") && j["y"].is_number_float()) {
		obj.y = j["y"].get<double>();
	}
	// pose: UInt32
	if(j.contains("pose") && j["pose"].is_number_unsigned()) {
		obj.pose = j["pose"].get<unsigned int>();
	}
	// path: UInt32
	if(j.contains("path") && j["path"].is_number_unsigned()) {
		obj.path = j["path"].get<unsigned int>();
	}
	// width: Double
	if(j.contains("width") && j["width"].is_number_float()) {
		obj.width = j["width"].get<double>();
	}
	// type: NODE_TYPE
	if(j.contains("type") && j["type"].is_number_integer()) {
		obj.type = j["type"].get<int>();
	}
	// sts: NODE_STATUS
	if(j.contains("sts") && j["sts"].is_number_integer()) {
		obj.sts = j["sts"].get<int>();
	}
	// robotID: String
	if(j.contains("robotID") && j["robotID"].is_string()) {
		obj.robotID = j["robotID"].get<std::string>();
	}
}

} // end namespace CommNavigationObjectsIDL
