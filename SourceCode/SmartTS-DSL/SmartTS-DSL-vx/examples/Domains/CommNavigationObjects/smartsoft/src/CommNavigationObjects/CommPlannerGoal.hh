//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2009 Christian Schlegel, Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------


#ifndef COMMNAVIGATIONOBJECTS_COMMPLANNERGOAL_H_
#define COMMNAVIGATIONOBJECTS_COMMPLANNERGOAL_H_

#include "CommNavigationObjects/CommPlannerGoalCore.hh"
#include <string>
#include <iostream>
#include <math.h>

namespace CommNavigationObjects {
		
class CommPlannerGoal : public CommPlannerGoalCore {
	public:
		// default constructors
		CommPlannerGoal();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommPlannerGoal(const int &id, const int &flag, const double &xWayPoint, const double &yWayPoint, const double &hWayPoint, const double &xGoalPoint, const double &yGoalPoint, const double &hGoalPoint);
		
		CommPlannerGoal(const CommPlannerGoalCore &commPlannerGoal);
		CommPlannerGoal(const DATATYPE &commPlannerGoal);
		virtual ~CommPlannerGoal();
		
		// use framework specific getter and setter methods from core (base) class
		using CommPlannerGoalCore::get;
		using CommPlannerGoalCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline int getFlag() const
		{
			return idl_CommPlannerGoal.flag;
		}
		inline void setFlag(const int &flag)
		{
			idl_CommPlannerGoal.flag = flag;
		}

		inline double getHGoalPoint() const
		{
			return idl_CommPlannerGoal.hGoalPoint;
		}
		inline void setHGoalPoint(const double &hGoalPoint)
		{
			idl_CommPlannerGoal.hGoalPoint = hGoalPoint;
		}

		inline double getHWayPoint() const
		{
			return idl_CommPlannerGoal.hWayPoint;
		}
		inline void setHWayPoint(const double &hWayPoint)
		{
			idl_CommPlannerGoal.hWayPoint = hWayPoint;
		}

		inline int getId() const
		{
			return idl_CommPlannerGoal.id;
		}
		inline void setId(const int &id)
		{
			idl_CommPlannerGoal.id = id;
		}

		inline double getXGoalPoint() const
		{
			return idl_CommPlannerGoal.xGoalPoint;
		}
		inline void setXGoalPoint(const double &xGoalPoint)
		{
			idl_CommPlannerGoal.xGoalPoint = xGoalPoint;
		}

		inline double getXWayPoint() const
		{
			return idl_CommPlannerGoal.xWayPoint;
		}
		inline void setXWayPoint(const double &xWayPoint)
		{
			idl_CommPlannerGoal.xWayPoint = xWayPoint;
		}

		inline double getYGoalPoint() const
		{
			return idl_CommPlannerGoal.yGoalPoint;
		}
		inline void setYGoalPoint(const double &yGoalPoint)
		{
			idl_CommPlannerGoal.yGoalPoint = yGoalPoint;
		}

		inline double getYWayPoint() const
		{
			return idl_CommPlannerGoal.yWayPoint;
		}
		inline void setYWayPoint(const double &yWayPoint)
		{
			idl_CommPlannerGoal.yWayPoint = yWayPoint;
		}

		//
		// add your customized interface here
		//
	    void get_goal(double &xW,double &yW,double &hW,double &xG,double &yG,double &hG,long &id,long &flag);
	    void set_goal(double xW,double yW,double hW,double xG,double yG,double hG,long id,long flag);
		void print(void);
};

inline std::ostream &operator<<(std::ostream &os, const CommPlannerGoal &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommNavigationObjects */
#endif /* COMMNAVIGATIONOBJECTS_COMMPLANNERGOAL_H_ */
