//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "CommNavigationObjects/CommNavigationPaths.hh"

using namespace CommNavigationObjects;

CommNavigationPaths::CommNavigationPaths()
:	CommNavigationPathsCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommNavigationPaths::CommNavigationPaths(const std::vector<CommNavigationObjects::CommCorridorNode> &nodes, const std::vector<double> &pathWidth, const std::string &robotID)
:	CommNavigationPathsCore() // base constructor sets default values as defined in the model
{
	setNodes(nodes);
	setPathWidth(pathWidth);
	setRobotID(robotID);
}
 */

CommNavigationPaths::CommNavigationPaths(const CommNavigationPathsCore &commNavigationPaths)
:	CommNavigationPathsCore(commNavigationPaths)
{  }

CommNavigationPaths::CommNavigationPaths(const DATATYPE &commNavigationPaths)
:	CommNavigationPathsCore(commNavigationPaths)
{  }

CommNavigationPaths::~CommNavigationPaths()
{  }

bool CommNavigationPaths::calculatePathLength(double &length){

	size_t nodesSize = this->getNodesSize();
	if(nodesSize>=2){

		length = 0.0;
		for(unsigned long i=1;i<nodesSize;++i){
			CommCorridorNode n1 = this->getNodesElemAtPos(i-1);
			CommCorridorNode n2 = this->getNodesElemAtPos(i);
			length = length + sqrt( pow(n2.getX() - n1.getX(),2) + pow(n2.getY() - n1.getY(),2));
		}

		return true;

	} else {

		return false;
	}

}
