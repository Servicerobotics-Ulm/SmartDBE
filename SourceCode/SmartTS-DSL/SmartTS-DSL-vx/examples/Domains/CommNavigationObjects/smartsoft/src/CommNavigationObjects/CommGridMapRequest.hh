//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------


#ifndef COMMNAVIGATIONOBJECTS_COMMGRIDMAPREQUEST_H_
#define COMMNAVIGATIONOBJECTS_COMMGRIDMAPREQUEST_H_

#include "CommNavigationObjects/CommGridMapRequestCore.hh"

namespace CommNavigationObjects {
		
class CommGridMapRequest : public CommGridMapRequestCore {
	public:
		// default constructors
		CommGridMapRequest();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommGridMapRequest(const unsigned int &id, const int &xOffsetMM, const int &yOffsetMM, const unsigned int &xSizeMM, const unsigned int &ySizeMM, const bool &curLtmState, const unsigned int &curLtmThreshold);
		
		CommGridMapRequest(const CommGridMapRequestCore &commGridMapRequest);
		CommGridMapRequest(const DATATYPE &commGridMapRequest);
		virtual ~CommGridMapRequest();
		
		// use framework specific getter and setter methods from core (base) class
		using CommGridMapRequestCore::get;
		using CommGridMapRequestCore::set;
		
		//
		// feel free to add customized methods here
		//

		inline bool getCurLtmState() const
		{
			return idl_CommGridMapRequest.curLtmState;
		}
		inline void setCurLtmState(const bool &curLtmState)
		{
			idl_CommGridMapRequest.curLtmState = curLtmState;
		}

		inline unsigned int getCurLtmThreshold() const
		{
			return idl_CommGridMapRequest.curLtmThreshold;
		}
		inline void setCurLtmThreshold(const unsigned int &curLtmThreshold)
		{
			idl_CommGridMapRequest.curLtmThreshold = curLtmThreshold;
		}

		inline unsigned int getId() const
		{
			return idl_CommGridMapRequest.id;
		}
		inline void setId(const unsigned int &id)
		{
			idl_CommGridMapRequest.id = id;
		}

		inline int getXOffsetMM() const
		{
			return idl_CommGridMapRequest.xOffsetMM;
		}
		inline void setXOffsetMM(const int &xOffsetMM)
		{
			idl_CommGridMapRequest.xOffsetMM = xOffsetMM;
		}

		inline unsigned int getXSizeMM() const
		{
			return idl_CommGridMapRequest.xSizeMM;
		}
		inline void setXSizeMM(const unsigned int &xSizeMM)
		{
			idl_CommGridMapRequest.xSizeMM = xSizeMM;
		}

		inline int getYOffsetMM() const
		{
			return idl_CommGridMapRequest.yOffsetMM;
		}
		inline void setYOffsetMM(const int &yOffsetMM)
		{
			idl_CommGridMapRequest.yOffsetMM = yOffsetMM;
		}

		inline unsigned int getYSizeMM() const
		{
			return idl_CommGridMapRequest.ySizeMM;
		}
		inline void setYSizeMM(const unsigned int &ySizeMM)
		{
			idl_CommGridMapRequest.ySizeMM = ySizeMM;
		}

		//
		// add your customized interface here
		//

		/// extract all relevant parameters from the communication class of the map
		int get_parameter( unsigned int &id,
				int &xOffsetMM,
				int &yOffsetMM,
				unsigned int &xSizeMM,
				unsigned int &ySizeMM,
				bool &curLtmState,
				unsigned int &curLtmThreshold ) const;


		/// set all relevant parameters in the communication class of the map
		int set_parameter(  unsigned int id,
				int xOffsetMM,
				int yOffsetMM,
				unsigned int xSizeMM,
				unsigned int ySizeMM,
				bool curLtmState,
				unsigned int curLtmThreshold );
};

inline std::ostream &operator<<(std::ostream &os, const CommGridMapRequest &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommNavigationObjects */
#endif /* COMMNAVIGATIONOBJECTS_COMMGRIDMAPREQUEST_H_ */
