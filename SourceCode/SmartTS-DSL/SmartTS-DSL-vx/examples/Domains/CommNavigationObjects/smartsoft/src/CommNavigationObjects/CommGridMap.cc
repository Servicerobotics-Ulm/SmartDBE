//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "CommNavigationObjects/CommGridMap.hh"
#include "smartKnuthMorrisPratt.hh"
#include "CommGridMap.hh"

using namespace CommNavigationObjects;

CommGridMap::CommGridMap()
:	CommGridMapCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommGridMap::CommGridMap(const unsigned int &id, const int &updateCount, const bool &is_valid, const CommBasicObjects::CommTimeStamp &time, const int &xOffsetMM, const int &yOffsetMM, const int &xOffsetCells, const int &yOffsetCells, const int &cellSizeMM, const unsigned int &xSizeMM, const unsigned int &ySizeMM, const unsigned int &xSizeCells, const unsigned int &ySizeCells, const unsigned int &size, const std::vector<unsigned char> &cell)
:	CommGridMapCore() // base constructor sets default values as defined in the model
{
	setId(id);
	setUpdateCount(updateCount);
	setIs_valid(is_valid);
	setTime(time);
	setXOffsetMM(xOffsetMM);
	setYOffsetMM(yOffsetMM);
	setXOffsetCells(xOffsetCells);
	setYOffsetCells(yOffsetCells);
	setCellSizeMM(cellSizeMM);
	setXSizeMM(xSizeMM);
	setYSizeMM(ySizeMM);
	setXSizeCells(xSizeCells);
	setYSizeCells(ySizeCells);
	setSize(size);
	setCell(cell);
}
 */

CommGridMap::CommGridMap(const CommGridMapCore &commGridMap)
:	CommGridMapCore(commGridMap)
{  }

CommGridMap::CommGridMap(const DATATYPE &commGridMap)
:	CommGridMapCore(commGridMap)
{  }

CommGridMap::~CommGridMap()
{  }


int CommGridMap::get_parameter( unsigned int &id,
                                bool &is_valid,
                                struct timeval &time,
                                int &xOffsetMM,
                                int &yOffsetMM,
                                int &xOffsetCells,
                                int &yOffsetCells,
                                unsigned int &cellSizeMM,
                                unsigned int &xSizeMM,
                                unsigned int &ySizeMM,
                                unsigned int &xSizeCells,
                                unsigned int &ySizeCells ) const
{
  id           = idl_CommGridMap.id;
  is_valid     = idl_CommGridMap.is_valid;
  time.tv_sec  = idl_CommGridMap.time.sec;
  time.tv_usec = idl_CommGridMap.time.usec;
  xOffsetMM    = idl_CommGridMap.xOffsetMM;
  yOffsetMM    = idl_CommGridMap.yOffsetMM;
  xOffsetCells = idl_CommGridMap.xOffsetCells;
  yOffsetCells = idl_CommGridMap.yOffsetCells;
  cellSizeMM   = idl_CommGridMap.cellSizeMM;
  xSizeMM      = idl_CommGridMap.xSizeMM;
  ySizeMM      = idl_CommGridMap.ySizeMM;
  xSizeCells   = idl_CommGridMap.xSizeCells;
  ySizeCells   = idl_CommGridMap.ySizeCells;

  return 0;
}



void CommGridMap::save_xpm( std::ostream &os ) const
{
  int a;
  os << "/* XPM */\n";
  os << "static char *noname[] = {\n";
  os << "/* width height ncolors chars_per_pixel */\n";
  os << "\"" << idl_CommGridMap.xSizeCells << " " << idl_CommGridMap.ySizeCells << " 131 2\",\n";
  os << "/* colors */\n";

  // set grey values for free cells of actual map
  // 0    empty cell     => color value 255/255/255 (white)
  // ...
  // 127  occupied cell  => color value 1/1/1       (black)

	// set the fill character to '0' -> together with std::hex and std::setw(2)
	//                                  the value will be printed with length 2: 00, 01, 02, ..., 0f, 10, ...
	os << std::setfill('0');

	for (int h=0;h<128;h++)
	{
	  //
	  os << "\"" << std::hex << std::setw(2) << h << " c "
		 << "#" << std::setw(2) << (255-2*h)
				<< std::setw(2) << (255-2*h)
				<< std::setw(2) << (255-2*h) << "\",\n";
	}

	// special value: obstacle (yellow) (0,255,255)
	os << "\"" << MAPPER_OBSTACLE << " c "
	   << "#" << std::setw(2) << 0
			  << std::setw(2) << 255
			  << std::setw(2) << 255 << "\",\n";

	// special value: growing (green) (0,255,0)
	os << "\"" << MAPPER_GROWING << " c "
	   << "#" << std::setw(2) << 0
			  << std::setw(2) << 255
			  << std::setw(2) << 0 << "\",\n";

	// special value: undeletable (red) (255,0,0)
	os << "\"" << MAPPER_UNDELETABLE << " c "
	   << "#" << std::setw(2) << 255
			  << std::setw(2) << 0
			  << std::setw(2) << 0 << "\",\n";

	os << "/* pixels */\n";

	for (int y=(idl_CommGridMap.ySizeCells-1); y >= 0; y--)
	{
	  os << "\"";
	  for (unsigned int x=0; x < idl_CommGridMap.xSizeCells; x++)
	  {
		a = (int)(idl_CommGridMap.cell[x+y*idl_CommGridMap.xSizeCells]);
		os << std::setw(2) <<  a;
	  }
	  if (y==0) {
		os << "\"\n";
	  } else {
		os << "\",\n";
	  }
	}

	os << "};\n";
}
