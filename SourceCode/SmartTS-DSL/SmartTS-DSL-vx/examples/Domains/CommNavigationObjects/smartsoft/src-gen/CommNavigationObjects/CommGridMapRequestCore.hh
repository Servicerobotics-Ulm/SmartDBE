//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMNAVIGATIONOBJECTS_COMMGRIDMAPREQUEST_CORE_H_
#define COMMNAVIGATIONOBJECTS_COMMGRIDMAPREQUEST_CORE_H_

#include "CommNavigationObjects/CommGridMapRequestData.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommNavigationObjects {
	
class CommGridMapRequestCore {
protected:
	// data structure
	CommNavigationObjectsIDL::CommGridMapRequest idl_CommGridMapRequest;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommNavigationObjectsIDL::CommGridMapRequest DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommGridMapRequestCore();
	CommGridMapRequestCore(const DATATYPE &data);
	// default destructor
	virtual ~CommGridMapRequestCore();
	
	const DATATYPE& get() const { return idl_CommGridMapRequest; }
	operator const DATATYPE&() const { return idl_CommGridMapRequest; }
	DATATYPE& set() { return idl_CommGridMapRequest; }

	static inline std::string identifier(void) { return "CommNavigationObjects::CommGridMapRequest"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Id
	inline unsigned int getId() const { return idl_CommGridMapRequest.id; }
	inline CommGridMapRequestCore& setId(const unsigned int &id) { idl_CommGridMapRequest.id = id; return *this; }
	
	// getter and setter for element XOffsetMM
	inline int getXOffsetMM() const { return idl_CommGridMapRequest.xOffsetMM; }
	inline CommGridMapRequestCore& setXOffsetMM(const int &xOffsetMM) { idl_CommGridMapRequest.xOffsetMM = xOffsetMM; return *this; }
	
	// getter and setter for element YOffsetMM
	inline int getYOffsetMM() const { return idl_CommGridMapRequest.yOffsetMM; }
	inline CommGridMapRequestCore& setYOffsetMM(const int &yOffsetMM) { idl_CommGridMapRequest.yOffsetMM = yOffsetMM; return *this; }
	
	// getter and setter for element XSizeMM
	inline unsigned int getXSizeMM() const { return idl_CommGridMapRequest.xSizeMM; }
	inline CommGridMapRequestCore& setXSizeMM(const unsigned int &xSizeMM) { idl_CommGridMapRequest.xSizeMM = xSizeMM; return *this; }
	
	// getter and setter for element YSizeMM
	inline unsigned int getYSizeMM() const { return idl_CommGridMapRequest.ySizeMM; }
	inline CommGridMapRequestCore& setYSizeMM(const unsigned int &ySizeMM) { idl_CommGridMapRequest.ySizeMM = ySizeMM; return *this; }
	
	// getter and setter for element CurLtmState
	inline bool getCurLtmState() const { return idl_CommGridMapRequest.curLtmState; }
	inline CommGridMapRequestCore& setCurLtmState(const bool &curLtmState) { idl_CommGridMapRequest.curLtmState = curLtmState; return *this; }
	
	// getter and setter for element CurLtmThreshold
	inline unsigned int getCurLtmThreshold() const { return idl_CommGridMapRequest.curLtmThreshold; }
	inline CommGridMapRequestCore& setCurLtmThreshold(const unsigned int &curLtmThreshold) { idl_CommGridMapRequest.curLtmThreshold = curLtmThreshold; return *this; }
};

} /* namespace CommNavigationObjects */
#endif /* COMMNAVIGATIONOBJECTS_COMMGRIDMAPREQUEST_CORE_H_ */
