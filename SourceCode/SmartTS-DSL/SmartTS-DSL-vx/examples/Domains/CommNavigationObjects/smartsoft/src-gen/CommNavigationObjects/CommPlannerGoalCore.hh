//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMNAVIGATIONOBJECTS_COMMPLANNERGOAL_CORE_H_
#define COMMNAVIGATIONOBJECTS_COMMPLANNERGOAL_CORE_H_

#include "CommNavigationObjects/CommPlannerGoalData.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommNavigationObjects {
	
class CommPlannerGoalCore {
protected:
	// data structure
	CommNavigationObjectsIDL::CommPlannerGoal idl_CommPlannerGoal;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommNavigationObjectsIDL::CommPlannerGoal DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPlannerGoalCore();
	CommPlannerGoalCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPlannerGoalCore();
	
	const DATATYPE& get() const { return idl_CommPlannerGoal; }
	operator const DATATYPE&() const { return idl_CommPlannerGoal; }
	DATATYPE& set() { return idl_CommPlannerGoal; }

	static inline std::string identifier(void) { return "CommNavigationObjects::CommPlannerGoal"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Id
	inline int getId() const { return idl_CommPlannerGoal.id; }
	inline CommPlannerGoalCore& setId(const int &id) { idl_CommPlannerGoal.id = id; return *this; }
	
	// getter and setter for element Flag
	inline int getFlag() const { return idl_CommPlannerGoal.flag; }
	inline CommPlannerGoalCore& setFlag(const int &flag) { idl_CommPlannerGoal.flag = flag; return *this; }
	
	// getter and setter for element XWayPoint
	inline double getXWayPoint() const { return idl_CommPlannerGoal.xWayPoint; }
	inline CommPlannerGoalCore& setXWayPoint(const double &xWayPoint) { idl_CommPlannerGoal.xWayPoint = xWayPoint; return *this; }
	
	// getter and setter for element YWayPoint
	inline double getYWayPoint() const { return idl_CommPlannerGoal.yWayPoint; }
	inline CommPlannerGoalCore& setYWayPoint(const double &yWayPoint) { idl_CommPlannerGoal.yWayPoint = yWayPoint; return *this; }
	
	// getter and setter for element HWayPoint
	inline double getHWayPoint() const { return idl_CommPlannerGoal.hWayPoint; }
	inline CommPlannerGoalCore& setHWayPoint(const double &hWayPoint) { idl_CommPlannerGoal.hWayPoint = hWayPoint; return *this; }
	
	// getter and setter for element XGoalPoint
	inline double getXGoalPoint() const { return idl_CommPlannerGoal.xGoalPoint; }
	inline CommPlannerGoalCore& setXGoalPoint(const double &xGoalPoint) { idl_CommPlannerGoal.xGoalPoint = xGoalPoint; return *this; }
	
	// getter and setter for element YGoalPoint
	inline double getYGoalPoint() const { return idl_CommPlannerGoal.yGoalPoint; }
	inline CommPlannerGoalCore& setYGoalPoint(const double &yGoalPoint) { idl_CommPlannerGoal.yGoalPoint = yGoalPoint; return *this; }
	
	// getter and setter for element HGoalPoint
	inline double getHGoalPoint() const { return idl_CommPlannerGoal.hGoalPoint; }
	inline CommPlannerGoalCore& setHGoalPoint(const double &hGoalPoint) { idl_CommPlannerGoal.hGoalPoint = hGoalPoint; return *this; }
};

} /* namespace CommNavigationObjects */
#endif /* COMMNAVIGATIONOBJECTS_COMMPLANNERGOAL_CORE_H_ */
