//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMNAVIGATIONOBJECTS_COMMNAVIGATIONTOPOLOGYPART_CORE_H_
#define COMMNAVIGATIONOBJECTS_COMMNAVIGATIONTOPOLOGYPART_CORE_H_

#include "CommNavigationObjects/CommNavigationTopologyPartData.hh"
#include "CommNavigationObjects/enumNavigationPartType.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommNavigationObjects {
	
class CommNavigationTopologyPartCore {
protected:
	// data structure
	CommNavigationObjectsIDL::CommNavigationTopologyPart idl_CommNavigationTopologyPart;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommNavigationObjectsIDL::CommNavigationTopologyPart DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommNavigationTopologyPartCore();
	CommNavigationTopologyPartCore(const DATATYPE &data);
	// default destructor
	virtual ~CommNavigationTopologyPartCore();
	
	const DATATYPE& get() const { return idl_CommNavigationTopologyPart; }
	operator const DATATYPE&() const { return idl_CommNavigationTopologyPart; }
	DATATYPE& set() { return idl_CommNavigationTopologyPart; }

	static inline std::string identifier(void) { return "CommNavigationObjects::CommNavigationTopologyPart"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Type
	inline CommNavigationObjects::NavigationPartType getType() const { return CommNavigationObjects::NavigationPartType(idl_CommNavigationTopologyPart.type); }
	inline CommNavigationTopologyPartCore& setType(const CommNavigationObjects::NavigationPartType &type) { idl_CommNavigationTopologyPart.type = type; return *this; }
	
	// getter and setter for element Id
	inline unsigned int getId() const { return idl_CommNavigationTopologyPart.id; }
	inline CommNavigationTopologyPartCore& setId(const unsigned int &id) { idl_CommNavigationTopologyPart.id = id; return *this; }
	
	// getter and setter for element Name
	inline std::string getName() const { return idl_CommNavigationTopologyPart.name; }
	inline CommNavigationTopologyPartCore& setName(const std::string &name) { idl_CommNavigationTopologyPart.name = name; return *this; }
	
	// getter and setter for element Contained_location_ids
	/**
	 * Getter methods for idl_CommNavigationTopologyPart.contained_location_ids of type vector<unsigned int>
	 */
	inline std::vector<unsigned int>& getContained_location_idsRef() { return idl_CommNavigationTopologyPart.contained_location_ids; }
	inline std::vector<unsigned int> getContained_location_idsCopy() const {
		return std::vector<unsigned int>(idl_CommNavigationTopologyPart.contained_location_ids.begin(), idl_CommNavigationTopologyPart.contained_location_ids.end());
	}
	inline unsigned int getContained_location_idsElemAtPos(const size_t &pos) const { return idl_CommNavigationTopologyPart.contained_location_ids[pos]; }
	inline size_t getContained_location_idsSize() const { return idl_CommNavigationTopologyPart.contained_location_ids.size(); }
	inline bool isContained_location_idsEmpty() const { return idl_CommNavigationTopologyPart.contained_location_ids.empty(); }
	/**
	 * Setter methods for idl_CommNavigationTopologyPart.contained_location_ids of type vector<unsigned int>
	 */
	inline CommNavigationTopologyPartCore& setContained_location_ids(const std::vector<unsigned int> &contained_location_ids) { idl_CommNavigationTopologyPart.contained_location_ids = contained_location_ids; return *this; }
	inline bool setContained_location_idsElemAtPos(const size_t &pos, const unsigned int &elem) {
		if(pos < idl_CommNavigationTopologyPart.contained_location_ids.size()) {
			idl_CommNavigationTopologyPart.contained_location_ids[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertContained_location_idsVectorAtPos(const size_t &pos, const std::vector<unsigned int> &data) {
		if(pos < idl_CommNavigationTopologyPart.contained_location_ids.size()) {
			idl_CommNavigationTopologyPart.contained_location_ids.insert(idl_CommNavigationTopologyPart.contained_location_ids.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeContained_location_ids(const size_t &size) { idl_CommNavigationTopologyPart.contained_location_ids.resize(size); }
	inline bool eraseContained_location_idsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommNavigationTopologyPart.contained_location_ids.size() ) {
			idl_CommNavigationTopologyPart.contained_location_ids.erase(idl_CommNavigationTopologyPart.contained_location_ids.begin()+pos, idl_CommNavigationTopologyPart.contained_location_ids.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearContained_location_ids() { idl_CommNavigationTopologyPart.contained_location_ids.clear(); }
};

} /* namespace CommNavigationObjects */
#endif /* COMMNAVIGATIONOBJECTS_COMMNAVIGATIONTOPOLOGYPART_CORE_H_ */
