//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMNAVIGATIONOBJECTS_COMMCORRIDORNAVIGATIONGOAL_CORE_H_
#define COMMNAVIGATIONOBJECTS_COMMCORRIDORNAVIGATIONGOAL_CORE_H_

#include "CommNavigationObjects/CommCorridorNavigationGoalData.hh"
#include "CommNavigationObjects/CommNavigationPaths.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommNavigationObjects {
	
class CommCorridorNavigationGoalCore {
protected:
	// data structure
	CommNavigationObjectsIDL::CommCorridorNavigationGoal idl_CommCorridorNavigationGoal;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommNavigationObjectsIDL::CommCorridorNavigationGoal DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommCorridorNavigationGoalCore();
	CommCorridorNavigationGoalCore(const DATATYPE &data);
	// default destructor
	virtual ~CommCorridorNavigationGoalCore();
	
	const DATATYPE& get() const { return idl_CommCorridorNavigationGoal; }
	operator const DATATYPE&() const { return idl_CommCorridorNavigationGoal; }
	DATATYPE& set() { return idl_CommCorridorNavigationGoal; }

	static inline std::string identifier(void) { return "CommNavigationObjects::CommCorridorNavigationGoal"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element GoalID
	inline int getGoalID() const { return idl_CommCorridorNavigationGoal.goalID; }
	inline CommCorridorNavigationGoalCore& setGoalID(const int &goalID) { idl_CommCorridorNavigationGoal.goalID = goalID; return *this; }
	
	// getter and setter for element Paths
	inline CommNavigationObjects::CommNavigationPaths getPaths() const { return CommNavigationObjects::CommNavigationPaths(idl_CommCorridorNavigationGoal.paths); }
	inline CommCorridorNavigationGoalCore& setPaths(const CommNavigationObjects::CommNavigationPaths &paths) { idl_CommCorridorNavigationGoal.paths = paths; return *this; }
	
	// getter and setter for element GoalX
	inline double getGoalX() const { return idl_CommCorridorNavigationGoal.goalX; }
	inline CommCorridorNavigationGoalCore& setGoalX(const double &goalX) { idl_CommCorridorNavigationGoal.goalX = goalX; return *this; }
	
	// getter and setter for element GoalY
	inline double getGoalY() const { return idl_CommCorridorNavigationGoal.goalY; }
	inline CommCorridorNavigationGoalCore& setGoalY(const double &goalY) { idl_CommCorridorNavigationGoal.goalY = goalY; return *this; }
	
	// getter and setter for element Goal_id
	inline int getGoal_id() const { return idl_CommCorridorNavigationGoal.goal_id; }
	inline CommCorridorNavigationGoalCore& setGoal_id(const int &goal_id) { idl_CommCorridorNavigationGoal.goal_id = goal_id; return *this; }
	
	// getter and setter for element StartX
	inline double getStartX() const { return idl_CommCorridorNavigationGoal.startX; }
	inline CommCorridorNavigationGoalCore& setStartX(const double &startX) { idl_CommCorridorNavigationGoal.startX = startX; return *this; }
	
	// getter and setter for element StartY
	inline double getStartY() const { return idl_CommCorridorNavigationGoal.startY; }
	inline CommCorridorNavigationGoalCore& setStartY(const double &startY) { idl_CommCorridorNavigationGoal.startY = startY; return *this; }
	
	// getter and setter for element Start_id
	inline int getStart_id() const { return idl_CommCorridorNavigationGoal.start_id; }
	inline CommCorridorNavigationGoalCore& setStart_id(const int &start_id) { idl_CommCorridorNavigationGoal.start_id = start_id; return *this; }
};

} /* namespace CommNavigationObjects */
#endif /* COMMNAVIGATIONOBJECTS_COMMCORRIDORNAVIGATIONGOAL_CORE_H_ */
