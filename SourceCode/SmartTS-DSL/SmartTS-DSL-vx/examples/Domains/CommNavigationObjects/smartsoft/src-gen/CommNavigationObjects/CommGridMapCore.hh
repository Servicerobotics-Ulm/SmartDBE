//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMNAVIGATIONOBJECTS_COMMGRIDMAP_CORE_H_
#define COMMNAVIGATIONOBJECTS_COMMGRIDMAP_CORE_H_

#include "CommNavigationObjects/CommGridMapData.hh"
#include "CommBasicObjects/CommTimeStamp.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommNavigationObjects {
	
class CommGridMapCore {
protected:
	// data structure
	CommNavigationObjectsIDL::CommGridMap idl_CommGridMap;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommNavigationObjectsIDL::CommGridMap DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommGridMapCore();
	CommGridMapCore(const DATATYPE &data);
	// default destructor
	virtual ~CommGridMapCore();
	
	const DATATYPE& get() const { return idl_CommGridMap; }
	operator const DATATYPE&() const { return idl_CommGridMap; }
	DATATYPE& set() { return idl_CommGridMap; }

	static inline std::string identifier(void) { return "CommNavigationObjects::CommGridMap"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Id
	inline unsigned int getId() const { return idl_CommGridMap.id; }
	inline CommGridMapCore& setId(const unsigned int &id) { idl_CommGridMap.id = id; return *this; }
	
	// getter and setter for element Is_valid
	inline bool getIs_valid() const { return idl_CommGridMap.is_valid; }
	inline CommGridMapCore& setIs_valid(const bool &is_valid) { idl_CommGridMap.is_valid = is_valid; return *this; }
	
	// getter and setter for element Time
	inline CommBasicObjects::CommTimeStamp getTime() const { return CommBasicObjects::CommTimeStamp(idl_CommGridMap.time); }
	inline CommGridMapCore& setTime(const CommBasicObjects::CommTimeStamp &time) { idl_CommGridMap.time = time; return *this; }
	
	// getter and setter for element XOffsetMM
	inline int getXOffsetMM() const { return idl_CommGridMap.xOffsetMM; }
	inline CommGridMapCore& setXOffsetMM(const int &xOffsetMM) { idl_CommGridMap.xOffsetMM = xOffsetMM; return *this; }
	
	// getter and setter for element YOffsetMM
	inline int getYOffsetMM() const { return idl_CommGridMap.yOffsetMM; }
	inline CommGridMapCore& setYOffsetMM(const int &yOffsetMM) { idl_CommGridMap.yOffsetMM = yOffsetMM; return *this; }
	
	// getter and setter for element XOffsetCells
	inline int getXOffsetCells() const { return idl_CommGridMap.xOffsetCells; }
	inline CommGridMapCore& setXOffsetCells(const int &xOffsetCells) { idl_CommGridMap.xOffsetCells = xOffsetCells; return *this; }
	
	// getter and setter for element YOffsetCells
	inline int getYOffsetCells() const { return idl_CommGridMap.yOffsetCells; }
	inline CommGridMapCore& setYOffsetCells(const int &yOffsetCells) { idl_CommGridMap.yOffsetCells = yOffsetCells; return *this; }
	
	// getter and setter for element CellSizeMM
	inline int getCellSizeMM() const { return idl_CommGridMap.cellSizeMM; }
	inline CommGridMapCore& setCellSizeMM(const int &cellSizeMM) { idl_CommGridMap.cellSizeMM = cellSizeMM; return *this; }
	
	// getter and setter for element XSizeMM
	inline unsigned int getXSizeMM() const { return idl_CommGridMap.xSizeMM; }
	inline CommGridMapCore& setXSizeMM(const unsigned int &xSizeMM) { idl_CommGridMap.xSizeMM = xSizeMM; return *this; }
	
	// getter and setter for element YSizeMM
	inline unsigned int getYSizeMM() const { return idl_CommGridMap.ySizeMM; }
	inline CommGridMapCore& setYSizeMM(const unsigned int &ySizeMM) { idl_CommGridMap.ySizeMM = ySizeMM; return *this; }
	
	// getter and setter for element XSizeCells
	inline unsigned int getXSizeCells() const { return idl_CommGridMap.xSizeCells; }
	inline CommGridMapCore& setXSizeCells(const unsigned int &xSizeCells) { idl_CommGridMap.xSizeCells = xSizeCells; return *this; }
	
	// getter and setter for element YSizeCells
	inline unsigned int getYSizeCells() const { return idl_CommGridMap.ySizeCells; }
	inline CommGridMapCore& setYSizeCells(const unsigned int &ySizeCells) { idl_CommGridMap.ySizeCells = ySizeCells; return *this; }
	
	// getter and setter for element Size
	inline unsigned int getSize() const { return idl_CommGridMap.size; }
	inline CommGridMapCore& setSize(const unsigned int &size) { idl_CommGridMap.size = size; return *this; }
	
	// getter and setter for element Cell
	/**
	 * Getter methods for idl_CommGridMap.cell of type vector<unsigned char>
	 */
	inline std::vector<unsigned char>& getCellRef() { return idl_CommGridMap.cell; }
	inline std::vector<unsigned char> getCellCopy() const {
		return std::vector<unsigned char>(idl_CommGridMap.cell.begin(), idl_CommGridMap.cell.end());
	}
	inline unsigned char getCellElemAtPos(const size_t &pos) const { return idl_CommGridMap.cell[pos]; }
	inline size_t getCellSize() const { return idl_CommGridMap.cell.size(); }
	inline bool isCellEmpty() const { return idl_CommGridMap.cell.empty(); }
	/**
	 * Setter methods for idl_CommGridMap.cell of type vector<unsigned char>
	 */
	inline CommGridMapCore& setCell(const std::vector<unsigned char> &cell) { idl_CommGridMap.cell = cell; return *this; }
	inline bool setCellElemAtPos(const size_t &pos, const unsigned char &elem) {
		if(pos < idl_CommGridMap.cell.size()) {
			idl_CommGridMap.cell[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertCellVectorAtPos(const size_t &pos, const std::vector<unsigned char> &data) {
		if(pos < idl_CommGridMap.cell.size()) {
			idl_CommGridMap.cell.insert(idl_CommGridMap.cell.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeCell(const size_t &size) { idl_CommGridMap.cell.resize(size); }
	inline bool eraseCellElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommGridMap.cell.size() ) {
			idl_CommGridMap.cell.erase(idl_CommGridMap.cell.begin()+pos, idl_CommGridMap.cell.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearCell() { idl_CommGridMap.cell.clear(); }
};

} /* namespace CommNavigationObjects */
#endif /* COMMNAVIGATIONOBJECTS_COMMGRIDMAP_CORE_H_ */
