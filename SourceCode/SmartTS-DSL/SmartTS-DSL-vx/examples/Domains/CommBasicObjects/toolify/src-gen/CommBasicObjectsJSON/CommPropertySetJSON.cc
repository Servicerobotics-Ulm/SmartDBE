//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommPropertySetJSON.hh"

#include "CommBasicObjectsJSON/PropertySetEntryJSON.hh"
#include "CommBasicObjectsJSON/PropertyItemEntryJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommPropertySet& obj, nlohmann::json& j)
{
	// sets: PropertySetEntry[]
	for(size_t idx=0; idx < obj.sets.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.sets.at(idx), array_element);
		j["sets"].emplace_back(array_element);
	}
	// items: PropertyItemEntry[]
	for(size_t idx=0; idx < obj.items.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.items.at(idx), array_element);
		j["items"].emplace_back(array_element);
	}
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommPropertySet& obj)
{
	// sets: PropertySetEntry[]
	if(j.contains("sets") && j["sets"].is_array()) {
		auto jsets = j["sets"];
		obj.sets.resize(jsets.size());
		for(size_t idx=0; idx < jsets.size(); idx++) {
			// convert the json array values individually
			if(jsets.at(idx).is_object()) {
				// from_json(jsets.at(idx), obj.sets.at(idx));
				obj.sets[idx] = jsets[idx].get<CommBasicObjectsIDL::PropertySetEntry>();
			}
		}
	}
	// items: PropertyItemEntry[]
	if(j.contains("items") && j["items"].is_array()) {
		auto jitems = j["items"];
		obj.items.resize(jitems.size());
		for(size_t idx=0; idx < jitems.size(); idx++) {
			// convert the json array values individually
			if(jitems.at(idx).is_object()) {
				// from_json(jitems.at(idx), obj.items.at(idx));
				obj.items[idx] = jitems[idx].get<CommBasicObjectsIDL::PropertyItemEntry>();
			}
		}
	}
}

} // end namespace CommBasicObjectsIDL
