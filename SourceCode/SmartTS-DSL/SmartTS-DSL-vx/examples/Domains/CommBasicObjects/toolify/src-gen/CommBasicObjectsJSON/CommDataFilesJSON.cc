//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommDataFilesJSON.hh"

#include "CommBasicObjectsJSON/CommFileMetaDataJSON.hh"
#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommDataFiles& obj, nlohmann::json& j)
{
	// fileMetaData: CommFileMetaData[]
	for(size_t idx=0; idx < obj.fileMetaData.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.fileMetaData.at(idx), array_element);
		j["fileMetaData"].emplace_back(array_element);
	}
	// timestamp: CommTimeStamp
	to_json(obj.timestamp, j["timestamp"]);
	// datastream: Int8[]
	j["datastream"] = obj.datastream;
	// commpression: Boolean
	j["commpression"] = obj.commpression;
	// baseFileName: String
	j["baseFileName"] = obj.baseFileName;
	// isSingleFile: Boolean
	j["isSingleFile"] = obj.isSingleFile;
	// valid: Boolean
	j["valid"] = obj.valid;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommDataFiles& obj)
{
	// fileMetaData: CommFileMetaData[]
	if(j.contains("fileMetaData") && j["fileMetaData"].is_array()) {
		auto jfileMetaData = j["fileMetaData"];
		obj.fileMetaData.resize(jfileMetaData.size());
		for(size_t idx=0; idx < jfileMetaData.size(); idx++) {
			// convert the json array values individually
			if(jfileMetaData.at(idx).is_object()) {
				// from_json(jfileMetaData.at(idx), obj.fileMetaData.at(idx));
				obj.fileMetaData[idx] = jfileMetaData[idx].get<CommBasicObjectsIDL::CommFileMetaData>();
			}
		}
	}
	// timestamp: CommTimeStamp
	if(j.contains("timestamp") && j["timestamp"].is_object()) {
		//from_json(j["timestamp"], obj.timestamp);
		obj.timestamp = j["timestamp"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
	// datastream: Int8[]
	if(j.contains("datastream") && j["datastream"].is_array()) {
		obj.datastream = j["datastream"].get<std::vector<char>>();
	}
	// commpression: Boolean
	if(j.contains("commpression") && j["commpression"].is_boolean()) {
		obj.commpression = j["commpression"].get<bool>();
	}
	// baseFileName: String
	if(j.contains("baseFileName") && j["baseFileName"].is_string()) {
		obj.baseFileName = j["baseFileName"].get<std::string>();
	}
	// isSingleFile: Boolean
	if(j.contains("isSingleFile") && j["isSingleFile"].is_boolean()) {
		obj.isSingleFile = j["isSingleFile"].get<bool>();
	}
	// valid: Boolean
	if(j.contains("valid") && j["valid"].is_boolean()) {
		obj.valid = j["valid"].get<bool>();
	}
}

} // end namespace CommBasicObjectsIDL
