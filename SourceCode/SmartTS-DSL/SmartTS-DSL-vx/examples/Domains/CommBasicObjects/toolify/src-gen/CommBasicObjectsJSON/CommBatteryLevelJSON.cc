//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommBatteryLevelJSON.hh"

#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"
#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommBatteryLevel& obj, nlohmann::json& j)
{
	// potential: Double
	j["potential"] = obj.potential;
	// chargeLevel: Int32
	j["chargeLevel"] = obj.chargeLevel;
	// lifeTime: CommTimeStamp
	to_json(obj.lifeTime, j["lifeTime"]);
	// timeStamp: CommTimeStamp
	to_json(obj.timeStamp, j["timeStamp"]);
	// current: Double
	j["current"] = obj.current;
	// externalPower: Boolean
	j["externalPower"] = obj.externalPower;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommBatteryLevel& obj)
{
	// potential: Double
	if(j.contains("potential") && j["potential"].is_number_float()) {
		obj.potential = j["potential"].get<double>();
	}
	// chargeLevel: Int32
	if(j.contains("chargeLevel") && j["chargeLevel"].is_number_integer()) {
		obj.chargeLevel = j["chargeLevel"].get<int>();
	}
	// lifeTime: CommTimeStamp
	if(j.contains("lifeTime") && j["lifeTime"].is_object()) {
		//from_json(j["lifeTime"], obj.lifeTime);
		obj.lifeTime = j["lifeTime"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
	// timeStamp: CommTimeStamp
	if(j.contains("timeStamp") && j["timeStamp"].is_object()) {
		//from_json(j["timeStamp"], obj.timeStamp);
		obj.timeStamp = j["timeStamp"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
	// current: Double
	if(j.contains("current") && j["current"].is_number_float()) {
		obj.current = j["current"].get<double>();
	}
	// externalPower: Boolean
	if(j.contains("externalPower") && j["externalPower"].is_boolean()) {
		obj.externalPower = j["externalPower"].get<bool>();
	}
}

} // end namespace CommBasicObjectsIDL
