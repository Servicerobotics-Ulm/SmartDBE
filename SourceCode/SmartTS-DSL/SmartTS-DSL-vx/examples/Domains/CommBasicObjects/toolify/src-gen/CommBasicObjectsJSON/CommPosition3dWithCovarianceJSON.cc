//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommPosition3dWithCovarianceJSON.hh"

#include "CommBasicObjectsJSON/CommPosition3dJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommPosition3dWithCovariance& obj, nlohmann::json& j)
{
	// position: CommPosition3d
	to_json(obj.position, j["position"]);
	// covMatrix: Double[]
	j["covMatrix"] = obj.covMatrix;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommPosition3dWithCovariance& obj)
{
	// position: CommPosition3d
	if(j.contains("position") && j["position"].is_object()) {
		//from_json(j["position"], obj.position);
		obj.position = j["position"].get<CommBasicObjectsIDL::CommPosition3d>();
	}
	// covMatrix: Double[]
	if(j.contains("covMatrix") && j["covMatrix"].is_array()) {
		obj.covMatrix = j["covMatrix"].get<std::vector<double>>();
	}
}

} // end namespace CommBasicObjectsIDL
