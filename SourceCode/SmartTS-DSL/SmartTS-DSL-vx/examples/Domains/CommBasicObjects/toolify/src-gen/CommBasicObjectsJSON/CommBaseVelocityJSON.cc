//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommBaseVelocityJSON.hh"

#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommBaseVelocity& obj, nlohmann::json& j)
{
	// vX: Double
	j["vX"] = obj.vX;
	// vY: Double
	j["vY"] = obj.vY;
	// vZ: Double
	j["vZ"] = obj.vZ;
	// wX: Double
	j["wX"] = obj.wX;
	// wY: Double
	j["wY"] = obj.wY;
	// wZ: Double
	j["wZ"] = obj.wZ;
	// timeStamp: CommTimeStamp
	to_json(obj.timeStamp, j["timeStamp"]);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommBaseVelocity& obj)
{
	// vX: Double
	if(j.contains("vX") && j["vX"].is_number_float()) {
		obj.vX = j["vX"].get<double>();
	}
	// vY: Double
	if(j.contains("vY") && j["vY"].is_number_float()) {
		obj.vY = j["vY"].get<double>();
	}
	// vZ: Double
	if(j.contains("vZ") && j["vZ"].is_number_float()) {
		obj.vZ = j["vZ"].get<double>();
	}
	// wX: Double
	if(j.contains("wX") && j["wX"].is_number_float()) {
		obj.wX = j["wX"].get<double>();
	}
	// wY: Double
	if(j.contains("wY") && j["wY"].is_number_float()) {
		obj.wY = j["wY"].get<double>();
	}
	// wZ: Double
	if(j.contains("wZ") && j["wZ"].is_number_float()) {
		obj.wZ = j["wZ"].get<double>();
	}
	// timeStamp: CommTimeStamp
	if(j.contains("timeStamp") && j["timeStamp"].is_object()) {
		//from_json(j["timeStamp"], obj.timeStamp);
		obj.timeStamp = j["timeStamp"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
}

} // end namespace CommBasicObjectsIDL
