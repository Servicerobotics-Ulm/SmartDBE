//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommIOValuesJSON.hh"

#include "CommBasicObjectsJSON/CommAnalogOutputRequestJSON.hh"
#include "CommBasicObjectsJSON/CommDigitalOutputRequestJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommIOValues& obj, nlohmann::json& j)
{
	// analogInputValues: Float[]
	j["analogInputValues"] = obj.analogInputValues;
	// digitalInputValues: Boolean[]
	j["digitalInputValues"] = obj.digitalInputValues;
	// analogOutputValues: CommAnalogOutputRequest[]
	for(size_t idx=0; idx < obj.analogOutputValues.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.analogOutputValues.at(idx), array_element);
		j["analogOutputValues"].emplace_back(array_element);
	}
	// digitalOutputValues: CommDigitalOutputRequest[]
	for(size_t idx=0; idx < obj.digitalOutputValues.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.digitalOutputValues.at(idx), array_element);
		j["digitalOutputValues"].emplace_back(array_element);
	}
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommIOValues& obj)
{
	// analogInputValues: Float[]
	if(j.contains("analogInputValues") && j["analogInputValues"].is_array()) {
		obj.analogInputValues = j["analogInputValues"].get<std::vector<float>>();
	}
	// digitalInputValues: Boolean[]
	if(j.contains("digitalInputValues") && j["digitalInputValues"].is_array()) {
		obj.digitalInputValues = j["digitalInputValues"].get<std::vector<bool>>();
	}
	// analogOutputValues: CommAnalogOutputRequest[]
	if(j.contains("analogOutputValues") && j["analogOutputValues"].is_array()) {
		auto janalogOutputValues = j["analogOutputValues"];
		obj.analogOutputValues.resize(janalogOutputValues.size());
		for(size_t idx=0; idx < janalogOutputValues.size(); idx++) {
			// convert the json array values individually
			if(janalogOutputValues.at(idx).is_object()) {
				// from_json(janalogOutputValues.at(idx), obj.analogOutputValues.at(idx));
				obj.analogOutputValues[idx] = janalogOutputValues[idx].get<CommBasicObjectsIDL::CommAnalogOutputRequest>();
			}
		}
	}
	// digitalOutputValues: CommDigitalOutputRequest[]
	if(j.contains("digitalOutputValues") && j["digitalOutputValues"].is_array()) {
		auto jdigitalOutputValues = j["digitalOutputValues"];
		obj.digitalOutputValues.resize(jdigitalOutputValues.size());
		for(size_t idx=0; idx < jdigitalOutputValues.size(); idx++) {
			// convert the json array values individually
			if(jdigitalOutputValues.at(idx).is_object()) {
				// from_json(jdigitalOutputValues.at(idx), obj.digitalOutputValues.at(idx));
				obj.digitalOutputValues[idx] = jdigitalOutputValues[idx].get<CommBasicObjectsIDL::CommDigitalOutputRequest>();
			}
		}
	}
}

} // end namespace CommBasicObjectsIDL
