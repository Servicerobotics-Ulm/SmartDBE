//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommUltrasonicScanJSON.hh"

#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"
#include "CommBasicObjectsJSON/CommPose3dJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommUltrasonicScan& obj, nlohmann::json& j)
{
	// timeStamp: CommTimeStamp
	to_json(obj.timeStamp, j["timeStamp"]);
	// scanPoints: CommPose3d[]
	for(size_t idx=0; idx < obj.scanPoints.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.scanPoints.at(idx), array_element);
		j["scanPoints"].emplace_back(array_element);
	}
	// intensities: Double[]
	j["intensities"] = obj.intensities;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommUltrasonicScan& obj)
{
	// timeStamp: CommTimeStamp
	if(j.contains("timeStamp") && j["timeStamp"].is_object()) {
		//from_json(j["timeStamp"], obj.timeStamp);
		obj.timeStamp = j["timeStamp"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
	// scanPoints: CommPose3d[]
	if(j.contains("scanPoints") && j["scanPoints"].is_array()) {
		auto jscanPoints = j["scanPoints"];
		obj.scanPoints.resize(jscanPoints.size());
		for(size_t idx=0; idx < jscanPoints.size(); idx++) {
			// convert the json array values individually
			if(jscanPoints.at(idx).is_object()) {
				// from_json(jscanPoints.at(idx), obj.scanPoints.at(idx));
				obj.scanPoints[idx] = jscanPoints[idx].get<CommBasicObjectsIDL::CommPose3d>();
			}
		}
	}
	// intensities: Double[]
	if(j.contains("intensities") && j["intensities"].is_array()) {
		obj.intensities = j["intensities"].get<std::vector<double>>();
	}
}

} // end namespace CommBasicObjectsIDL
