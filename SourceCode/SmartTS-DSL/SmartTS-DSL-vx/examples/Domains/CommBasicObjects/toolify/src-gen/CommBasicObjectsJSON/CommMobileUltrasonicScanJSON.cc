//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommMobileUltrasonicScanJSON.hh"

#include "CommBasicObjectsJSON/CommBaseStateJSON.hh"
#include "CommBasicObjectsJSON/CommUltrasonicScanJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommMobileUltrasonicScan& obj, nlohmann::json& j)
{
	// baseState: CommBaseState
	to_json(obj.baseState, j["baseState"]);
	// usScan: CommUltrasonicScan
	to_json(obj.usScan, j["usScan"]);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommMobileUltrasonicScan& obj)
{
	// baseState: CommBaseState
	if(j.contains("baseState") && j["baseState"].is_object()) {
		//from_json(j["baseState"], obj.baseState);
		obj.baseState = j["baseState"].get<CommBasicObjectsIDL::CommBaseState>();
	}
	// usScan: CommUltrasonicScan
	if(j.contains("usScan") && j["usScan"].is_object()) {
		//from_json(j["usScan"], obj.usScan);
		obj.usScan = j["usScan"].get<CommBasicObjectsIDL::CommUltrasonicScan>();
	}
}

} // end namespace CommBasicObjectsIDL
