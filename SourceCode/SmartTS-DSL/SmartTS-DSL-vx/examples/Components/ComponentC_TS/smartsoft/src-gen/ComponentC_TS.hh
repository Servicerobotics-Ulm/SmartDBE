//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _COMPONENTC_TS_HH
#define _COMPONENTC_TS_HH

#include <map>
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "ComponentC_TSCore.hh"

#include "ComponentC_TSPortFactoryInterface.hh"
#include "ComponentC_TSExtension.hh"

// forward declarations
class ComponentC_TSPortFactoryInterface;
class ComponentC_TSExtension;

// includes for PlainOpcUaComponentC_TSExtension
// include plain OPC UA device clients
// include plain OPC UA status servers


// include communication objects
#include <DomainTSDemo/BasicBoolean.hh>
#include <DomainTSDemo/BasicBooleanACE.hh>
#include <DomainTSDemo/Coordinate2D.hh>
#include <DomainTSDemo/Coordinate2DACE.hh>
#include <DomainTSDemo/Coordinate3D.hh>
#include <DomainTSDemo/Coordinate3DACE.hh>

// include tasks
#include "Act.hh"
// include UpcallManagers
#include "Push_Coordinate3D_Input_Port_simUpcallManager.hh"
#include "Send_Coordinate2D_Output_Port_tsUpcallManager.hh"

// include input-handler(s)
// include request-handler(s)
#include "Query_ValidCoordinate2D_Answer_Port_sim_Handler.hh"
#include "Query_ValidCoordinate2D_Request_Port_ts_Handler.hh"

// include handler
#include "CompHandler.hh"


#include "SmartStateChangeHandler.hh"

#define COMP ComponentC_TS::instance()

class ComponentC_TS : public ComponentC_TSCore {
private:
	static ComponentC_TS *_componentC_TS;
	
	// constructor
	ComponentC_TS();
	
	// copy-constructor
	ComponentC_TS(const ComponentC_TS& cc);
	
	// destructor
	~ComponentC_TS() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	// helper method that maps a string-name to an according TaskTriggerSubject
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
	// internal map storing the different port-creation factories (that internally map to specific middleware implementations)
	std::map<std::string, ComponentC_TSPortFactoryInterface*> portFactoryRegistry;
	
	// internal map storing various extensions of this component class
	std::map<std::string, ComponentC_TSExtension*> componentExtensionRegistry;
	
public:
	
	// define tasks
	Smart::TaskTriggerSubject* actTrigger;
	Act *act;
	
	// define input-ports
	// InputPort Push_Coordinate3D_Input_Port_sim
	Smart::IPushClientPattern<DomainTSDemo::Coordinate3D> *push_Coordinate3D_Input_Port_sim;
	Smart::InputTaskTrigger<DomainTSDemo::Coordinate3D> *push_Coordinate3D_Input_Port_simInputTaskTrigger;
	Push_Coordinate3D_Input_Port_simUpcallManager *push_Coordinate3D_Input_Port_simUpcallManager;
	// InputPort Send_Coordinate2D_Output_Port_ts
	Smart::ISendServerPattern<DomainTSDemo::Coordinate2D> *send_Coordinate2D_Output_Port_ts;
	Smart::InputTaskTrigger<DomainTSDemo::Coordinate2D> *send_Coordinate2D_Output_Port_tsInputTaskTrigger;
	Send_Coordinate2D_Output_Port_tsUpcallManager *send_Coordinate2D_Output_Port_tsUpcallManager;
	
	// define request-ports
	Smart::IQueryClientPattern<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean> *query_ValidCoordinate2D_Answer_Port_ts;
	Smart::IQueryClientPattern<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean> *query_ValidCoordinate2D_Request_Port_sim;
	
	// define input-handler
	
	// define output-ports
	Smart::IPushServerPattern<DomainTSDemo::Coordinate3D> *push_Coordinate3D_Input_Port_ts;
	Smart::ISendClientPattern<DomainTSDemo::Coordinate2D> *send_Coordinate2D_Output_Port_sim;
	
	// define answer-ports
	Smart::IQueryServerPattern<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean> *query_ValidCoordinate2D_Answer_Port_sim;
	Smart::QueryServerTaskTrigger<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean> *query_ValidCoordinate2D_Answer_Port_simInputTaskTrigger;
	Smart::IQueryServerPattern<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean> *query_ValidCoordinate2D_Request_Port_ts;
	Smart::QueryServerTaskTrigger<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean> *query_ValidCoordinate2D_Request_Port_tsInputTaskTrigger;
	
	// define request-handlers
	Query_ValidCoordinate2D_Answer_Port_sim_Handler *query_ValidCoordinate2D_Answer_Port_sim_Handler;
	Query_ValidCoordinate2D_Request_Port_ts_Handler *query_ValidCoordinate2D_Request_Port_ts_Handler;
	
	// definitions of PlainOpcUaComponentC_TSExtension
	
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	
	// define master ports
	SmartACE::StateMaster *stateMaster;
	SmartACE::ParameterMaster *paramMaster;
	SmartACE::WiringMaster *wiringMaster;
	
	/// this method is used to register different PortFactory classes (one for each supported middleware framework)
	void addPortFactory(const std::string &name, ComponentC_TSPortFactoryInterface *portFactory);
	
	SmartACE::SmartComponent* getComponentImpl();
	
	/// this method is used to register different component-extension classes
	void addExtension(ComponentC_TSExtension *extension);
	
	/// this method allows to access the registered component-extensions (automatically converting to the actuall implementation type)
	template <typename T>
	T* getExtension(const std::string &name) {
		auto it = componentExtensionRegistry.find(name);
		if(it != componentExtensionRegistry.end()) {
			return dynamic_cast<T*>(it->second);
		}
		return 0;
	}
	
	/// initialize component's internal members
	void init(int argc, char *argv[]);
	
	/// execute the component's infrastructure
	void run();
	
	/// clean-up component's resources
	void fini();
	
	/// call this method to set the overall component into the Alive state (i.e. component is then ready to operate)
	void setStartupFinished();
	
	/// connect all component's client ports
	Smart::StatusCode connectAndStartAllServices();
	
	/// start all assocuated Activities
	void startAllTasks();
	
	/// start all associated timers
	void startAllTimers();
	
	Smart::StatusCode connectPush_Coordinate3D_Input_Port_sim(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectQuery_ValidCoordinate2D_Answer_Port_ts(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectQuery_ValidCoordinate2D_Request_Port_sim(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectSend_Coordinate2D_Output_Port_sim(const std::string &serverName, const std::string &serviceName);

	// return singleton instance
	static ComponentC_TS* instance()
	{
		if(_componentC_TS == 0) {
			_componentC_TS = new ComponentC_TS();
		}
		return _componentC_TS;
	}
	
	static void deleteInstance() {
		if(_componentC_TS != 0) {
			delete _componentC_TS;
		}
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialComponentMode;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		struct Act_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} act;
		
		//--- upcall parameter ---
		
		//--- server port parameter ---
		struct Push_Coordinate3D_Input_Port_ts_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} push_Coordinate3D_Input_Port_ts;
		struct Query_ValidCoordinate2D_Answer_Port_sim_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} query_ValidCoordinate2D_Answer_Port_sim;
		struct Query_ValidCoordinate2D_Request_Port_ts_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} query_ValidCoordinate2D_Request_Port_ts;
		struct Send_Coordinate2D_Output_Port_ts_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} send_Coordinate2D_Output_Port_ts;
	
		//--- client port parameter ---
		struct Push_Coordinate3D_Input_Port_sim_struct {
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} push_Coordinate3D_Input_Port_sim;
		struct Query_ValidCoordinate2D_Answer_Port_ts_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} query_ValidCoordinate2D_Answer_Port_ts;
		struct Query_ValidCoordinate2D_Request_Port_sim_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} query_ValidCoordinate2D_Request_Port_sim;
		struct Send_Coordinate2D_Output_Port_sim_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} send_Coordinate2D_Output_Port_sim;
		
		// -- parameters for PlainOpcUaComponentC_TSExtension
		
	} connections;
};
#endif
