//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "ComponentC_TSAcePortFactory.hh"

// create a static instance of the default AcePortFactory
static ComponentC_TSAcePortFactory acePortFactory;

ComponentC_TSAcePortFactory::ComponentC_TSAcePortFactory()
{  
	componentImpl = 0;
	ComponentC_TS::instance()->addPortFactory("ACE_SmartSoft", this);
}

ComponentC_TSAcePortFactory::~ComponentC_TSAcePortFactory()
{  }

void ComponentC_TSAcePortFactory::initialize(ComponentC_TS *component, int argc, char* argv[])
{
	if(component->connections.component.defaultScheduler != "DEFAULT") {
		ACE_Sched_Params sched_params(ACE_SCHED_OTHER, ACE_THR_PRI_OTHER_DEF);
		if(component->connections.component.defaultScheduler == "FIFO") {
			sched_params.policy(ACE_SCHED_FIFO);
			sched_params.priority(ACE_THR_PRI_FIFO_MIN);
		} else if(component->connections.component.defaultScheduler == "RR") {
			sched_params.policy(ACE_SCHED_RR);
			sched_params.priority(ACE_THR_PRI_RR_MIN);
		}
		// create new instance of the SmartSoft component with customized scheuling parameters 
		componentImpl = new ComponentC_TSImpl(component->connections.component.name, argc, argv, sched_params);
	} else {
		// create new instance of the SmartSoft component
		componentImpl = new ComponentC_TSImpl(component->connections.component.name, argc, argv);
	}
}

int ComponentC_TSAcePortFactory::onStartup()
{
	return componentImpl->startComponentInfrastructure();
}

Smart::IPushClientPattern<DomainTSDemo::Coordinate3D> * ComponentC_TSAcePortFactory::createPush_Coordinate3D_Input_Port_sim()
{
	return new SmartACE::PushClient<DomainTSDemo::Coordinate3D>(componentImpl);
}

Smart::IQueryClientPattern<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean> * ComponentC_TSAcePortFactory::createQuery_ValidCoordinate2D_Answer_Port_ts()
{
	return new SmartACE::QueryClient<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean>(componentImpl);
}

Smart::IQueryClientPattern<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean> * ComponentC_TSAcePortFactory::createQuery_ValidCoordinate2D_Request_Port_sim()
{
	return new SmartACE::QueryClient<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean>(componentImpl);
}

Smart::ISendClientPattern<DomainTSDemo::Coordinate2D> * ComponentC_TSAcePortFactory::createSend_Coordinate2D_Output_Port_sim()
{
	return new SmartACE::SendClient<DomainTSDemo::Coordinate2D>(componentImpl);
}


Smart::IPushServerPattern<DomainTSDemo::Coordinate3D> * ComponentC_TSAcePortFactory::createPush_Coordinate3D_Input_Port_ts(const std::string &serviceName)
{
	return new SmartACE::PushServer<DomainTSDemo::Coordinate3D>(componentImpl, serviceName);
}

Smart::IQueryServerPattern<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean> * ComponentC_TSAcePortFactory::createQuery_ValidCoordinate2D_Answer_Port_sim(const std::string &serviceName)
{
	return new SmartACE::QueryServer<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean>(componentImpl, serviceName);
}

Smart::IQueryServerPattern<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean> * ComponentC_TSAcePortFactory::createQuery_ValidCoordinate2D_Request_Port_ts(const std::string &serviceName)
{
	return new SmartACE::QueryServer<DomainTSDemo::Coordinate2D, DomainTSDemo::BasicBoolean>(componentImpl, serviceName);
}

Smart::ISendServerPattern<DomainTSDemo::Coordinate2D> * ComponentC_TSAcePortFactory::createSend_Coordinate2D_Output_Port_ts(const std::string &serviceName)
{
	return new SmartACE::SendServer<DomainTSDemo::Coordinate2D>(componentImpl, serviceName);
}


SmartACE::SmartComponent* ComponentC_TSAcePortFactory::getComponentImpl()
{
	return componentImpl;
}

int ComponentC_TSAcePortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	componentImpl->stopComponentInfrastructure(timeoutTime);
	return 0;
}

void ComponentC_TSAcePortFactory::destroy()
{
	// clean-up component's internally used resources (internally used communication middleware) 
	componentImpl->cleanUpComponentResources();
	delete componentImpl;
}
