#!/bin/sh
#--------------------------------------------------------------------------
# Code generated by the SmartSoft MDSD Toolchain
# The SmartSoft Toolchain has been developed by:
#  
# Service Robotics Research Center
# University of Applied Sciences Ulm
# Prittwitzstr. 10
# 89075 Ulm (Germany)
#
# Information about the SmartSoft MDSD Toolchain is available at:
# www.servicerobotik-ulm.de
#
# Please do not modify this file. It will be re-generated
# running the code generator.
#--------------------------------------------------------------------------
#
# start script for device LocalhostTarget


PID_XTERM="/var/tmp/start-LocalhostTarget-xterms.pid"
PID_COMPONENT_NAMES="/var/tmp/start-LocalhostTarget-component-names.pid"

SCRIPT_DIR=`pwd`
SCRIPT_NAME=start-LocalhostTarget.sh

export SMART_ROOT_DEPLOYMENT=$SCRIPT_DIR

#######
## case
case "$1" in
	    
	    
#########################################################################################
## start
start)

true > $PID_XTERM
true > $PID_COMPONENT_NAMES

echo "Starting scenario..."
date -R

# CONFIGURE NAMING SERVICE
	export SMART_NS_ADDR=127.0.0.1:20002

echo "Stopping Naming Service..."
killall AceSmartSoftNamingService &
test -e SMART_NAMES && rm -f SMART_NAMES
sleep 1
echo Starting Naming Service...
rm -f AceSmartSoftNamingService.log
if [ -f "/usr/bin/AceSmartSoftNamingService" ]
then
   xterm -l -lf AceSmartSoftNamingService.log -title "AceSmartSoftNamingService" -hold -e "export LD_LIBRARY_PATH=$SCRIPT_DIR:\$LD_LIBRARY_PATH; /usr/bin/AceSmartSoftNamingService --ns-port 20002 --ns-dir ./ --ns-file SMART_NAMES --filename=ns_config.ini; echo; echo; echo 'Naming Service exited'; /bin/bash" &
elif [ -f "$SMART_ROOT_ACE/bin/NamingService/AceSmartSoftNamingService" ]
then
   xterm -l -lf AceSmartSoftNamingService.log -title "AceSmartSoftNamingService" -hold -e "export LD_LIBRARY_PATH=$SCRIPT_DIR:\$LD_LIBRARY_PATH; $SMART_ROOT_ACE/bin/NamingService/AceSmartSoftNamingService --ns-port 20002 --ns-dir ./ --ns-file SMART_NAMES --filename=ns_config.ini; echo; echo; echo 'Naming Service exited'; /bin/bash" &
else
   #xterm -l -lf AceSmartSoftNamingService.log -title "AceSmartSoftNamingService" -hold -e "export LD_LIBRARY_PATH=$SCRIPT_DIR:\$LD_LIBRARY_PATH; ./NamingService/AceSmartSoftNamingService --ns-port 20002 --ns-dir ./ --ns-file SMART_NAMES --filename=ns_config.ini; echo; echo; echo 'Naming Service exited'; /bin/bash" &
   echo "ERROR: AceSmartSoftNamingService not found!"
   exit -1;
fi
echo $! >> $PID_XTERM
echo AceSmartSoftNamingService >> $PID_COMPONENT_NAMES
sleep 1

## start components
export SMART_IP=127.0.0.1
echo "starting components..."

# Component instance RobotOperator
echo
echo "############################################"
echo "## Starting component instance RobotOperator"
cd $SCRIPT_DIR
echo "executing startstop-hooks-RobotOperator.sh (errors might be ignored)"
bash startstop-hooks-RobotOperator.sh pre-start
cd $SCRIPT_DIR/RobotOperator_data
rm -f "../RobotOperator.log"
xterm -l -lf "../RobotOperator.log" -title "RobotOperator@LocalhostTarget Component" -hold -e "export LD_LIBRARY_PATH=$SCRIPT_DIR:\$LD_LIBRARY_PATH; $SCRIPT_DIR/SmartJoystickServer -filename=$SCRIPT_DIR/RobotOperator.ini; echo; echo; echo 'RobotOperator exited.'; echo; /bin/bash --login" &
echo $! >> $PID_XTERM
echo SmartJoystickServer >> $PID_COMPONENT_NAMES
cd $SCRIPT_DIR
bash startstop-hooks-RobotOperator.sh post-start
echo -e "\n\n\n"

# Component instance Robotino
echo
echo "############################################"
echo "## Starting component instance Robotino"
cd $SCRIPT_DIR
echo "executing startstop-hooks-Robotino.sh (errors might be ignored)"
bash startstop-hooks-Robotino.sh pre-start
cd $SCRIPT_DIR/Robotino_data
rm -f "../Robotino.log"
xterm -l -lf "../Robotino.log" -title "Robotino@LocalhostTarget Component" -hold -e "export LD_LIBRARY_PATH=$SCRIPT_DIR:\$LD_LIBRARY_PATH; $SCRIPT_DIR/ComponentWebotsMobileRobot -filename=$SCRIPT_DIR/Robotino.ini; echo; echo; echo 'Robotino exited.'; echo; /bin/bash --login" &
echo $! >> $PID_XTERM
echo ComponentWebotsMobileRobot >> $PID_COMPONENT_NAMES
cd $SCRIPT_DIR
bash startstop-hooks-Robotino.sh post-start
echo -e "\n\n\n"

# Component instance SJMan
echo
echo "############################################"
echo "## Starting component instance SJMan"
cd $SCRIPT_DIR
echo "executing startstop-hooks-SJMan.sh (errors might be ignored)"
bash startstop-hooks-SJMan.sh pre-start
cd $SCRIPT_DIR/SJMan_data
rm -f "../SJMan.log"
xterm -l -lf "../SJMan.log" -title "SJMan@LocalhostTarget Component" -hold -e "export LD_LIBRARY_PATH=$SCRIPT_DIR:\$LD_LIBRARY_PATH; $SCRIPT_DIR/SmartJoystickManager -filename=$SCRIPT_DIR/SJMan.ini; echo; echo; echo 'SJMan exited.'; echo; /bin/bash --login" &
echo $! >> $PID_XTERM
echo SmartJoystickManager >> $PID_COMPONENT_NAMES
cd $SCRIPT_DIR
bash startstop-hooks-SJMan.sh post-start
echo -e "\n\n\n"

# Component instance SJNav
echo
echo "############################################"
echo "## Starting component instance SJNav"
cd $SCRIPT_DIR
echo "executing startstop-hooks-SJNav.sh (errors might be ignored)"
bash startstop-hooks-SJNav.sh pre-start
cd $SCRIPT_DIR/SJNav_data
rm -f "../SJNav.log"
xterm -l -lf "../SJNav.log" -title "SJNav@LocalhostTarget Component" -hold -e "export LD_LIBRARY_PATH=$SCRIPT_DIR:\$LD_LIBRARY_PATH; $SCRIPT_DIR/SmartJoystickNavigation -filename=$SCRIPT_DIR/SJNav.ini; echo; echo; echo 'SJNav exited.'; echo; /bin/bash --login" &
echo $! >> $PID_XTERM
echo SmartJoystickNavigation >> $PID_COMPONENT_NAMES
cd $SCRIPT_DIR
bash startstop-hooks-SJNav.sh post-start
echo -e "\n\n\n"

# Component instance SafetyOfficer
echo
echo "############################################"
echo "## Starting component instance SafetyOfficer"
cd $SCRIPT_DIR
echo "executing startstop-hooks-SafetyOfficer.sh (errors might be ignored)"
bash startstop-hooks-SafetyOfficer.sh pre-start
cd $SCRIPT_DIR/SafetyOfficer_data
rm -f "../SafetyOfficer.log"
xterm -l -lf "../SafetyOfficer.log" -title "SafetyOfficer@LocalhostTarget Component" -hold -e "export LD_LIBRARY_PATH=$SCRIPT_DIR:\$LD_LIBRARY_PATH; $SCRIPT_DIR/SmartJoystickServer -filename=$SCRIPT_DIR/SafetyOfficer.ini; echo; echo; echo 'SafetyOfficer exited.'; echo; /bin/bash --login" &
echo $! >> $PID_XTERM
echo SmartJoystickServer >> $PID_COMPONENT_NAMES
cd $SCRIPT_DIR
bash startstop-hooks-SafetyOfficer.sh post-start
echo -e "\n\n\n"

# Component instance WebotsLink
echo
echo "############################################"
echo "## Starting component instance WebotsLink"
cd $SCRIPT_DIR
echo "executing startstop-hooks-WebotsLink.sh (errors might be ignored)"
bash startstop-hooks-WebotsLink.sh pre-start
cd $SCRIPT_DIR/WebotsLink_data
rm -f "../WebotsLink.log"
xterm -l -lf "../WebotsLink.log" -title "WebotsLink@LocalhostTarget Component" -hold -e "export LD_LIBRARY_PATH=$SCRIPT_DIR:\$LD_LIBRARY_PATH; $SCRIPT_DIR/ComponentWebots -filename=$SCRIPT_DIR/WebotsLink.ini; echo; echo; echo 'WebotsLink exited.'; echo; /bin/bash --login" &
echo $! >> $PID_XTERM
echo ComponentWebots >> $PID_COMPONENT_NAMES
cd $SCRIPT_DIR
bash startstop-hooks-WebotsLink.sh post-start
echo -e "\n\n\n"



cd $SCRIPT_DIR

;; ## start


#########################################################################################
## stop
stop)
cd $SCRIPT_DIR
bash startstop-hooks-RobotOperator.sh pre-stop
bash startstop-hooks-Robotino.sh pre-stop
bash startstop-hooks-SJMan.sh pre-stop
bash startstop-hooks-SJNav.sh pre-stop
bash startstop-hooks-SafetyOfficer.sh pre-stop
bash startstop-hooks-WebotsLink.sh pre-stop

echo "kill all components..."

for I in `cat $PID_COMPONENT_NAMES`; do
        echo $I
        killall -2 $I
done
rm $PID_COMPONENT_NAMES

sleep 3

for I in `cat $PID_XTERM`; do
        echo $I
        kill -2 $I
done
rm $PID_XTERM



test -e SMART_NAMES && rm -f SMART_NAMES

bash startstop-hooks-RobotOperator.sh post-stop
bash startstop-hooks-Robotino.sh post-stop
bash startstop-hooks-SJMan.sh post-stop
bash startstop-hooks-SJNav.sh post-stop
bash startstop-hooks-SafetyOfficer.sh post-stop
bash startstop-hooks-WebotsLink.sh post-stop


# collect log files
ls -l *.log && (
	pwd
	tar czvf LocalhostTarget-logs-$(date +"%Y%m%d%H%M").tar.gz *.log
	rm *.log
)

;; ## stop



#########################################################################################
## menu

menu-start)
	bash $SCRIPT_NAME start
	cd $SCRIPT_DIR
	bash $SCRIPT_NAME menu
;;

menu-stop)
	bash $SCRIPT_NAME stop
	cd $SCRIPT_DIR
	bash $SCRIPT_NAME menu
;;

menu-tile)
	bash tiler.sh
	cd $SCRIPT_DIR
	bash $SCRIPT_NAME menu
;;

menu)

#wmctrl -r :ACTIVE: -b add,above
ACTION=$(whiptail --title "Scenario Control" --menu "Choose an option" 12 35 4 "menu-start" "Start Scenario" "menu-stop" "Stop Scenario" "menu-tile" "Arrange terminals" "quit" "Quit to console" 3>&1 1>&2 2>&3)
#whiptail --title "Scenario Control" --menu "Choose an option" 10 30 3 "menu-start" "Start Scenario" "menu-stop" "Stop Scenario" "quit" "Quit to console" 2>/tmp/whip
#ACTION=`cat /tmp/whip`

cd $SCRIPT_DIR
bash $SCRIPT_NAME $ACTION

;; ## menu

quit)
	bash $SCRIPT_NAME stop
;;
		
		
#########################################################################################
## default
*)
echo "No such parameter: $1"
echo "Usage: $SCRIPT_NAME {start|stop|menu-start|menu-stop|menu}"
exit 1
;;

esac
