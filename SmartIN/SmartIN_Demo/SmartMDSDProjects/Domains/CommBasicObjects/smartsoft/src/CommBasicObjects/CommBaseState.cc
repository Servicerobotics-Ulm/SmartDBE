//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------

#include "CommBasicObjects/CommBaseState.hh"

using namespace CommBasicObjects;

CommBaseState::CommBaseState()
:	CommBaseStateCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommBaseState::CommBaseState(const CommBasicObjects::CommTimeStamp &timeStamp, const CommBasicObjects::CommBasePose &basePose, const CommBasicObjects::CommBasePose &baseOdomPose, const CommBasicObjects::CommBaseVelocity &baseVelocity, const CommBasicObjects::CommBaseVelocity &baseOdomVelocity, const CommBasicObjects::CommBatteryLevel &batteryState)
:	CommBaseStateCore() // base constructor sets default values as defined in the model
{
	setTimeStamp(timeStamp);
	setBasePose(basePose);
	setBaseOdomPose(baseOdomPose);
	setBaseVelocity(baseVelocity);
	setBaseOdomVelocity(baseOdomVelocity);
	setBatteryState(batteryState);
}
 */

CommBaseState::CommBaseState(const CommBaseStateCore &commBaseState)
:	CommBaseStateCore(commBaseState)
{  }

CommBaseState::CommBaseState(const DATATYPE &commBaseState)
:	CommBaseStateCore(commBaseState)
{  }

CommBaseState::~CommBaseState()
{  }

//CommBaseState CommBaseState::extrapolate(const CommTimeStamp &ts) const
//{
//	CommBasicObjectsIDL::CommBaseState extrapolated_state;
//  extrapolated_state.time = ts;
//  extrapolated_state.base_velocity = idl_CommBaseState.base_velocity;
//  extrapolated_state.base_position.z = idl_CommBaseState.base_position.z;
//
//  const double dt = CommTimeStamp(idl_CommBaseState.time).seconds_before(ts);
//
//  extrapolated_state.base_position.a_base   = idl_CommBaseState.base_position.a_base   + dt * idl_CommBaseState.base_velocity.omega_base;
//  extrapolated_state.base_position.a_steer  = idl_CommBaseState.base_position.a_steer  + dt * idl_CommBaseState.base_velocity.omega_steer;
//  extrapolated_state.base_position.a_turret = idl_CommBaseState.base_position.a_turret + dt * idl_CommBaseState.base_velocity.omega_turret;
//
//  const double sin_steer = sin(idl_CommBaseState.base_position.a_steer);
//  const double cos_steer = cos(idl_CommBaseState.base_position.a_steer);
//
//  if(fabs(idl_CommBaseState.base_velocity.omega_steer)<1e-6)
//  {
//    // omega too small, assume only linear motion
//    const double dx = idl_CommBaseState.base_velocity.v * dt * cos_steer;
//    const double dy = idl_CommBaseState.base_velocity.v * dt * sin_steer;
//    extrapolated_state.base_position.x = idl_CommBaseState.base_position.x + dx;
//    extrapolated_state.base_position.y = idl_CommBaseState.base_position.y + dy;
//  }
//  else
//  {
//    // rotate the position by da radians around the center (cx,cy) of the circular motion
//    const double da = idl_CommBaseState.base_velocity.omega_steer * dt;
//    const double cos_da = cos(da);
//    const double sin_da = sin(da);
//    const double r = idl_CommBaseState.base_velocity.v / idl_CommBaseState.base_velocity.omega_steer;
//    const double cx = idl_CommBaseState.base_position.x - r * sin_steer;
//    const double cy = idl_CommBaseState.base_position.y + r * cos_steer;
//    const double xrel = idl_CommBaseState.base_position.x - cx;
//    const double yrel = idl_CommBaseState.base_position.y - cy;
//    extrapolated_state.base_position.x = cx + xrel * cos_da - yrel * sin_da;
//    extrapolated_state.base_position.y = cy + xrel * sin_da + yrel * cos_da;
//  }
//  return CommBaseState(extrapolated_state);
//}
