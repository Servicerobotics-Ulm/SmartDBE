//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMBASICOBJECTS_COMMDIGITALINPUTEVENTSTATE_CORE_H_
#define COMMBASICOBJECTS_COMMDIGITALINPUTEVENTSTATE_CORE_H_

#include "CommBasicObjects/CommDigitalInputEventStateData.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommBasicObjects {
	
class CommDigitalInputEventStateCore {
protected:
	// data structure
	CommBasicObjectsIDL::CommDigitalInputEventState idl_CommDigitalInputEventState;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommBasicObjectsIDL::CommDigitalInputEventState DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommDigitalInputEventStateCore();
	CommDigitalInputEventStateCore(const DATATYPE &data);
	// default destructor
	virtual ~CommDigitalInputEventStateCore();
	
	const DATATYPE& get() const { return idl_CommDigitalInputEventState; }
	operator const DATATYPE&() const { return idl_CommDigitalInputEventState; }
	DATATYPE& set() { return idl_CommDigitalInputEventState; }

	static inline std::string identifier(void) { return "CommBasicObjects::CommDigitalInputEventState"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element DigitalInputValues
	/**
	 * Getter methods for idl_CommDigitalInputEventState.digitalInputValues of type vector<bool>
	 */
	inline std::vector<bool>& getDigitalInputValuesRef() { return idl_CommDigitalInputEventState.digitalInputValues; }
	inline std::vector<bool> getDigitalInputValuesCopy() const {
		return std::vector<bool>(idl_CommDigitalInputEventState.digitalInputValues.begin(), idl_CommDigitalInputEventState.digitalInputValues.end());
	}
	inline bool getDigitalInputValuesElemAtPos(const size_t &pos) const { return idl_CommDigitalInputEventState.digitalInputValues[pos]; }
	inline size_t getDigitalInputValuesSize() const { return idl_CommDigitalInputEventState.digitalInputValues.size(); }
	inline bool isDigitalInputValuesEmpty() const { return idl_CommDigitalInputEventState.digitalInputValues.empty(); }
	/**
	 * Setter methods for idl_CommDigitalInputEventState.digitalInputValues of type vector<bool>
	 */
	inline CommDigitalInputEventStateCore& setDigitalInputValues(const std::vector<bool> &digitalInputValues) { idl_CommDigitalInputEventState.digitalInputValues = digitalInputValues; return *this; }
	inline bool setDigitalInputValuesElemAtPos(const size_t &pos, const bool &elem) {
		if(pos < idl_CommDigitalInputEventState.digitalInputValues.size()) {
			idl_CommDigitalInputEventState.digitalInputValues[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertDigitalInputValuesVectorAtPos(const size_t &pos, const std::vector<bool> &data) {
		if(pos < idl_CommDigitalInputEventState.digitalInputValues.size()) {
			idl_CommDigitalInputEventState.digitalInputValues.insert(idl_CommDigitalInputEventState.digitalInputValues.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeDigitalInputValues(const size_t &size) { idl_CommDigitalInputEventState.digitalInputValues.resize(size); }
	inline bool eraseDigitalInputValuesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommDigitalInputEventState.digitalInputValues.size() ) {
			idl_CommDigitalInputEventState.digitalInputValues.erase(idl_CommDigitalInputEventState.digitalInputValues.begin()+pos, idl_CommDigitalInputEventState.digitalInputValues.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearDigitalInputValues() { idl_CommDigitalInputEventState.digitalInputValues.clear(); }
};

} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMDIGITALINPUTEVENTSTATE_CORE_H_ */
