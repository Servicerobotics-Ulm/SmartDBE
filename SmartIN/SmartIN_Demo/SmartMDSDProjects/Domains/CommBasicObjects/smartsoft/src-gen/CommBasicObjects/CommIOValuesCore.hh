//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMBASICOBJECTS_COMMIOVALUES_CORE_H_
#define COMMBASICOBJECTS_COMMIOVALUES_CORE_H_

#include "CommBasicObjects/CommIOValuesData.hh"
#include "CommBasicObjects/CommAnalogOutputRequest.hh"
#include "CommBasicObjects/CommDigitalOutputRequest.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommBasicObjects {
	
class CommIOValuesCore {
protected:
	// data structure
	CommBasicObjectsIDL::CommIOValues idl_CommIOValues;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommBasicObjectsIDL::CommIOValues DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommIOValuesCore();
	CommIOValuesCore(const DATATYPE &data);
	// default destructor
	virtual ~CommIOValuesCore();
	
	const DATATYPE& get() const { return idl_CommIOValues; }
	operator const DATATYPE&() const { return idl_CommIOValues; }
	DATATYPE& set() { return idl_CommIOValues; }

	static inline std::string identifier(void) { return "CommBasicObjects::CommIOValues"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element AnalogInputValues
	/**
	 * Getter methods for idl_CommIOValues.analogInputValues of type vector<float>
	 */
	inline std::vector<float>& getAnalogInputValuesRef() { return idl_CommIOValues.analogInputValues; }
	inline std::vector<float> getAnalogInputValuesCopy() const {
		return std::vector<float>(idl_CommIOValues.analogInputValues.begin(), idl_CommIOValues.analogInputValues.end());
	}
	inline float getAnalogInputValuesElemAtPos(const size_t &pos) const { return idl_CommIOValues.analogInputValues[pos]; }
	inline size_t getAnalogInputValuesSize() const { return idl_CommIOValues.analogInputValues.size(); }
	inline bool isAnalogInputValuesEmpty() const { return idl_CommIOValues.analogInputValues.empty(); }
	/**
	 * Setter methods for idl_CommIOValues.analogInputValues of type vector<float>
	 */
	inline CommIOValuesCore& setAnalogInputValues(const std::vector<float> &analogInputValues) { idl_CommIOValues.analogInputValues = analogInputValues; return *this; }
	inline bool setAnalogInputValuesElemAtPos(const size_t &pos, const float &elem) {
		if(pos < idl_CommIOValues.analogInputValues.size()) {
			idl_CommIOValues.analogInputValues[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertAnalogInputValuesVectorAtPos(const size_t &pos, const std::vector<float> &data) {
		if(pos < idl_CommIOValues.analogInputValues.size()) {
			idl_CommIOValues.analogInputValues.insert(idl_CommIOValues.analogInputValues.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeAnalogInputValues(const size_t &size) { idl_CommIOValues.analogInputValues.resize(size); }
	inline bool eraseAnalogInputValuesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommIOValues.analogInputValues.size() ) {
			idl_CommIOValues.analogInputValues.erase(idl_CommIOValues.analogInputValues.begin()+pos, idl_CommIOValues.analogInputValues.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearAnalogInputValues() { idl_CommIOValues.analogInputValues.clear(); }
	
	// getter and setter for element DigitalInputValues
	/**
	 * Getter methods for idl_CommIOValues.digitalInputValues of type vector<bool>
	 */
	inline std::vector<bool>& getDigitalInputValuesRef() { return idl_CommIOValues.digitalInputValues; }
	inline std::vector<bool> getDigitalInputValuesCopy() const {
		return std::vector<bool>(idl_CommIOValues.digitalInputValues.begin(), idl_CommIOValues.digitalInputValues.end());
	}
	inline bool getDigitalInputValuesElemAtPos(const size_t &pos) const { return idl_CommIOValues.digitalInputValues[pos]; }
	inline size_t getDigitalInputValuesSize() const { return idl_CommIOValues.digitalInputValues.size(); }
	inline bool isDigitalInputValuesEmpty() const { return idl_CommIOValues.digitalInputValues.empty(); }
	/**
	 * Setter methods for idl_CommIOValues.digitalInputValues of type vector<bool>
	 */
	inline CommIOValuesCore& setDigitalInputValues(const std::vector<bool> &digitalInputValues) { idl_CommIOValues.digitalInputValues = digitalInputValues; return *this; }
	inline bool setDigitalInputValuesElemAtPos(const size_t &pos, const bool &elem) {
		if(pos < idl_CommIOValues.digitalInputValues.size()) {
			idl_CommIOValues.digitalInputValues[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertDigitalInputValuesVectorAtPos(const size_t &pos, const std::vector<bool> &data) {
		if(pos < idl_CommIOValues.digitalInputValues.size()) {
			idl_CommIOValues.digitalInputValues.insert(idl_CommIOValues.digitalInputValues.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeDigitalInputValues(const size_t &size) { idl_CommIOValues.digitalInputValues.resize(size); }
	inline bool eraseDigitalInputValuesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommIOValues.digitalInputValues.size() ) {
			idl_CommIOValues.digitalInputValues.erase(idl_CommIOValues.digitalInputValues.begin()+pos, idl_CommIOValues.digitalInputValues.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearDigitalInputValues() { idl_CommIOValues.digitalInputValues.clear(); }
	
	// getter and setter for element AnalogOutputValues
	/**
	 * Getter methods for element idl_CommIOValues.analogOutputValues of type vector<CommBasicObjects::CommAnalogOutputRequest>
	 */
	inline std::vector<CommBasicObjects::CommAnalogOutputRequest> getAnalogOutputValuesCopy() const { 
		return std::vector<CommBasicObjects::CommAnalogOutputRequest>(idl_CommIOValues.analogOutputValues.begin(), idl_CommIOValues.analogOutputValues.end());
	}
	inline CommBasicObjects::CommAnalogOutputRequest getAnalogOutputValuesElemAtPos(const size_t &pos) const {
		return CommBasicObjects::CommAnalogOutputRequest(idl_CommIOValues.analogOutputValues[pos]);
	}
	inline size_t getAnalogOutputValuesSize() const { return idl_CommIOValues.analogOutputValues.size(); }
	inline bool isAnalogOutputValuesEmpty() const { return idl_CommIOValues.analogOutputValues.empty(); }
	/**
	 * Setter methods for idl_CommIOValues.analogOutputValues of type vector<CommBasicObjects::CommAnalogOutputRequest>
	 */
	inline CommIOValuesCore& setAnalogOutputValues(const std::vector<CommBasicObjects::CommAnalogOutputRequest> &analogOutputValues) { 
		idl_CommIOValues.analogOutputValues.assign(analogOutputValues.begin(), analogOutputValues.end());
		return *this;
	}
	inline bool setAnalogOutputValuesElemAtPos(const size_t &pos, const CommBasicObjects::CommAnalogOutputRequest &elem) {
		if(pos < idl_CommIOValues.analogOutputValues.size()) {
			idl_CommIOValues.analogOutputValues[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertAnalogOutputValuesVectorAtPos(const size_t &pos, const std::vector<CommBasicObjects::CommAnalogOutputRequest> &data) {
		if(pos < idl_CommIOValues.analogOutputValues.size()) {
			idl_CommIOValues.analogOutputValues.insert(idl_CommIOValues.analogOutputValues.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeAnalogOutputValues(const size_t &size) { idl_CommIOValues.analogOutputValues.resize(size); }
	inline bool eraseAnalogOutputValuesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommIOValues.analogOutputValues.size() ) {
			idl_CommIOValues.analogOutputValues.erase(idl_CommIOValues.analogOutputValues.begin()+pos, idl_CommIOValues.analogOutputValues.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearAnalogOutputValues() { idl_CommIOValues.analogOutputValues.clear(); }
	
	// getter and setter for element DigitalOutputValues
	/**
	 * Getter methods for element idl_CommIOValues.digitalOutputValues of type vector<CommBasicObjects::CommDigitalOutputRequest>
	 */
	inline std::vector<CommBasicObjects::CommDigitalOutputRequest> getDigitalOutputValuesCopy() const { 
		return std::vector<CommBasicObjects::CommDigitalOutputRequest>(idl_CommIOValues.digitalOutputValues.begin(), idl_CommIOValues.digitalOutputValues.end());
	}
	inline CommBasicObjects::CommDigitalOutputRequest getDigitalOutputValuesElemAtPos(const size_t &pos) const {
		return CommBasicObjects::CommDigitalOutputRequest(idl_CommIOValues.digitalOutputValues[pos]);
	}
	inline size_t getDigitalOutputValuesSize() const { return idl_CommIOValues.digitalOutputValues.size(); }
	inline bool isDigitalOutputValuesEmpty() const { return idl_CommIOValues.digitalOutputValues.empty(); }
	/**
	 * Setter methods for idl_CommIOValues.digitalOutputValues of type vector<CommBasicObjects::CommDigitalOutputRequest>
	 */
	inline CommIOValuesCore& setDigitalOutputValues(const std::vector<CommBasicObjects::CommDigitalOutputRequest> &digitalOutputValues) { 
		idl_CommIOValues.digitalOutputValues.assign(digitalOutputValues.begin(), digitalOutputValues.end());
		return *this;
	}
	inline bool setDigitalOutputValuesElemAtPos(const size_t &pos, const CommBasicObjects::CommDigitalOutputRequest &elem) {
		if(pos < idl_CommIOValues.digitalOutputValues.size()) {
			idl_CommIOValues.digitalOutputValues[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertDigitalOutputValuesVectorAtPos(const size_t &pos, const std::vector<CommBasicObjects::CommDigitalOutputRequest> &data) {
		if(pos < idl_CommIOValues.digitalOutputValues.size()) {
			idl_CommIOValues.digitalOutputValues.insert(idl_CommIOValues.digitalOutputValues.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeDigitalOutputValues(const size_t &size) { idl_CommIOValues.digitalOutputValues.resize(size); }
	inline bool eraseDigitalOutputValuesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommIOValues.digitalOutputValues.size() ) {
			idl_CommIOValues.digitalOutputValues.erase(idl_CommIOValues.digitalOutputValues.begin()+pos, idl_CommIOValues.digitalOutputValues.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearDigitalOutputValues() { idl_CommIOValues.digitalOutputValues.clear(); }
};

} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMIOVALUES_CORE_H_ */
