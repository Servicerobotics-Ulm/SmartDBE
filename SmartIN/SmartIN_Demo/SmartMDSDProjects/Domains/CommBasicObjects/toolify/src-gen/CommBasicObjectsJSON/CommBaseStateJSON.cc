//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommBaseStateJSON.hh"

#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"
#include "CommBasicObjectsJSON/CommBasePoseJSON.hh"
#include "CommBasicObjectsJSON/CommBasePoseJSON.hh"
#include "CommBasicObjectsJSON/CommBaseVelocityJSON.hh"
#include "CommBasicObjectsJSON/CommBaseVelocityJSON.hh"
#include "CommBasicObjectsJSON/CommBatteryLevelJSON.hh"
#include "CommBasicObjectsJSON/CommBumperStateJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommBaseState& obj, nlohmann::json& j)
{
	// timeStamp: CommTimeStamp
	to_json(obj.timeStamp, j["timeStamp"]);
	// basePose: CommBasePose
	to_json(obj.basePose, j["basePose"]);
	// baseOdomPose: CommBasePose
	to_json(obj.baseOdomPose, j["baseOdomPose"]);
	// baseVelocity: CommBaseVelocity
	to_json(obj.baseVelocity, j["baseVelocity"]);
	// baseOdomVelocity: CommBaseVelocity
	to_json(obj.baseOdomVelocity, j["baseOdomVelocity"]);
	// batteryState: CommBatteryLevel
	to_json(obj.batteryState, j["batteryState"]);
	// baseBumperState: CommBumperState
	to_json(obj.baseBumperState, j["baseBumperState"]);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommBaseState& obj)
{
	// timeStamp: CommTimeStamp
	if(j.contains("timeStamp") && j["timeStamp"].is_object()) {
		//from_json(j["timeStamp"], obj.timeStamp);
		obj.timeStamp = j["timeStamp"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
	// basePose: CommBasePose
	if(j.contains("basePose") && j["basePose"].is_object()) {
		//from_json(j["basePose"], obj.basePose);
		obj.basePose = j["basePose"].get<CommBasicObjectsIDL::CommBasePose>();
	}
	// baseOdomPose: CommBasePose
	if(j.contains("baseOdomPose") && j["baseOdomPose"].is_object()) {
		//from_json(j["baseOdomPose"], obj.baseOdomPose);
		obj.baseOdomPose = j["baseOdomPose"].get<CommBasicObjectsIDL::CommBasePose>();
	}
	// baseVelocity: CommBaseVelocity
	if(j.contains("baseVelocity") && j["baseVelocity"].is_object()) {
		//from_json(j["baseVelocity"], obj.baseVelocity);
		obj.baseVelocity = j["baseVelocity"].get<CommBasicObjectsIDL::CommBaseVelocity>();
	}
	// baseOdomVelocity: CommBaseVelocity
	if(j.contains("baseOdomVelocity") && j["baseOdomVelocity"].is_object()) {
		//from_json(j["baseOdomVelocity"], obj.baseOdomVelocity);
		obj.baseOdomVelocity = j["baseOdomVelocity"].get<CommBasicObjectsIDL::CommBaseVelocity>();
	}
	// batteryState: CommBatteryLevel
	if(j.contains("batteryState") && j["batteryState"].is_object()) {
		//from_json(j["batteryState"], obj.batteryState);
		obj.batteryState = j["batteryState"].get<CommBasicObjectsIDL::CommBatteryLevel>();
	}
	// baseBumperState: CommBumperState
	if(j.contains("baseBumperState") && j["baseBumperState"].is_object()) {
		//from_json(j["baseBumperState"], obj.baseBumperState);
		obj.baseBumperState = j["baseBumperState"].get<CommBasicObjectsIDL::CommBumperState>();
	}
}

} // end namespace CommBasicObjectsIDL
