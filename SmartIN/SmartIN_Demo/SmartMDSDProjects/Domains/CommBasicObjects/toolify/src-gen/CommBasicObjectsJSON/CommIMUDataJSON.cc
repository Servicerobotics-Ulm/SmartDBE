//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommIMUDataJSON.hh"


namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommIMUData& obj, nlohmann::json& j)
{
	// timestamp: UInt16
	j["timestamp"] = obj.timestamp;
	// temperature: Double
	j["temperature"] = obj.temperature;
	// accelerometer_x: Double
	j["accelerometer_x"] = obj.accelerometer_x;
	// accelerometer_y: Double
	j["accelerometer_y"] = obj.accelerometer_y;
	// accelerometer_z: Double
	j["accelerometer_z"] = obj.accelerometer_z;
	// gyroscope_x: Double
	j["gyroscope_x"] = obj.gyroscope_x;
	// gyroscope_y: Double
	j["gyroscope_y"] = obj.gyroscope_y;
	// gyroscope_z: Double
	j["gyroscope_z"] = obj.gyroscope_z;
	// magnetometer_x: Double
	j["magnetometer_x"] = obj.magnetometer_x;
	// magnetometer_y: Double
	j["magnetometer_y"] = obj.magnetometer_y;
	// magnetometer_z: Double
	j["magnetometer_z"] = obj.magnetometer_z;
	// roll: Double
	j["roll"] = obj.roll;
	// pitch: Double
	j["pitch"] = obj.pitch;
	// yaw: Double
	j["yaw"] = obj.yaw;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommIMUData& obj)
{
	// timestamp: UInt16
	if(j.contains("timestamp") && j["timestamp"].is_number_unsigned()) {
		obj.timestamp = j["timestamp"].get<unsigned short>();
	}
	// temperature: Double
	if(j.contains("temperature") && j["temperature"].is_number_float()) {
		obj.temperature = j["temperature"].get<double>();
	}
	// accelerometer_x: Double
	if(j.contains("accelerometer_x") && j["accelerometer_x"].is_number_float()) {
		obj.accelerometer_x = j["accelerometer_x"].get<double>();
	}
	// accelerometer_y: Double
	if(j.contains("accelerometer_y") && j["accelerometer_y"].is_number_float()) {
		obj.accelerometer_y = j["accelerometer_y"].get<double>();
	}
	// accelerometer_z: Double
	if(j.contains("accelerometer_z") && j["accelerometer_z"].is_number_float()) {
		obj.accelerometer_z = j["accelerometer_z"].get<double>();
	}
	// gyroscope_x: Double
	if(j.contains("gyroscope_x") && j["gyroscope_x"].is_number_float()) {
		obj.gyroscope_x = j["gyroscope_x"].get<double>();
	}
	// gyroscope_y: Double
	if(j.contains("gyroscope_y") && j["gyroscope_y"].is_number_float()) {
		obj.gyroscope_y = j["gyroscope_y"].get<double>();
	}
	// gyroscope_z: Double
	if(j.contains("gyroscope_z") && j["gyroscope_z"].is_number_float()) {
		obj.gyroscope_z = j["gyroscope_z"].get<double>();
	}
	// magnetometer_x: Double
	if(j.contains("magnetometer_x") && j["magnetometer_x"].is_number_float()) {
		obj.magnetometer_x = j["magnetometer_x"].get<double>();
	}
	// magnetometer_y: Double
	if(j.contains("magnetometer_y") && j["magnetometer_y"].is_number_float()) {
		obj.magnetometer_y = j["magnetometer_y"].get<double>();
	}
	// magnetometer_z: Double
	if(j.contains("magnetometer_z") && j["magnetometer_z"].is_number_float()) {
		obj.magnetometer_z = j["magnetometer_z"].get<double>();
	}
	// roll: Double
	if(j.contains("roll") && j["roll"].is_number_float()) {
		obj.roll = j["roll"].get<double>();
	}
	// pitch: Double
	if(j.contains("pitch") && j["pitch"].is_number_float()) {
		obj.pitch = j["pitch"].get<double>();
	}
	// yaw: Double
	if(j.contains("yaw") && j["yaw"].is_number_float()) {
		obj.yaw = j["yaw"].get<double>();
	}
}

} // end namespace CommBasicObjectsIDL
