//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommBasePoseJSON.hh"

#include "CommBasicObjectsJSON/CommPose3dJSON.hh"
#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommBasePose& obj, nlohmann::json& j)
{
	// covInvalid: Boolean
	j["covInvalid"] = obj.covInvalid;
	// covMatrix: Double[]
	j["covMatrix"] = obj.covMatrix;
	// updateCount: UInt32
	j["updateCount"] = obj.updateCount;
	// pose3D: CommPose3d
	to_json(obj.pose3D, j["pose3D"]);
	// timeStamp: CommTimeStamp
	to_json(obj.timeStamp, j["timeStamp"]);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommBasePose& obj)
{
	// covInvalid: Boolean
	if(j.contains("covInvalid") && j["covInvalid"].is_boolean()) {
		obj.covInvalid = j["covInvalid"].get<bool>();
	}
	// covMatrix: Double[]
	if(j.contains("covMatrix") && j["covMatrix"].is_array()) {
		obj.covMatrix = j["covMatrix"].get<std::vector<double>>();
	}
	// updateCount: UInt32
	if(j.contains("updateCount") && j["updateCount"].is_number_unsigned()) {
		obj.updateCount = j["updateCount"].get<unsigned int>();
	}
	// pose3D: CommPose3d
	if(j.contains("pose3D") && j["pose3D"].is_object()) {
		//from_json(j["pose3D"], obj.pose3D);
		obj.pose3D = j["pose3D"].get<CommBasicObjectsIDL::CommPose3d>();
	}
	// timeStamp: CommTimeStamp
	if(j.contains("timeStamp") && j["timeStamp"].is_object()) {
		//from_json(j["timeStamp"], obj.timeStamp);
		obj.timeStamp = j["timeStamp"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
}

} // end namespace CommBasicObjectsIDL
