//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommDevicePoseStateJSON.hh"

#include "CommBasicObjectsJSON/CommBaseStateJSON.hh"
#include "CommBasicObjectsJSON/CommPose3dJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommDevicePoseState& obj, nlohmann::json& j)
{
	// stateBase: CommBaseState
	to_json(obj.stateBase, j["stateBase"]);
	// devicePose: CommPose3d
	to_json(obj.devicePose, j["devicePose"]);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommDevicePoseState& obj)
{
	// stateBase: CommBaseState
	if(j.contains("stateBase") && j["stateBase"].is_object()) {
		//from_json(j["stateBase"], obj.stateBase);
		obj.stateBase = j["stateBase"].get<CommBasicObjectsIDL::CommBaseState>();
	}
	// devicePose: CommPose3d
	if(j.contains("devicePose") && j["devicePose"].is_object()) {
		//from_json(j["devicePose"], obj.devicePose);
		obj.devicePose = j["devicePose"].get<CommBasicObjectsIDL::CommPose3d>();
	}
}

} // end namespace CommBasicObjectsIDL
