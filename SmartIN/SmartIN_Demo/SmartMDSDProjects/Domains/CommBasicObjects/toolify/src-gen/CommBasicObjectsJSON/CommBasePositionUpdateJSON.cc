//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommBasePositionUpdateJSON.hh"

#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"
#include "CommBasicObjectsJSON/CommBasePoseJSON.hh"
#include "CommBasicObjectsJSON/CommBasePoseJSON.hh"
#include "CommBasicObjectsJSON/CommBaseVelocityJSON.hh"
#include "CommBasicObjectsJSON/CommBaseVelocityJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommBasePositionUpdate& obj, nlohmann::json& j)
{
	// timeStamp: CommTimeStamp
	to_json(obj.timeStamp, j["timeStamp"]);
	// pose: CommBasePose
	to_json(obj.pose, j["pose"]);
	// correctedPose: CommBasePose
	to_json(obj.correctedPose, j["correctedPose"]);
	// velocity: CommBaseVelocity
	to_json(obj.velocity, j["velocity"]);
	// correctedVelocity: CommBaseVelocity
	to_json(obj.correctedVelocity, j["correctedVelocity"]);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommBasePositionUpdate& obj)
{
	// timeStamp: CommTimeStamp
	if(j.contains("timeStamp") && j["timeStamp"].is_object()) {
		//from_json(j["timeStamp"], obj.timeStamp);
		obj.timeStamp = j["timeStamp"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
	// pose: CommBasePose
	if(j.contains("pose") && j["pose"].is_object()) {
		//from_json(j["pose"], obj.pose);
		obj.pose = j["pose"].get<CommBasicObjectsIDL::CommBasePose>();
	}
	// correctedPose: CommBasePose
	if(j.contains("correctedPose") && j["correctedPose"].is_object()) {
		//from_json(j["correctedPose"], obj.correctedPose);
		obj.correctedPose = j["correctedPose"].get<CommBasicObjectsIDL::CommBasePose>();
	}
	// velocity: CommBaseVelocity
	if(j.contains("velocity") && j["velocity"].is_object()) {
		//from_json(j["velocity"], obj.velocity);
		obj.velocity = j["velocity"].get<CommBasicObjectsIDL::CommBaseVelocity>();
	}
	// correctedVelocity: CommBaseVelocity
	if(j.contains("correctedVelocity") && j["correctedVelocity"].is_object()) {
		//from_json(j["correctedVelocity"], obj.correctedVelocity);
		obj.correctedVelocity = j["correctedVelocity"].get<CommBasicObjectsIDL::CommBaseVelocity>();
	}
}

} // end namespace CommBasicObjectsIDL
