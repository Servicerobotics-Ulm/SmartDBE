//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommLaserScanJSON.hh"

#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"
#include "CommBasicObjectsJSON/LaserScanPointJSON.hh"

namespace CommBasicObjectsIDL {

void to_json(const CommBasicObjectsIDL::CommLaserScan& obj, nlohmann::json& j)
{
	// is_valid: Boolean
	j["is_valid"] = obj.is_valid;
	// time: CommTimeStamp
	to_json(obj.time, j["time"]);
	// update_count: UInt64
	j["update_count"] = obj.update_count;
	// start_angle: Double
	j["start_angle"] = obj.start_angle;
	// resolution: Double
	j["resolution"] = obj.resolution;
	// distance_min: UInt16
	j["distance_min"] = obj.distance_min;
	// distance_max: UInt16
	j["distance_max"] = obj.distance_max;
	// length_unit: UInt16
	j["length_unit"] = obj.length_unit;
	// scan_points: LaserScanPoint[]
	for(size_t idx=0; idx < obj.scan_points.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.scan_points.at(idx), array_element);
		j["scan_points"].emplace_back(array_element);
	}
	// max_scan_points: UInt16
	j["max_scan_points"] = obj.max_scan_points;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommBasicObjectsIDL::CommLaserScan& obj)
{
	// is_valid: Boolean
	if(j.contains("is_valid") && j["is_valid"].is_boolean()) {
		obj.is_valid = j["is_valid"].get<bool>();
	}
	// time: CommTimeStamp
	if(j.contains("time") && j["time"].is_object()) {
		//from_json(j["time"], obj.time);
		obj.time = j["time"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
	// update_count: UInt64
	if(j.contains("update_count") && j["update_count"].is_number_unsigned()) {
		obj.update_count = j["update_count"].get<unsigned long>();
	}
	// start_angle: Double
	if(j.contains("start_angle") && j["start_angle"].is_number_float()) {
		obj.start_angle = j["start_angle"].get<double>();
	}
	// resolution: Double
	if(j.contains("resolution") && j["resolution"].is_number_float()) {
		obj.resolution = j["resolution"].get<double>();
	}
	// distance_min: UInt16
	if(j.contains("distance_min") && j["distance_min"].is_number_unsigned()) {
		obj.distance_min = j["distance_min"].get<unsigned short>();
	}
	// distance_max: UInt16
	if(j.contains("distance_max") && j["distance_max"].is_number_unsigned()) {
		obj.distance_max = j["distance_max"].get<unsigned short>();
	}
	// length_unit: UInt16
	if(j.contains("length_unit") && j["length_unit"].is_number_unsigned()) {
		obj.length_unit = j["length_unit"].get<unsigned short>();
	}
	// scan_points: LaserScanPoint[]
	if(j.contains("scan_points") && j["scan_points"].is_array()) {
		auto jscan_points = j["scan_points"];
		obj.scan_points.resize(jscan_points.size());
		for(size_t idx=0; idx < jscan_points.size(); idx++) {
			// convert the json array values individually
			if(jscan_points.at(idx).is_object()) {
				// from_json(jscan_points.at(idx), obj.scan_points.at(idx));
				obj.scan_points[idx] = jscan_points[idx].get<CommBasicObjectsIDL::LaserScanPoint>();
			}
		}
	}
	// max_scan_points: UInt16
	if(j.contains("max_scan_points") && j["max_scan_points"].is_number_unsigned()) {
		obj.max_scan_points = j["max_scan_points"].get<unsigned short>();
	}
}

} // end namespace CommBasicObjectsIDL
