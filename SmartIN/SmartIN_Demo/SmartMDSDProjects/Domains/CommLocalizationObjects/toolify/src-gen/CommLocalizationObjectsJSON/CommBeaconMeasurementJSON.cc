//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommBeaconMeasurementJSON.hh"

#include "CommBasicObjectsJSON/CommTimeStampJSON.hh"

namespace CommLocalizationObjectsIDL {

void to_json(const CommLocalizationObjectsIDL::CommBeaconMeasurement& obj, nlohmann::json& j)
{
	// timeStamp: CommTimeStamp
	to_json(obj.timeStamp, j["timeStamp"]);
	// uuid: String
	j["uuid"] = obj.uuid;
	// major: Int32
	j["major"] = obj.major;
	// minor: Int32
	j["minor"] = obj.minor;
	// rssi: Float
	j["rssi"] = obj.rssi;
	// txPower: Float
	j["txPower"] = obj.txPower;
	// distance: Float
	j["distance"] = obj.distance;
	// distanceIsValid: Boolean
	j["distanceIsValid"] = obj.distanceIsValid;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommLocalizationObjectsIDL::CommBeaconMeasurement& obj)
{
	// timeStamp: CommTimeStamp
	if(j.contains("timeStamp") && j["timeStamp"].is_object()) {
		//from_json(j["timeStamp"], obj.timeStamp);
		obj.timeStamp = j["timeStamp"].get<CommBasicObjectsIDL::CommTimeStamp>();
	}
	// uuid: String
	if(j.contains("uuid") && j["uuid"].is_string()) {
		obj.uuid = j["uuid"].get<std::string>();
	}
	// major: Int32
	if(j.contains("major") && j["major"].is_number_integer()) {
		obj.major = j["major"].get<int>();
	}
	// minor: Int32
	if(j.contains("minor") && j["minor"].is_number_integer()) {
		obj.minor = j["minor"].get<int>();
	}
	// rssi: Float
	if(j.contains("rssi") && j["rssi"].is_number_float()) {
		obj.rssi = j["rssi"].get<float>();
	}
	// txPower: Float
	if(j.contains("txPower") && j["txPower"].is_number_float()) {
		obj.txPower = j["txPower"].get<float>();
	}
	// distance: Float
	if(j.contains("distance") && j["distance"].is_number_float()) {
		obj.distance = j["distance"].get<float>();
	}
	// distanceIsValid: Boolean
	if(j.contains("distanceIsValid") && j["distanceIsValid"].is_boolean()) {
		obj.distanceIsValid = j["distanceIsValid"].get<bool>();
	}
}

} // end namespace CommLocalizationObjectsIDL
