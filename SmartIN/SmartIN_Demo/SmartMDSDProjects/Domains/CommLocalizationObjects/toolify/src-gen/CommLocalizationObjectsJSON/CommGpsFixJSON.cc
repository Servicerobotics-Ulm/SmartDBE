//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommGpsFixJSON.hh"


namespace CommLocalizationObjectsIDL {

void to_json(const CommLocalizationObjectsIDL::CommGpsFix& obj, nlohmann::json& j)
{
	// gps_timestamp: Double
	j["gps_timestamp"] = obj.gps_timestamp;
	// is_2D: Boolean
	j["is_2D"] = obj.is_2D;
	// is_3D: Boolean
	j["is_3D"] = obj.is_3D;
	// satellites_visible: Int32
	j["satellites_visible"] = obj.satellites_visible;
	// satellites_used: Int32
	j["satellites_used"] = obj.satellites_used;
	// latitude: Double
	j["latitude"] = obj.latitude;
	// longitude: Double
	j["longitude"] = obj.longitude;
	// altitude: Double
	j["altitude"] = obj.altitude;
	// speed: Double
	j["speed"] = obj.speed;
	// climb: Double
	j["climb"] = obj.climb;
	// latitude_uncertainty: Double
	j["latitude_uncertainty"] = obj.latitude_uncertainty;
	// longitude_uncertainty: Double
	j["longitude_uncertainty"] = obj.longitude_uncertainty;
	// altitude_uncertainty: Double
	j["altitude_uncertainty"] = obj.altitude_uncertainty;
	// speed_uncertainty: Double
	j["speed_uncertainty"] = obj.speed_uncertainty;
	// climb_uncertainty: Double
	j["climb_uncertainty"] = obj.climb_uncertainty;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommLocalizationObjectsIDL::CommGpsFix& obj)
{
	// gps_timestamp: Double
	if(j.contains("gps_timestamp") && j["gps_timestamp"].is_number_float()) {
		obj.gps_timestamp = j["gps_timestamp"].get<double>();
	}
	// is_2D: Boolean
	if(j.contains("is_2D") && j["is_2D"].is_boolean()) {
		obj.is_2D = j["is_2D"].get<bool>();
	}
	// is_3D: Boolean
	if(j.contains("is_3D") && j["is_3D"].is_boolean()) {
		obj.is_3D = j["is_3D"].get<bool>();
	}
	// satellites_visible: Int32
	if(j.contains("satellites_visible") && j["satellites_visible"].is_number_integer()) {
		obj.satellites_visible = j["satellites_visible"].get<int>();
	}
	// satellites_used: Int32
	if(j.contains("satellites_used") && j["satellites_used"].is_number_integer()) {
		obj.satellites_used = j["satellites_used"].get<int>();
	}
	// latitude: Double
	if(j.contains("latitude") && j["latitude"].is_number_float()) {
		obj.latitude = j["latitude"].get<double>();
	}
	// longitude: Double
	if(j.contains("longitude") && j["longitude"].is_number_float()) {
		obj.longitude = j["longitude"].get<double>();
	}
	// altitude: Double
	if(j.contains("altitude") && j["altitude"].is_number_float()) {
		obj.altitude = j["altitude"].get<double>();
	}
	// speed: Double
	if(j.contains("speed") && j["speed"].is_number_float()) {
		obj.speed = j["speed"].get<double>();
	}
	// climb: Double
	if(j.contains("climb") && j["climb"].is_number_float()) {
		obj.climb = j["climb"].get<double>();
	}
	// latitude_uncertainty: Double
	if(j.contains("latitude_uncertainty") && j["latitude_uncertainty"].is_number_float()) {
		obj.latitude_uncertainty = j["latitude_uncertainty"].get<double>();
	}
	// longitude_uncertainty: Double
	if(j.contains("longitude_uncertainty") && j["longitude_uncertainty"].is_number_float()) {
		obj.longitude_uncertainty = j["longitude_uncertainty"].get<double>();
	}
	// altitude_uncertainty: Double
	if(j.contains("altitude_uncertainty") && j["altitude_uncertainty"].is_number_float()) {
		obj.altitude_uncertainty = j["altitude_uncertainty"].get<double>();
	}
	// speed_uncertainty: Double
	if(j.contains("speed_uncertainty") && j["speed_uncertainty"].is_number_float()) {
		obj.speed_uncertainty = j["speed_uncertainty"].get<double>();
	}
	// climb_uncertainty: Double
	if(j.contains("climb_uncertainty") && j["climb_uncertainty"].is_number_float()) {
		obj.climb_uncertainty = j["climb_uncertainty"].get<double>();
	}
}

} // end namespace CommLocalizationObjectsIDL
