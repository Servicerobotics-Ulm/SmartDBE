//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommAmclVisualizationInfoJSON.hh"

#include "CommLocalizationObjectsJSON/CommAmclParticleJSON.hh"
#include "CommLocalizationObjectsJSON/CommAmclHypothesisJSON.hh"

namespace CommLocalizationObjectsIDL {

void to_json(const CommLocalizationObjectsIDL::CommAmclVisualizationInfo& obj, nlohmann::json& j)
{
	// particles: CommAmclParticle[]
	for(size_t idx=0; idx < obj.particles.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.particles.at(idx), array_element);
		j["particles"].emplace_back(array_element);
	}
	// hypotheses: CommAmclHypothesis[]
	for(size_t idx=0; idx < obj.hypotheses.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.hypotheses.at(idx), array_element);
		j["hypotheses"].emplace_back(array_element);
	}
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommLocalizationObjectsIDL::CommAmclVisualizationInfo& obj)
{
	// particles: CommAmclParticle[]
	if(j.contains("particles") && j["particles"].is_array()) {
		auto jparticles = j["particles"];
		obj.particles.resize(jparticles.size());
		for(size_t idx=0; idx < jparticles.size(); idx++) {
			// convert the json array values individually
			if(jparticles.at(idx).is_object()) {
				// from_json(jparticles.at(idx), obj.particles.at(idx));
				obj.particles[idx] = jparticles[idx].get<CommLocalizationObjectsIDL::CommAmclParticle>();
			}
		}
	}
	// hypotheses: CommAmclHypothesis[]
	if(j.contains("hypotheses") && j["hypotheses"].is_array()) {
		auto jhypotheses = j["hypotheses"];
		obj.hypotheses.resize(jhypotheses.size());
		for(size_t idx=0; idx < jhypotheses.size(); idx++) {
			// convert the json array values individually
			if(jhypotheses.at(idx).is_object()) {
				// from_json(jhypotheses.at(idx), obj.hypotheses.at(idx));
				obj.hypotheses[idx] = jhypotheses[idx].get<CommLocalizationObjectsIDL::CommAmclHypothesis>();
			}
		}
	}
}

} // end namespace CommLocalizationObjectsIDL
