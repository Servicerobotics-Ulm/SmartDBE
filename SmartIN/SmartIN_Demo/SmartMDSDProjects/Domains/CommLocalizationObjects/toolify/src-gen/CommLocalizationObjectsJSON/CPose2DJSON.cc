//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CPose2DJSON.hh"


namespace CommLocalizationObjectsIDL {

void to_json(const CommLocalizationObjectsIDL::CPose2D& obj, nlohmann::json& j)
{
	// m_phi: Double
	j["m_phi"] = obj.m_phi;
	// m_is3D: Boolean
	j["m_is3D"] = obj.m_is3D;
	// m_x: Double
	j["m_x"] = obj.m_x;
	// m_y: Double
	j["m_y"] = obj.m_y;
	// m_z: Double
	j["m_z"] = obj.m_z;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommLocalizationObjectsIDL::CPose2D& obj)
{
	// m_phi: Double
	if(j.contains("m_phi") && j["m_phi"].is_number_float()) {
		obj.m_phi = j["m_phi"].get<double>();
	}
	// m_is3D: Boolean
	if(j.contains("m_is3D") && j["m_is3D"].is_boolean()) {
		obj.m_is3D = j["m_is3D"].get<bool>();
	}
	// m_x: Double
	if(j.contains("m_x") && j["m_x"].is_number_float()) {
		obj.m_x = j["m_x"].get<double>();
	}
	// m_y: Double
	if(j.contains("m_y") && j["m_y"].is_number_float()) {
		obj.m_y = j["m_y"].get<double>();
	}
	// m_z: Double
	if(j.contains("m_z") && j["m_z"].is_number_float()) {
		obj.m_z = j["m_z"].get<double>();
	}
}

} // end namespace CommLocalizationObjectsIDL
