//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMLOCALIZATIONOBJECTS_COMMAMCLVISUALIZATIONINFO_CORE_H_
#define COMMLOCALIZATIONOBJECTS_COMMAMCLVISUALIZATIONINFO_CORE_H_

#include "CommLocalizationObjects/CommAmclVisualizationInfoData.hh"
#include "CommLocalizationObjects/CommAmclParticle.hh"
#include "CommLocalizationObjects/CommAmclHypothesis.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommLocalizationObjects {
	
class CommAmclVisualizationInfoCore {
protected:
	// data structure
	CommLocalizationObjectsIDL::CommAmclVisualizationInfo idl_CommAmclVisualizationInfo;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommLocalizationObjectsIDL::CommAmclVisualizationInfo DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommAmclVisualizationInfoCore();
	CommAmclVisualizationInfoCore(const DATATYPE &data);
	// default destructor
	virtual ~CommAmclVisualizationInfoCore();
	
	const DATATYPE& get() const { return idl_CommAmclVisualizationInfo; }
	operator const DATATYPE&() const { return idl_CommAmclVisualizationInfo; }
	DATATYPE& set() { return idl_CommAmclVisualizationInfo; }

	static inline std::string identifier(void) { return "CommLocalizationObjects::CommAmclVisualizationInfo"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Particles
	/**
	 * Getter methods for element idl_CommAmclVisualizationInfo.particles of type vector<CommLocalizationObjects::CommAmclParticle>
	 */
	inline std::vector<CommLocalizationObjects::CommAmclParticle> getParticlesCopy() const { 
		return std::vector<CommLocalizationObjects::CommAmclParticle>(idl_CommAmclVisualizationInfo.particles.begin(), idl_CommAmclVisualizationInfo.particles.end());
	}
	inline CommLocalizationObjects::CommAmclParticle getParticlesElemAtPos(const size_t &pos) const {
		return CommLocalizationObjects::CommAmclParticle(idl_CommAmclVisualizationInfo.particles[pos]);
	}
	inline size_t getParticlesSize() const { return idl_CommAmclVisualizationInfo.particles.size(); }
	inline bool isParticlesEmpty() const { return idl_CommAmclVisualizationInfo.particles.empty(); }
	/**
	 * Setter methods for idl_CommAmclVisualizationInfo.particles of type vector<CommLocalizationObjects::CommAmclParticle>
	 */
	inline CommAmclVisualizationInfoCore& setParticles(const std::vector<CommLocalizationObjects::CommAmclParticle> &particles) { 
		idl_CommAmclVisualizationInfo.particles.assign(particles.begin(), particles.end());
		return *this;
	}
	inline bool setParticlesElemAtPos(const size_t &pos, const CommLocalizationObjects::CommAmclParticle &elem) {
		if(pos < idl_CommAmclVisualizationInfo.particles.size()) {
			idl_CommAmclVisualizationInfo.particles[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertParticlesVectorAtPos(const size_t &pos, const std::vector<CommLocalizationObjects::CommAmclParticle> &data) {
		if(pos < idl_CommAmclVisualizationInfo.particles.size()) {
			idl_CommAmclVisualizationInfo.particles.insert(idl_CommAmclVisualizationInfo.particles.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeParticles(const size_t &size) { idl_CommAmclVisualizationInfo.particles.resize(size); }
	inline bool eraseParticlesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommAmclVisualizationInfo.particles.size() ) {
			idl_CommAmclVisualizationInfo.particles.erase(idl_CommAmclVisualizationInfo.particles.begin()+pos, idl_CommAmclVisualizationInfo.particles.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearParticles() { idl_CommAmclVisualizationInfo.particles.clear(); }
	
	// getter and setter for element Hypotheses
	/**
	 * Getter methods for element idl_CommAmclVisualizationInfo.hypotheses of type vector<CommLocalizationObjects::CommAmclHypothesis>
	 */
	inline std::vector<CommLocalizationObjects::CommAmclHypothesis> getHypothesesCopy() const { 
		return std::vector<CommLocalizationObjects::CommAmclHypothesis>(idl_CommAmclVisualizationInfo.hypotheses.begin(), idl_CommAmclVisualizationInfo.hypotheses.end());
	}
	inline CommLocalizationObjects::CommAmclHypothesis getHypothesesElemAtPos(const size_t &pos) const {
		return CommLocalizationObjects::CommAmclHypothesis(idl_CommAmclVisualizationInfo.hypotheses[pos]);
	}
	inline size_t getHypothesesSize() const { return idl_CommAmclVisualizationInfo.hypotheses.size(); }
	inline bool isHypothesesEmpty() const { return idl_CommAmclVisualizationInfo.hypotheses.empty(); }
	/**
	 * Setter methods for idl_CommAmclVisualizationInfo.hypotheses of type vector<CommLocalizationObjects::CommAmclHypothesis>
	 */
	inline CommAmclVisualizationInfoCore& setHypotheses(const std::vector<CommLocalizationObjects::CommAmclHypothesis> &hypotheses) { 
		idl_CommAmclVisualizationInfo.hypotheses.assign(hypotheses.begin(), hypotheses.end());
		return *this;
	}
	inline bool setHypothesesElemAtPos(const size_t &pos, const CommLocalizationObjects::CommAmclHypothesis &elem) {
		if(pos < idl_CommAmclVisualizationInfo.hypotheses.size()) {
			idl_CommAmclVisualizationInfo.hypotheses[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertHypothesesVectorAtPos(const size_t &pos, const std::vector<CommLocalizationObjects::CommAmclHypothesis> &data) {
		if(pos < idl_CommAmclVisualizationInfo.hypotheses.size()) {
			idl_CommAmclVisualizationInfo.hypotheses.insert(idl_CommAmclVisualizationInfo.hypotheses.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeHypotheses(const size_t &size) { idl_CommAmclVisualizationInfo.hypotheses.resize(size); }
	inline bool eraseHypothesesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommAmclVisualizationInfo.hypotheses.size() ) {
			idl_CommAmclVisualizationInfo.hypotheses.erase(idl_CommAmclVisualizationInfo.hypotheses.begin()+pos, idl_CommAmclVisualizationInfo.hypotheses.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearHypotheses() { idl_CommAmclVisualizationInfo.hypotheses.clear(); }
};

} /* namespace CommLocalizationObjects */
#endif /* COMMLOCALIZATIONOBJECTS_COMMAMCLVISUALIZATIONINFO_CORE_H_ */
