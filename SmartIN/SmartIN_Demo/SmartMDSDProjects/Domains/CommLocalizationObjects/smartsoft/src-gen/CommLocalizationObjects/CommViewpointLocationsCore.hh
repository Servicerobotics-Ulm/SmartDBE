//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMLOCALIZATIONOBJECTS_COMMVIEWPOINTLOCATIONS_CORE_H_
#define COMMLOCALIZATIONOBJECTS_COMMVIEWPOINTLOCATIONS_CORE_H_

#include "CommLocalizationObjects/CommViewpointLocationsData.hh"
#include "CommLocalizationObjects/ViewpointLocation.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommLocalizationObjects {
	
class CommViewpointLocationsCore {
protected:
	// data structure
	CommLocalizationObjectsIDL::CommViewpointLocations idl_CommViewpointLocations;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommLocalizationObjectsIDL::CommViewpointLocations DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommViewpointLocationsCore();
	CommViewpointLocationsCore(const DATATYPE &data);
	// default destructor
	virtual ~CommViewpointLocationsCore();
	
	const DATATYPE& get() const { return idl_CommViewpointLocations; }
	operator const DATATYPE&() const { return idl_CommViewpointLocations; }
	DATATYPE& set() { return idl_CommViewpointLocations; }

	static inline std::string identifier(void) { return "CommLocalizationObjects::CommViewpointLocations"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Database
	/**
	 * Getter methods for element idl_CommViewpointLocations.database of type vector<CommLocalizationObjects::ViewpointLocation>
	 */
	inline std::vector<CommLocalizationObjects::ViewpointLocation> getDatabaseCopy() const { 
		return std::vector<CommLocalizationObjects::ViewpointLocation>(idl_CommViewpointLocations.database.begin(), idl_CommViewpointLocations.database.end());
	}
	inline CommLocalizationObjects::ViewpointLocation getDatabaseElemAtPos(const size_t &pos) const {
		return CommLocalizationObjects::ViewpointLocation(idl_CommViewpointLocations.database[pos]);
	}
	inline size_t getDatabaseSize() const { return idl_CommViewpointLocations.database.size(); }
	inline bool isDatabaseEmpty() const { return idl_CommViewpointLocations.database.empty(); }
	/**
	 * Setter methods for idl_CommViewpointLocations.database of type vector<CommLocalizationObjects::ViewpointLocation>
	 */
	inline CommViewpointLocationsCore& setDatabase(const std::vector<CommLocalizationObjects::ViewpointLocation> &database) { 
		idl_CommViewpointLocations.database.assign(database.begin(), database.end());
		return *this;
	}
	inline bool setDatabaseElemAtPos(const size_t &pos, const CommLocalizationObjects::ViewpointLocation &elem) {
		if(pos < idl_CommViewpointLocations.database.size()) {
			idl_CommViewpointLocations.database[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertDatabaseVectorAtPos(const size_t &pos, const std::vector<CommLocalizationObjects::ViewpointLocation> &data) {
		if(pos < idl_CommViewpointLocations.database.size()) {
			idl_CommViewpointLocations.database.insert(idl_CommViewpointLocations.database.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeDatabase(const size_t &size) { idl_CommViewpointLocations.database.resize(size); }
	inline bool eraseDatabaseElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommViewpointLocations.database.size() ) {
			idl_CommViewpointLocations.database.erase(idl_CommViewpointLocations.database.begin()+pos, idl_CommViewpointLocations.database.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearDatabase() { idl_CommViewpointLocations.database.clear(); }
};

} /* namespace CommLocalizationObjects */
#endif /* COMMLOCALIZATIONOBJECTS_COMMVIEWPOINTLOCATIONS_CORE_H_ */
