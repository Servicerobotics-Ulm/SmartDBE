//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommLocalizationObjects/CommBeaconMeasurementACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/CommTimeStampACE.hh"

// serialization operator for element CommBeaconMeasurement
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommLocalizationObjectsIDL::CommBeaconMeasurement &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element timeStamp
	good_bit = good_bit && cdr << data.timeStamp;
	// serialize list-element uuid
	good_bit = good_bit && cdr << ACE_CString(data.uuid.c_str());
	// serialize list-element major
	good_bit = good_bit && cdr.write_long(data.major);
	// serialize list-element minor
	good_bit = good_bit && cdr.write_long(data.minor);
	// serialize list-element rssi
	good_bit = good_bit && cdr.write_float(data.rssi);
	// serialize list-element txPower
	good_bit = good_bit && cdr.write_float(data.txPower);
	// serialize list-element distance
	good_bit = good_bit && cdr.write_float(data.distance);
	// serialize list-element distanceIsValid
	good_bit = good_bit && cdr.write_boolean(data.distanceIsValid);
	
	return good_bit;
}

// de-serialization operator for element CommBeaconMeasurement
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommLocalizationObjectsIDL::CommBeaconMeasurement &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element timeStamp
	good_bit = good_bit && cdr >> data.timeStamp;
	// deserialize string-type element uuid
	ACE_CString data_uuid_str;
	good_bit = good_bit && cdr >> data_uuid_str;
	data.uuid = data_uuid_str.c_str();
	// deserialize type element major
	good_bit = good_bit && cdr.read_long(data.major);
	// deserialize type element minor
	good_bit = good_bit && cdr.read_long(data.minor);
	// deserialize type element rssi
	good_bit = good_bit && cdr.read_float(data.rssi);
	// deserialize type element txPower
	good_bit = good_bit && cdr.read_float(data.txPower);
	// deserialize type element distance
	good_bit = good_bit && cdr.read_float(data.distance);
	// deserialize type element distanceIsValid
	good_bit = good_bit && cdr.read_boolean(data.distanceIsValid);
	
	return good_bit;
}

// serialization operator for CommunicationObject CommBeaconMeasurement
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommLocalizationObjects::CommBeaconMeasurement &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommBeaconMeasurement
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommLocalizationObjects::CommBeaconMeasurement &obj)
{
	return cdr >> obj.set();
}
