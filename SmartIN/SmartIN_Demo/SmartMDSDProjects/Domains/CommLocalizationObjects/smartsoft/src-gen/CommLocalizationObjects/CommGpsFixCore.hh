//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMLOCALIZATIONOBJECTS_COMMGPSFIX_CORE_H_
#define COMMLOCALIZATIONOBJECTS_COMMGPSFIX_CORE_H_

#include "CommLocalizationObjects/CommGpsFixData.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommLocalizationObjects {
	
class CommGpsFixCore {
protected:
	// data structure
	CommLocalizationObjectsIDL::CommGpsFix idl_CommGpsFix;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommLocalizationObjectsIDL::CommGpsFix DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommGpsFixCore();
	CommGpsFixCore(const DATATYPE &data);
	// default destructor
	virtual ~CommGpsFixCore();
	
	const DATATYPE& get() const { return idl_CommGpsFix; }
	operator const DATATYPE&() const { return idl_CommGpsFix; }
	DATATYPE& set() { return idl_CommGpsFix; }

	static inline std::string identifier(void) { return "CommLocalizationObjects::CommGpsFix"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Gps_timestamp
	inline double getGps_timestamp() const { return idl_CommGpsFix.gps_timestamp; }
	inline CommGpsFixCore& setGps_timestamp(const double &gps_timestamp) { idl_CommGpsFix.gps_timestamp = gps_timestamp; return *this; }
	
	// getter and setter for element Is_2D
	inline bool getIs_2D() const { return idl_CommGpsFix.is_2D; }
	inline CommGpsFixCore& setIs_2D(const bool &is_2D) { idl_CommGpsFix.is_2D = is_2D; return *this; }
	
	// getter and setter for element Is_3D
	inline bool getIs_3D() const { return idl_CommGpsFix.is_3D; }
	inline CommGpsFixCore& setIs_3D(const bool &is_3D) { idl_CommGpsFix.is_3D = is_3D; return *this; }
	
	// getter and setter for element Satellites_visible
	inline int getSatellites_visible() const { return idl_CommGpsFix.satellites_visible; }
	inline CommGpsFixCore& setSatellites_visible(const int &satellites_visible) { idl_CommGpsFix.satellites_visible = satellites_visible; return *this; }
	
	// getter and setter for element Satellites_used
	inline int getSatellites_used() const { return idl_CommGpsFix.satellites_used; }
	inline CommGpsFixCore& setSatellites_used(const int &satellites_used) { idl_CommGpsFix.satellites_used = satellites_used; return *this; }
	
	// getter and setter for element Latitude
	inline double getLatitude() const { return idl_CommGpsFix.latitude; }
	inline CommGpsFixCore& setLatitude(const double &latitude) { idl_CommGpsFix.latitude = latitude; return *this; }
	
	// getter and setter for element Longitude
	inline double getLongitude() const { return idl_CommGpsFix.longitude; }
	inline CommGpsFixCore& setLongitude(const double &longitude) { idl_CommGpsFix.longitude = longitude; return *this; }
	
	// getter and setter for element Altitude
	inline double getAltitude() const { return idl_CommGpsFix.altitude; }
	inline CommGpsFixCore& setAltitude(const double &altitude) { idl_CommGpsFix.altitude = altitude; return *this; }
	
	// getter and setter for element Speed
	inline double getSpeed() const { return idl_CommGpsFix.speed; }
	inline CommGpsFixCore& setSpeed(const double &speed) { idl_CommGpsFix.speed = speed; return *this; }
	
	// getter and setter for element Climb
	inline double getClimb() const { return idl_CommGpsFix.climb; }
	inline CommGpsFixCore& setClimb(const double &climb) { idl_CommGpsFix.climb = climb; return *this; }
	
	// getter and setter for element Latitude_uncertainty
	inline double getLatitude_uncertainty() const { return idl_CommGpsFix.latitude_uncertainty; }
	inline CommGpsFixCore& setLatitude_uncertainty(const double &latitude_uncertainty) { idl_CommGpsFix.latitude_uncertainty = latitude_uncertainty; return *this; }
	
	// getter and setter for element Longitude_uncertainty
	inline double getLongitude_uncertainty() const { return idl_CommGpsFix.longitude_uncertainty; }
	inline CommGpsFixCore& setLongitude_uncertainty(const double &longitude_uncertainty) { idl_CommGpsFix.longitude_uncertainty = longitude_uncertainty; return *this; }
	
	// getter and setter for element Altitude_uncertainty
	inline double getAltitude_uncertainty() const { return idl_CommGpsFix.altitude_uncertainty; }
	inline CommGpsFixCore& setAltitude_uncertainty(const double &altitude_uncertainty) { idl_CommGpsFix.altitude_uncertainty = altitude_uncertainty; return *this; }
	
	// getter and setter for element Speed_uncertainty
	inline double getSpeed_uncertainty() const { return idl_CommGpsFix.speed_uncertainty; }
	inline CommGpsFixCore& setSpeed_uncertainty(const double &speed_uncertainty) { idl_CommGpsFix.speed_uncertainty = speed_uncertainty; return *this; }
	
	// getter and setter for element Climb_uncertainty
	inline double getClimb_uncertainty() const { return idl_CommGpsFix.climb_uncertainty; }
	inline CommGpsFixCore& setClimb_uncertainty(const double &climb_uncertainty) { idl_CommGpsFix.climb_uncertainty = climb_uncertainty; return *this; }
};

} /* namespace CommLocalizationObjects */
#endif /* COMMLOCALIZATIONOBJECTS_COMMGPSFIX_CORE_H_ */
