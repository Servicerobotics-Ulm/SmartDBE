//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommLocalizationObjects/CommAmclVisualizationInfoACE.hh"
#include <ace/SString.h>
#include "CommLocalizationObjects/CommAmclHypothesisACE.hh"
#include "CommLocalizationObjects/CommAmclParticleACE.hh"

// serialization operator for element CommAmclVisualizationInfo
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommLocalizationObjectsIDL::CommAmclVisualizationInfo &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element particles
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.particles.size());
	std::vector<CommLocalizationObjectsIDL::CommAmclParticle>::const_iterator data_particlesIt;
	for(data_particlesIt=data.particles.begin(); data_particlesIt!=data.particles.end(); data_particlesIt++) {
		good_bit = good_bit && cdr << *data_particlesIt;
	}
	// serialize list-element hypotheses
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.hypotheses.size());
	std::vector<CommLocalizationObjectsIDL::CommAmclHypothesis>::const_iterator data_hypothesesIt;
	for(data_hypothesesIt=data.hypotheses.begin(); data_hypothesesIt!=data.hypotheses.end(); data_hypothesesIt++) {
		good_bit = good_bit && cdr << *data_hypothesesIt;
	}
	
	return good_bit;
}

// de-serialization operator for element CommAmclVisualizationInfo
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommLocalizationObjectsIDL::CommAmclVisualizationInfo &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize list-type element particles
	ACE_CDR::ULong data_particlesNbr;
	good_bit = good_bit && cdr >> data_particlesNbr;
	data.particles.clear();
	CommLocalizationObjectsIDL::CommAmclParticle data_particlesItem;
	for(ACE_CDR::ULong i=0; i<data_particlesNbr; ++i) {
		good_bit = good_bit && cdr >> data_particlesItem;
		data.particles.push_back(data_particlesItem);
	}
	// deserialize list-type element hypotheses
	ACE_CDR::ULong data_hypothesesNbr;
	good_bit = good_bit && cdr >> data_hypothesesNbr;
	data.hypotheses.clear();
	CommLocalizationObjectsIDL::CommAmclHypothesis data_hypothesesItem;
	for(ACE_CDR::ULong i=0; i<data_hypothesesNbr; ++i) {
		good_bit = good_bit && cdr >> data_hypothesesItem;
		data.hypotheses.push_back(data_hypothesesItem);
	}
	
	return good_bit;
}

// serialization operator for CommunicationObject CommAmclVisualizationInfo
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommLocalizationObjects::CommAmclVisualizationInfo &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommAmclVisualizationInfo
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommLocalizationObjects::CommAmclVisualizationInfo &obj)
{
	return cdr >> obj.set();
}
