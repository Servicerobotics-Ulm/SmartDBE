//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMLOCALIZATIONOBJECTS_COMMVISUALLOCALIZATIONFEATUREMAP_CORE_H_
#define COMMLOCALIZATIONOBJECTS_COMMVISUALLOCALIZATIONFEATUREMAP_CORE_H_

#include "CommLocalizationObjects/CommVisualLocalizationFeatureMapData.hh"
#include "CommLocalizationObjects/CommVisualLocalizationFeature.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommLocalizationObjects {
	
class CommVisualLocalizationFeatureMapCore {
protected:
	// data structure
	CommLocalizationObjectsIDL::CommVisualLocalizationFeatureMap idl_CommVisualLocalizationFeatureMap;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommLocalizationObjectsIDL::CommVisualLocalizationFeatureMap DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommVisualLocalizationFeatureMapCore();
	CommVisualLocalizationFeatureMapCore(const DATATYPE &data);
	// default destructor
	virtual ~CommVisualLocalizationFeatureMapCore();
	
	const DATATYPE& get() const { return idl_CommVisualLocalizationFeatureMap; }
	operator const DATATYPE&() const { return idl_CommVisualLocalizationFeatureMap; }
	DATATYPE& set() { return idl_CommVisualLocalizationFeatureMap; }

	static inline std::string identifier(void) { return "CommLocalizationObjects::CommVisualLocalizationFeatureMap"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Features
	/**
	 * Getter methods for element idl_CommVisualLocalizationFeatureMap.features of type vector<CommLocalizationObjects::CommVisualLocalizationFeature>
	 */
	inline std::vector<CommLocalizationObjects::CommVisualLocalizationFeature> getFeaturesCopy() const { 
		return std::vector<CommLocalizationObjects::CommVisualLocalizationFeature>(idl_CommVisualLocalizationFeatureMap.features.begin(), idl_CommVisualLocalizationFeatureMap.features.end());
	}
	inline CommLocalizationObjects::CommVisualLocalizationFeature getFeaturesElemAtPos(const size_t &pos) const {
		return CommLocalizationObjects::CommVisualLocalizationFeature(idl_CommVisualLocalizationFeatureMap.features[pos]);
	}
	inline size_t getFeaturesSize() const { return idl_CommVisualLocalizationFeatureMap.features.size(); }
	inline bool isFeaturesEmpty() const { return idl_CommVisualLocalizationFeatureMap.features.empty(); }
	/**
	 * Setter methods for idl_CommVisualLocalizationFeatureMap.features of type vector<CommLocalizationObjects::CommVisualLocalizationFeature>
	 */
	inline CommVisualLocalizationFeatureMapCore& setFeatures(const std::vector<CommLocalizationObjects::CommVisualLocalizationFeature> &features) { 
		idl_CommVisualLocalizationFeatureMap.features.assign(features.begin(), features.end());
		return *this;
	}
	inline bool setFeaturesElemAtPos(const size_t &pos, const CommLocalizationObjects::CommVisualLocalizationFeature &elem) {
		if(pos < idl_CommVisualLocalizationFeatureMap.features.size()) {
			idl_CommVisualLocalizationFeatureMap.features[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertFeaturesVectorAtPos(const size_t &pos, const std::vector<CommLocalizationObjects::CommVisualLocalizationFeature> &data) {
		if(pos < idl_CommVisualLocalizationFeatureMap.features.size()) {
			idl_CommVisualLocalizationFeatureMap.features.insert(idl_CommVisualLocalizationFeatureMap.features.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeFeatures(const size_t &size) { idl_CommVisualLocalizationFeatureMap.features.resize(size); }
	inline bool eraseFeaturesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommVisualLocalizationFeatureMap.features.size() ) {
			idl_CommVisualLocalizationFeatureMap.features.erase(idl_CommVisualLocalizationFeatureMap.features.begin()+pos, idl_CommVisualLocalizationFeatureMap.features.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearFeatures() { idl_CommVisualLocalizationFeatureMap.features.clear(); }
	
	// getter and setter for element IsValid
	inline bool getIsValid() const { return idl_CommVisualLocalizationFeatureMap.isValid; }
	inline CommVisualLocalizationFeatureMapCore& setIsValid(const bool &isValid) { idl_CommVisualLocalizationFeatureMap.isValid = isValid; return *this; }
};

} /* namespace CommLocalizationObjects */
#endif /* COMMLOCALIZATIONOBJECTS_COMMVISUALLOCALIZATIONFEATUREMAP_CORE_H_ */
