//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMLOCALIZATIONOBJECTS_COMMBEACONMEASUREMENT_CORE_H_
#define COMMLOCALIZATIONOBJECTS_COMMBEACONMEASUREMENT_CORE_H_

#include "CommLocalizationObjects/CommBeaconMeasurementData.hh"
#include "CommBasicObjects/CommTimeStamp.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommLocalizationObjects {
	
class CommBeaconMeasurementCore {
protected:
	// data structure
	CommLocalizationObjectsIDL::CommBeaconMeasurement idl_CommBeaconMeasurement;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommLocalizationObjectsIDL::CommBeaconMeasurement DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommBeaconMeasurementCore();
	CommBeaconMeasurementCore(const DATATYPE &data);
	// default destructor
	virtual ~CommBeaconMeasurementCore();
	
	const DATATYPE& get() const { return idl_CommBeaconMeasurement; }
	operator const DATATYPE&() const { return idl_CommBeaconMeasurement; }
	DATATYPE& set() { return idl_CommBeaconMeasurement; }

	static inline std::string identifier(void) { return "CommLocalizationObjects::CommBeaconMeasurement"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element TimeStamp
	inline CommBasicObjects::CommTimeStamp getTimeStamp() const { return CommBasicObjects::CommTimeStamp(idl_CommBeaconMeasurement.timeStamp); }
	inline CommBeaconMeasurementCore& setTimeStamp(const CommBasicObjects::CommTimeStamp &timeStamp) { idl_CommBeaconMeasurement.timeStamp = timeStamp; return *this; }
	
	// getter and setter for element Uuid
	inline std::string getUuid() const { return idl_CommBeaconMeasurement.uuid; }
	inline CommBeaconMeasurementCore& setUuid(const std::string &uuid) { idl_CommBeaconMeasurement.uuid = uuid; return *this; }
	
	// getter and setter for element Major
	inline int getMajor() const { return idl_CommBeaconMeasurement.major; }
	inline CommBeaconMeasurementCore& setMajor(const int &major) { idl_CommBeaconMeasurement.major = major; return *this; }
	
	// getter and setter for element Minor
	inline int getMinor() const { return idl_CommBeaconMeasurement.minor; }
	inline CommBeaconMeasurementCore& setMinor(const int &minor) { idl_CommBeaconMeasurement.minor = minor; return *this; }
	
	// getter and setter for element Rssi
	inline float getRssi() const { return idl_CommBeaconMeasurement.rssi; }
	inline CommBeaconMeasurementCore& setRssi(const float &rssi) { idl_CommBeaconMeasurement.rssi = rssi; return *this; }
	
	// getter and setter for element TxPower
	inline float getTxPower() const { return idl_CommBeaconMeasurement.txPower; }
	inline CommBeaconMeasurementCore& setTxPower(const float &txPower) { idl_CommBeaconMeasurement.txPower = txPower; return *this; }
	
	// getter and setter for element Distance
	inline float getDistance() const { return idl_CommBeaconMeasurement.distance; }
	inline CommBeaconMeasurementCore& setDistance(const float &distance) { idl_CommBeaconMeasurement.distance = distance; return *this; }
	
	// getter and setter for element DistanceIsValid
	inline bool getDistanceIsValid() const { return idl_CommBeaconMeasurement.distanceIsValid; }
	inline CommBeaconMeasurementCore& setDistanceIsValid(const bool &distanceIsValid) { idl_CommBeaconMeasurement.distanceIsValid = distanceIsValid; return *this; }
};

} /* namespace CommLocalizationObjects */
#endif /* COMMLOCALIZATIONOBJECTS_COMMBEACONMEASUREMENT_CORE_H_ */
