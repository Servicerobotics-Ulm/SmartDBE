//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "CommLocalizationObjects/CommAmclVisualizationInfo.hh"

using namespace CommLocalizationObjects;

CommAmclVisualizationInfo::CommAmclVisualizationInfo()
:	CommAmclVisualizationInfoCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommAmclVisualizationInfo::CommAmclVisualizationInfo(const std::vector<CommLocalizationObjects::CommAmclPaticle> &poses, const std::vector<CommLocalizationObjects::CommAmclHypothesis> &hypotheses)
:	CommAmclVisualizationInfoCore() // base constructor sets default values as defined in the model
{
	setPoses(poses);
	setHypotheses(hypotheses);
}
 */

CommAmclVisualizationInfo::CommAmclVisualizationInfo(const CommAmclVisualizationInfoCore &commAmclVisualizationInfo)
:	CommAmclVisualizationInfoCore(commAmclVisualizationInfo)
{  }

CommAmclVisualizationInfo::CommAmclVisualizationInfo(const DATATYPE &commAmclVisualizationInfo)
:	CommAmclVisualizationInfoCore(commAmclVisualizationInfo)
{  }

CommAmclVisualizationInfo::~CommAmclVisualizationInfo()
{  }
void CommAmclVisualizationInfo::add_amcl_particle(const double x, const double y, const double yaw, const double weight)
{
	idl_CommAmclVisualizationInfo.particles.push_back(CommAmclParticle(CommBasicObjects::CommPose3d(x, y, 0.0, yaw, 0.0, 0.0, 1.0), weight));
}

void CommAmclVisualizationInfo::add_amcl_hypothesis(const double x, const double y, const double yaw, const double covar[], const double weight)
{
	std::vector<double> covar_matrix (covar, covar + 9);
	idl_CommAmclVisualizationInfo.hypotheses.push_back(CommAmclHypothesis(CommBasicObjects::CommPose3d(x, y, 0.0, yaw, 0.0, 0.0, 1.0), weight, covar_matrix));
}
