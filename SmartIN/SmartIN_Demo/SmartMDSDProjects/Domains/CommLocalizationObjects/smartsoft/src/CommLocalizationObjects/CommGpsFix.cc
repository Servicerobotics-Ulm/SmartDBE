//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "CommLocalizationObjects/CommGpsFix.hh"

using namespace CommLocalizationObjects;

CommGpsFix::CommGpsFix()
:	CommGpsFixCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommGpsFix::CommGpsFix(const double &gps_timestamp, const bool &is_2D, const bool &is_3D, const int &satellites_visible, const int &satellites_used, const double &latitude, const double &longitude, const double &altitude, const double &speed, const double &climb, const double &latitude_uncertainty, const double &longitude_uncertainty, const double &altitude_uncertainty, const double &speed_uncertainty, const double &climb_uncertainty)
:	CommGpsFixCore() // base constructor sets default values as defined in the model
{
	setGps_timestamp(gps_timestamp);
	setIs_2D(is_2D);
	setIs_3D(is_3D);
	setSatellites_visible(satellites_visible);
	setSatellites_used(satellites_used);
	setLatitude(latitude);
	setLongitude(longitude);
	setAltitude(altitude);
	setSpeed(speed);
	setClimb(climb);
	setLatitude_uncertainty(latitude_uncertainty);
	setLongitude_uncertainty(longitude_uncertainty);
	setAltitude_uncertainty(altitude_uncertainty);
	setSpeed_uncertainty(speed_uncertainty);
	setClimb_uncertainty(climb_uncertainty);
}
 */

CommGpsFix::CommGpsFix(const CommGpsFixCore &commGpsFix)
:	CommGpsFixCore(commGpsFix)
{  }

CommGpsFix::CommGpsFix(const DATATYPE &commGpsFix)
:	CommGpsFixCore(commGpsFix)
{  }

CommGpsFix::~CommGpsFix()
{  }
