// --------------------------------------------------------------------------
//
//  Copyright (C) 2018 Servicerobotik Ulm
//
//  Service Robotics Research Center
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#import CommBasicObjects.*;

CommObjectsRepository CommNavigationObjects version 1.0.0 {
	CommObject CommPlannerEventParameter {
		oldState: PlannerEventType
	}
	CommObject CommPlannerEventResult {
		state: PlannerEventType
	}
	CommObject CommCdlGoalEventParameter {
		oldState: CdlGoalEventType
	}
	CommObject CommCdlGoalEventResult {
		state: CdlGoalEventType
	}
	CommObject CdlGoalEventState {
		newState: CdlGoalEventType
	}
	CommObject CommGridMap {
		id: UInt32
		is_valid: Boolean
		time: CommTimeStamp 
		xOffsetMM: Int32
		yOffsetMM: Int32
		xOffsetCells: Int32
		yOffsetCells: Int32
		cellSizeMM: Int32
		xSizeMM: UInt32
		ySizeMM: UInt32
		xSizeCells: UInt32
		ySizeCells: UInt32
		size: UInt32
		cell: UInt8[*]
	}
	CommObject CommPlannerGoal {
		id: Int32
		flag: Int32
		xWayPoint: Double
		yWayPoint: Double
		hWayPoint: Double
		xGoalPoint: Double
		yGoalPoint: Double
		hGoalPoint: Double
	}
	CommObject CommGridMapRequest {
		id: UInt32
		xOffsetMM: Int32
		yOffsetMM: Int32
		xSizeMM: UInt32
		ySizeMM: UInt32
		curLtmState: Boolean
		curLtmThreshold: UInt32
	}
	CommObject PlannerEventState {
		newState: PlannerEventType
	}
	Enumeration OctomapTagType {
		RESET
	}
	Enumeration CdlTagType {
		CDL_SET_MODE_STRATEGY
		CDL_SET_FREE_BEHAVIOUR
		CDL_SET_LOOKUP_TABLE
		CDL_SET_TRANS_VELOCITY
		CDL_SET_ROT_VELOCITY
		CDL_SET_MODE_GOAL
		CDL_SET_ID
		CDL_SET_GOAL
		CDL_SET_APPROACH_DIST
		CDL_SAVE_CURRENT_POS
		CDL_SET_SAFETY_CLEARENCE
		CDL_NEUTRAL
		CDL_REACTIVE
		CDL_JOYSTICK
		CDL_TURN
		CDL_APPROACH_FLAT_SURF
		CDL_APPROACH_HALT
		CDL_APPROACH
		CDL_ROTATE
		CDL_FOLLOW
		CDL_BACKWARD
		CDL_ABSOLUTE
		CDL_PLANNER
		CDL_PERSON
		CDL_SAVED
		CDL_ANGLE_ABSOLUTE
		CDL_ANGLE_RELATIVE
		CDL_DEFAULT_LOOKUP
		CDL_SECOND_LOOKUP
		CDL_NO_FREE_BEHAVIOUR
		CDL_FREE_BEHAVIOR
		CDL_APPROACH_COVERAGE
	}
	Enumeration PlannerTagType {
		PLANNER_DELETE_GOAL
		PLANNER_SET_DESTINATION_LINE
		PLANNER_SET_DESTINATION_CIRCLE
		PLANNER_ID
	}
	Enumeration SLAM6DOFTag {
		INITALPOSE_6DOF
		SLAM_MODE
		POSETRACKING_MODE
	}
	Enumeration MapperTagType {
		MAPPER_CUR_PARAMETER
		MAPPER_CUR_LTM
		MAPPER_CUR_SAVE
		MAPPER_CUR_LOAD
		MAPPER_CUR_LOAD_LTM
		MAPPER_CTR_SAVE_XPM
		MAPPER_LTM_PARAMETER
		MAPPER_LTM_INITIALIZE
		MAPPER_LTM_SAVE
		MAPPER_LTM_LOAD
		MAPPER_LTM_SAVE_XPM
		MAPPER_LTM_SAVE_YAML_PGM
		MAPPER_LTM_SAVE_YAML_PPM
		MAPPER_LTM_LOAD_YAML
	}
	Enumeration PlannerEventType {
		PLANNER_NO_ERROR
		PLANNER_UNKNOWN_ERROR
		PLANNER_NO_GOAL_AVAILABLE
		PLANNER_GOAL_OK
		PLANNER_GOAL_NOT_MARKED
		PLANNER_START_OCCUPIED_OBSTACLE
		PLANNER_START_OCCUPIED_GOAL
		PLANNER_NO_PATH
		PLANNER_PATH_FOUND
		PLANNER_WRONG_MAPID
		PLANNER_INVALID_MAP
		PLANNER_UNKNOWN
	}
	
	Enumeration CdlGoalEventType {
		CDL_GOAL_UNKNOWN
		CDL_GOAL_REACHED
		CDL_GOAL_NOT_REACHED
	}	
	
	Enumeration CdlRobotBlockEventType{	
		CDL_ROBOT_UNKNOWN	
		CDL_ROBOT_BLOCKED
		CDL_ROBOT_NOT_BLOCKED
		CDL_ROBOT_BLOCKED_PATH
		CDL_ROBOT_UNBLOCKED_PATH
	}
	
	CommObject CommCdlRobotBlockedEventParameter {
		oldState: CdlRobotBlockEventType
	}
	CommObject CommCdlRobotBlockedEventResult {
		state: CdlRobotBlockEventType
	}
	CommObject CommCdlRobotBlockedState {
		newState: CdlRobotBlockEventType
	}

	Enumeration NavigationPartType {
		GRID_BASED_FREE_NAV
		CORRIDOR_BASED_COORDINATED_NAV
		GRID_BASED_COORDINATED_NAV
		
	}
	
	Enumeration NavigationConnectonType {
		VIA_LOCATION
	}
	
	CommObject CommNavigationTopologyPart {
		type : NavigationPartType
		id : UInt32
		name : String 
		contained_location_ids : UInt32 [*]
	}
	
	CommObject CommNavigationTopologyConnection {
		type : NavigationConnectonType
		
		locationId : UInt32
		
		fromPart : UInt32
		toPart : UInt32
	}
	
	CommObject CommNavigationTopologyMap {
		isValid: Boolean = false
		vertices : CommNavigationTopologyPart[*]
		edges : CommNavigationTopologyConnection[*] 
	}
	
	////////DOCKING
	
	Enumeration DockingEventType 
	{
		DOCKING_UNKNOWN
		DOCKING_DONE
		DOCKING_NOT_DONE
		DOCKING_ERROR
		UN_DOCKING_NOT_DONE
		UN_DOCKING_DONE
		UN_DOCKING_ERROR
	}
	
	CommObject CommDockingEventParameter {
		oldState : DockingEventType
	}
	
	CommObject CommDockingEventResult {
		state : DockingEventType
	}
	
	
	CommObject CommDockingEventState {
		newState : DockingEventType
	}


	// Navigation Network 
	
	CommObject CommNavigationTimeRequest {
		startPose : UInt32
		goalPose : UInt32
	}
	
	CommObject CommNavigationTimeResponse {
		estimatedDuration : CommTimeStamp
	}
	
	
	/////////////////////////////////////
	// Network Status
	
	CommObject CommCorridorNode {
		id : UInt32
		x : Double
		y : Double
		pose : UInt32
        path : UInt32
        width : Double	
    	type : NODE_TYPE
     	sts : NODE_STATUS
     	robotID : String
	}

	CommObject CommCorridorNetworkStatus{
		nodes : CommCorridorNode [*]
	}
	
	CommObject CommNavigationPaths{
		nodes : CommCorridorNode [*]
		pathWidth : Double [*]
		robotID : String
	}
	
	Enumeration NODE_TYPE {
		NORMAL
		CROSS
		WAIT
		NEWCROSS
	}
	
	Enumeration NODE_STATUS {
		OCCUPIED
		AVAILABLE
		OK
	}
	
	Enumeration NavigationNodeRequestType{
		FREENODE
		ACQUIRENODE
		FREEALLNODES
		FREEALLNODESBUT
	}
	
	CommObject CommCorridorNavigationNodeRequest {
		requestType : NavigationNodeRequestType
		nodesList :  CommCorridorNode [*]
		robotID : String
	}
	
	CommObject CommCorridorNavigationNodeAnswer {
		nodesList : CommCorridorNode [*] 
		success : Boolean
	}
	
		
	CommObject CommCorridorNavigationPoseRequest {
		requesttype : NavigationNodeRequestType
		pose : UInt32
		robotID : String
	}
	
	Enumeration NodeRequestAnserType {
		STATE_UNKNOWN
		SUCCESS
		FAIL
		ERROR_NONODE
	}
	 
	CommObject CommCorridorNavigationPoseAnswer {
		result : NodeRequestAnserType
	}
	
	CommObject CommCorridorNavigationPoseRequestEventParameter {
		oldState: NodeRequestAnserType
	}
	CommObject CommCorridorNavigationPoseRequestEventResult {
		state: NodeRequestAnserType
	}
	CommObject CommCorridorNavigationPoseRequestEventState {
		newState: NodeRequestAnserType
	}	
	
		
	CommObject CommCorridorNavigationPathRequest {
		startPose : UInt32
		goalPose : UInt32
	}

    CommObject CommCorridorNavigationPathAnswer {
    	valid : Boolean
		paths : CommNavigationPaths
	}
	
	//////////////////////
	CommObject CommCorridorNetworkLayout {
		networkStatus : CommCorridorNetworkStatus
		layoutFile: CommDataFile
	}
	

	CommObject CommCorridorNavigationGoal {
		goalID : Int32
		paths : CommNavigationPaths
		goalX: Double
		goalY: Double
		goal_id :Int32
		startX:Double
		startY:Double
		start_id:Int32
	}
	
		
	CommObject CommClosestNodeRequest {
		position : CommPosition3d
	}
	
	CommObject CommClosestNodeAnswer {
		node_id : Int32
		position : CommPosition3d
		distance : Double
		valid : Boolean = false
	}
	
	
	Enumeration PathNavigationEventType {
		GOAL_UNKNOWN
		START_TOO_FAR
		GOAL_REACHED
		GOAL_NOT_REACHED
		NO_PATH_FOUND
		FATAL_ERROR
	}
	
	CommObject CommCorridorNavigationGoalEventParameter {
		oldState: PathNavigationEventType
	}
	CommObject CommCorridorNavigationGoalEventResult {
		state: PathNavigationEventType
		nextGoal: CommPosition3d
	}
	CommObject CommCorridorNavigationGoalEventState {
		newState: PathNavigationEventType
		nextGoal: CommPosition3d
	}
	
	/////////////////////////////////////
	// Network Graph
	
	CommObject CommNavigationGraphVertex {
		x : Double
		y : Double
		pose : Int32
		path : Int32
		width : Double
		type : NODE_TYPE
		intersec_path: Int32 [*]
	}
	
	Enumeration EDGE_TYPE {
		NORMAL_EDGE
		DELETE_EDGE 
	}
	
	CommObject CommNavigationGraphEdge{
		u : Int32
		v : Int32
		
		path : Int32
		way : Int32
		gap : Double
		type : EDGE_TYPE
	}
	
	CommObject CommNavigationGraph {
		vertices : CommNavigationGraphVertex [*]
		edges : CommNavigationGraphEdge [*]
		pathWidth: Double [*]
		valid : Boolean = false
	}
	
	CommObject CommPlannerGoalList {
		id: Int32
		flag: Int32
		goalXvector : Double [*]
		goalYvector : Double [*]
		nodeObstacleVector : Double [*]
		finalGoalX : Double
		finalGoalY : Double
	}
	
}
