//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommGridMapRequestJSON.hh"


namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommGridMapRequest& obj, nlohmann::json& j)
{
	// id: UInt32
	j["id"] = obj.id;
	// xOffsetMM: Int32
	j["xOffsetMM"] = obj.xOffsetMM;
	// yOffsetMM: Int32
	j["yOffsetMM"] = obj.yOffsetMM;
	// xSizeMM: UInt32
	j["xSizeMM"] = obj.xSizeMM;
	// ySizeMM: UInt32
	j["ySizeMM"] = obj.ySizeMM;
	// curLtmState: Boolean
	j["curLtmState"] = obj.curLtmState;
	// curLtmThreshold: UInt32
	j["curLtmThreshold"] = obj.curLtmThreshold;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommGridMapRequest& obj)
{
	// id: UInt32
	if(j.contains("id") && j["id"].is_number_unsigned()) {
		obj.id = j["id"].get<unsigned int>();
	}
	// xOffsetMM: Int32
	if(j.contains("xOffsetMM") && j["xOffsetMM"].is_number_integer()) {
		obj.xOffsetMM = j["xOffsetMM"].get<int>();
	}
	// yOffsetMM: Int32
	if(j.contains("yOffsetMM") && j["yOffsetMM"].is_number_integer()) {
		obj.yOffsetMM = j["yOffsetMM"].get<int>();
	}
	// xSizeMM: UInt32
	if(j.contains("xSizeMM") && j["xSizeMM"].is_number_unsigned()) {
		obj.xSizeMM = j["xSizeMM"].get<unsigned int>();
	}
	// ySizeMM: UInt32
	if(j.contains("ySizeMM") && j["ySizeMM"].is_number_unsigned()) {
		obj.ySizeMM = j["ySizeMM"].get<unsigned int>();
	}
	// curLtmState: Boolean
	if(j.contains("curLtmState") && j["curLtmState"].is_boolean()) {
		obj.curLtmState = j["curLtmState"].get<bool>();
	}
	// curLtmThreshold: UInt32
	if(j.contains("curLtmThreshold") && j["curLtmThreshold"].is_number_unsigned()) {
		obj.curLtmThreshold = j["curLtmThreshold"].get<unsigned int>();
	}
}

} // end namespace CommNavigationObjectsIDL
