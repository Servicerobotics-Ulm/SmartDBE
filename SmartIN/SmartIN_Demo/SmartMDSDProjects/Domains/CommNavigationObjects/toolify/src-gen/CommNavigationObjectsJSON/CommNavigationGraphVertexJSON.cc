//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommNavigationGraphVertexJSON.hh"


namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommNavigationGraphVertex& obj, nlohmann::json& j)
{
	// x: Double
	j["x"] = obj.x;
	// y: Double
	j["y"] = obj.y;
	// pose: Int32
	j["pose"] = obj.pose;
	// path: Int32
	j["path"] = obj.path;
	// width: Double
	j["width"] = obj.width;
	// type: NODE_TYPE
	j["type"] = obj.type;
	// intersec_path: Int32[]
	j["intersec_path"] = obj.intersec_path;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommNavigationGraphVertex& obj)
{
	// x: Double
	if(j.contains("x") && j["x"].is_number_float()) {
		obj.x = j["x"].get<double>();
	}
	// y: Double
	if(j.contains("y") && j["y"].is_number_float()) {
		obj.y = j["y"].get<double>();
	}
	// pose: Int32
	if(j.contains("pose") && j["pose"].is_number_integer()) {
		obj.pose = j["pose"].get<int>();
	}
	// path: Int32
	if(j.contains("path") && j["path"].is_number_integer()) {
		obj.path = j["path"].get<int>();
	}
	// width: Double
	if(j.contains("width") && j["width"].is_number_float()) {
		obj.width = j["width"].get<double>();
	}
	// type: NODE_TYPE
	if(j.contains("type") && j["type"].is_number_integer()) {
		obj.type = j["type"].get<int>();
	}
	// intersec_path: Int32[]
	if(j.contains("intersec_path") && j["intersec_path"].is_array()) {
		obj.intersec_path = j["intersec_path"].get<std::vector<int>>();
	}
}

} // end namespace CommNavigationObjectsIDL
