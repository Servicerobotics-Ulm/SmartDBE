//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommNavigationTopologyConnectionJSON.hh"


namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommNavigationTopologyConnection& obj, nlohmann::json& j)
{
	// type: NavigationConnectonType
	j["type"] = obj.type;
	// locationId: UInt32
	j["locationId"] = obj.locationId;
	// fromPart: UInt32
	j["fromPart"] = obj.fromPart;
	// toPart: UInt32
	j["toPart"] = obj.toPart;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommNavigationTopologyConnection& obj)
{
	// type: NavigationConnectonType
	if(j.contains("type") && j["type"].is_number_integer()) {
		obj.type = j["type"].get<int>();
	}
	// locationId: UInt32
	if(j.contains("locationId") && j["locationId"].is_number_unsigned()) {
		obj.locationId = j["locationId"].get<unsigned int>();
	}
	// fromPart: UInt32
	if(j.contains("fromPart") && j["fromPart"].is_number_unsigned()) {
		obj.fromPart = j["fromPart"].get<unsigned int>();
	}
	// toPart: UInt32
	if(j.contains("toPart") && j["toPart"].is_number_unsigned()) {
		obj.toPart = j["toPart"].get<unsigned int>();
	}
}

} // end namespace CommNavigationObjectsIDL
