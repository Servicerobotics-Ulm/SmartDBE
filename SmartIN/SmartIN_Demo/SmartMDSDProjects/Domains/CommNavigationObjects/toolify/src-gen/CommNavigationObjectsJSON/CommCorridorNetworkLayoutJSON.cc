//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "CommCorridorNetworkLayoutJSON.hh"

#include "CommNavigationObjectsJSON/CommCorridorNetworkStatusJSON.hh"
#include "CommBasicObjectsJSON/CommDataFileJSON.hh"

namespace CommNavigationObjectsIDL {

void to_json(const CommNavigationObjectsIDL::CommCorridorNetworkLayout& obj, nlohmann::json& j)
{
	// networkStatus: CommCorridorNetworkStatus
	to_json(obj.networkStatus, j["networkStatus"]);
	// layoutFile: CommDataFile
	to_json(obj.layoutFile, j["layoutFile"]);
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, CommNavigationObjectsIDL::CommCorridorNetworkLayout& obj)
{
	// networkStatus: CommCorridorNetworkStatus
	if(j.contains("networkStatus") && j["networkStatus"].is_object()) {
		//from_json(j["networkStatus"], obj.networkStatus);
		obj.networkStatus = j["networkStatus"].get<CommNavigationObjectsIDL::CommCorridorNetworkStatus>();
	}
	// layoutFile: CommDataFile
	if(j.contains("layoutFile") && j["layoutFile"].is_object()) {
		//from_json(j["layoutFile"], obj.layoutFile);
		obj.layoutFile = j["layoutFile"].get<CommBasicObjectsIDL::CommDataFile>();
	}
}

} // end namespace CommNavigationObjectsIDL
