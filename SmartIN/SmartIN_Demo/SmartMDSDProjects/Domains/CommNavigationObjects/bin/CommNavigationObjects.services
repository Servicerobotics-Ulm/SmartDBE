// --------------------------------------------------------------------------
//
//  Copyright (C) 2018 Servicerobotik Ulm
//
//  Service Robotics Research Center
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

ServiceDefRepository CommNavigationObjects version 1.0
{
	/**
	 * Base-related service-definitions
	 */
	JoiningServiceDefinition NavigationVelocityService {
		SendPattern <DataType=CommBasicObjects.CommNavigationVelocity>
	}

	JoiningServiceDefinition LocalizationUpdateService {
		SendPattern < DataType = CommBasicObjects.CommBasePositionUpdate >
	}

	ForkingServiceDefinition BatteryEventService {
		EventPattern <
			ActivationType=CommBasicObjects.CommBatteryParameter
			EventType=CommBasicObjects.CommBatteryEvent
			EventStateType=CommBasicObjects.CommBatteryState
		>
	}

	/**
	 * Planner service definitions
	 */
	ForkingServiceDefinition PlannerGoalService {
		PushPattern < DataType = CommNavigationObjects.CommPlannerGoal >
	}

	ForkingServiceDefinition PlannerEventService {
		EventPattern <
			ActivationType=CommNavigationObjects.CommPlannerEventParameter
			EventType=CommNavigationObjects.CommPlannerEventResult
			EventStateType=CommNavigationObjects.PlannerEventState
		>
	}

	/**
	 * Mapping service-definitions
	 */
	ForkingServiceDefinition CurrGridMapPushService {
		PushPattern <DataType=CommNavigationObjects.CommGridMap>
	}

	RequestAnswerServiceDefinition CurrGridMapQueryService {
		QueryPattern <RequestType=CommNavigationObjects.CommGridMapRequest AnswerType=CommNavigationObjects.CommGridMap>
	}

	RequestAnswerServiceDefinition LongTermGridMapQueryService {
		QueryPattern <RequestType=CommNavigationObjects.CommGridMapRequest AnswerType=CommNavigationObjects.CommGridMap>
	}

	/**
	 * CDL-related service-definitions
	 */
	ForkingServiceDefinition GoalEventService {
		EventPattern < 
			ActivationType=CommNavigationObjects.CommCdlGoalEventParameter 
			EventType=CommNavigationObjects.CommCdlGoalEventResult 
			EventStateType=CommNavigationObjects.CdlGoalEventState
		> 
	}

	ForkingServiceDefinition RobotBlockedEventService {
		EventPattern <
			ActivationType=CommNavigationObjects.CommCdlRobotBlockedEventParameter 
			EventType=CommNavigationObjects.CommCdlRobotBlockedEventResult 
			EventStateType=CommNavigationObjects.CommCdlRobotBlockedState
		>
	}

	ForkingServiceDefinition IRService {
		PushPattern<DataType=CommBasicObjects.CommMobileIRScan>
	}

	ForkingServiceDefinition RobotDockingEventService {
		EventPattern<ActivationType=CommNavigationObjects.CommDockingEventParameter
		EventStateType = CommNavigationObjects.CommDockingEventState
		EventType = CommNavigationObjects.CommDockingEventResult>
	}

	RequestAnswerServiceDefinition NavigationTopologyMapQuery {
		QueryPattern < AnswerType = CommNavigationObjects.CommNavigationTopologyMap
		RequestType = CommBasicObjects.CommVoid>
	}
	
	/**
	 * Corridor Fleet Navigation
	 */
	ForkingServiceDefinition NavigationNetworkStatusEvent {
		EventPattern < ActivationType = CommBasicObjects.CommVoid 
		EventStateType = CommNavigationObjects.CommCorridorNetworkStatus 
		EventType = CommNavigationObjects.CommCorridorNetworkStatus >
	}
	
	ForkingServiceDefinition NavigationNetworkLayoutEvent {
		EventPattern < ActivationType = CommBasicObjects.CommVoid 
		EventStateType = CommNavigationObjects.CommCorridorNetworkLayout
		EventType = CommNavigationObjects.CommCorridorNetworkLayout >
	}
	
	ForkingServiceDefinition NavigationGraphEvent {
		EventPattern < ActivationType = CommBasicObjects.CommVoid 
		EventStateType = CommNavigationObjects.CommNavigationGraph
		EventType = CommNavigationObjects.CommNavigationGraph >
	}
	
	JoiningServiceDefinition NavigationFileSend {
		SendPattern < DataType = CommBasicObjects.CommDataFile>
	}
	
	RequestAnswerServiceDefinition NavigationNetworkNodeRequest {
		QueryPattern < RequestType = CommNavigationObjects.CommCorridorNavigationNodeRequest
		AnswerType=CommNavigationObjects.CommCorridorNavigationNodeAnswer>
	}
	
	RequestAnswerServiceDefinition NavigationNetworkPoseRequest {
		QueryPattern < RequestType = CommNavigationObjects.CommCorridorNavigationPoseRequest
		AnswerType=CommNavigationObjects.CommCorridorNavigationPoseAnswer>
	}
	
	RequestAnswerServiceDefinition NavigationNetworkPathRequest {
		QueryPattern < RequestType = CommNavigationObjects.CommCorridorNavigationPathRequest
		AnswerType=CommNavigationObjects.CommCorridorNavigationPathAnswer>
	}
	
	RequestAnswerServiceDefinition NavigationTimeRequest {
		QueryPattern <RequestType = CommNavigationObjects.CommNavigationTimeRequest
		AnswerType = CommNavigationObjects.CommNavigationTimeResponse>
	}
	
	ForkingServiceDefinition CorridorNavigationNextGoal {
		PushPattern < DataType = CommNavigationObjects.CommCorridorNavigationGoal >
	} 
	
	ForkingServiceDefinition CorridorNavigationPathChangeEvent {
		EventPattern < ActivationType = CommBasicObjects.CommVoid
		EventStateType = CommNavigationObjects.CommNavigationPaths
		EventType = CommNavigationObjects.CommNavigationPaths>
	}
	
	RequestAnswerServiceDefinition CorridorNavigationClosestNodeQuery {
		QueryPattern < RequestType = CommNavigationObjects.CommClosestNodeRequest
		AnswerType = CommNavigationObjects.CommClosestNodeAnswer>
	}
	
	ForkingServiceDefinition CorridorNavigationPoseRequestEvent {
		EventPattern <ActivationType = CommNavigationObjects.CommCorridorNavigationPoseRequestEventParameter
		EventStateType = CommNavigationObjects.CommCorridorNavigationPoseRequestEventState
		EventType = CommNavigationObjects.CommCorridorNavigationPoseRequestEventResult>
	}
	
	ForkingServiceDefinition CorridorNavigationGoalEvent {
		EventPattern <ActivationType = CommNavigationObjects.CommCorridorNavigationGoalEventParameter
		EventStateType = CommNavigationObjects.CommCorridorNavigationGoalEventState
		EventType = CommNavigationObjects.CommCorridorNavigationGoalEventResult>
	}
	

	/**
	 * Coordination service-definitions
	 */
	 
 	CoordinationServiceDefinition BaseCoordinationService {
		StatePattern < lifecycle ComponentLifecycle with CommBasicObjects.RobotBaseModes >
		ParameterPattern < CommBasicObjects.BaseParams >
		CommunicationServiceUsage baseState uses CommBasicObjects.BaseStateQueryService
		CommunicationServiceUsage bumperEvent uses CommBasicObjects.BumperEventService
		CommunicationServiceUsage batteryEvent uses BatteryEventService
	}
	 
	CoordinationServiceDefinition CdlCoordinationService {
		ParameterPattern < CommNavigationObjects.CdlParameter >
		StatePattern < lifecycle ComponentLifecycle with  CommNavigationObjects.CdlStates >
		CommunicationServiceUsage goalEvent uses GoalEventService
		CommunicationServiceUsage blockedEvent uses RobotBlockedEventService
	}

	CoordinationServiceDefinition MapperCoordinationService {
		ParameterPattern < CommNavigationObjects.MapperParams >
		StatePattern < lifecycle ComponentLifecycle with CommNavigationObjects.MappingStates >
	}

	CoordinationServiceDefinition PlannerCoordinationService {
		StatePattern < lifecycle ComponentLifecycle with CommNavigationObjects.PathPlannerStates>
		ParameterPattern < CommNavigationObjects.PlannerParams>
		CommunicationServiceUsage plannerEvent uses PlannerEventService
	}
	
	CoordinationServiceDefinition RobotDockingCoordinationService{
		StatePattern < lifecycle ComponentLifecycle with CommNavigationObjects.RobotDockingStates>
		ParameterPattern <CommNavigationObjects.RobotDockingParameter>
		CommunicationServiceUsage dockingEvent uses RobotDockingEventService
	}
	
	CoordinationServiceDefinition CorridorNavigationServerCoordinationService {
		StatePattern < lifecycle ComponentLifecycle >
		ParameterPattern < CommNavigationObjects.CorridorNavigationServerParams >
	}
	
	CoordinationServiceDefinition CorridorNavigationClientCoordinationService {
		StatePattern < lifecycle ComponentLifecycle with CommNavigationObjects.CorridorNavigationStates>
		ParameterPattern < CommNavigationObjects.CorridorNavigationClientParams >
		CommunicationServiceUsage goalevent uses CommNavigationObjects.CorridorNavigationGoalEvent
		CommunicationServiceUsage poserequestevent uses CommNavigationObjects.CorridorNavigationPoseRequestEvent
		CommunicationServiceUsage closestnodequery uses CommNavigationObjects.CorridorNavigationClosestNodeQuery
		CommunicationServiceUsage navtimequery uses CommNavigationObjects.NavigationTimeRequest
	}
	
	ForkingServiceDefinition PlannerGoalListService {
		PushPattern<DataType=CommNavigationObjects.CommPlannerGoalList>
	}
	
	CoordinationServiceDefinition PurePursuitNavigationCoordinationService {
		StatePattern < lifecycle ComponentLifecycle with CommNavigationObjects.CdlStates>
		ParameterPattern < CommNavigationObjects.PurePursuitNavigationParameter >
		CommunicationServiceUsage goalEvent uses GoalEventService
	}

}
