//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMNAVIGATIONOBJECTS_COMMNAVIGATIONTOPOLOGYMAP_CORE_H_
#define COMMNAVIGATIONOBJECTS_COMMNAVIGATIONTOPOLOGYMAP_CORE_H_

#include "CommNavigationObjects/CommNavigationTopologyMapData.hh"
#include "CommNavigationObjects/CommNavigationTopologyPart.hh"
#include "CommNavigationObjects/CommNavigationTopologyConnection.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommNavigationObjects {
	
class CommNavigationTopologyMapCore {
protected:
	// data structure
	CommNavigationObjectsIDL::CommNavigationTopologyMap idl_CommNavigationTopologyMap;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommNavigationObjectsIDL::CommNavigationTopologyMap DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommNavigationTopologyMapCore();
	CommNavigationTopologyMapCore(const DATATYPE &data);
	// default destructor
	virtual ~CommNavigationTopologyMapCore();
	
	const DATATYPE& get() const { return idl_CommNavigationTopologyMap; }
	operator const DATATYPE&() const { return idl_CommNavigationTopologyMap; }
	DATATYPE& set() { return idl_CommNavigationTopologyMap; }

	static inline std::string identifier(void) { return "CommNavigationObjects::CommNavigationTopologyMap"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element IsValid
	inline bool getIsValid() const { return idl_CommNavigationTopologyMap.isValid; }
	inline CommNavigationTopologyMapCore& setIsValid(const bool &isValid) { idl_CommNavigationTopologyMap.isValid = isValid; return *this; }
	
	// getter and setter for element Vertices
	/**
	 * Getter methods for element idl_CommNavigationTopologyMap.vertices of type vector<CommNavigationObjects::CommNavigationTopologyPart>
	 */
	inline std::vector<CommNavigationObjects::CommNavigationTopologyPart> getVerticesCopy() const { 
		return std::vector<CommNavigationObjects::CommNavigationTopologyPart>(idl_CommNavigationTopologyMap.vertices.begin(), idl_CommNavigationTopologyMap.vertices.end());
	}
	inline CommNavigationObjects::CommNavigationTopologyPart getVerticesElemAtPos(const size_t &pos) const {
		return CommNavigationObjects::CommNavigationTopologyPart(idl_CommNavigationTopologyMap.vertices[pos]);
	}
	inline size_t getVerticesSize() const { return idl_CommNavigationTopologyMap.vertices.size(); }
	inline bool isVerticesEmpty() const { return idl_CommNavigationTopologyMap.vertices.empty(); }
	/**
	 * Setter methods for idl_CommNavigationTopologyMap.vertices of type vector<CommNavigationObjects::CommNavigationTopologyPart>
	 */
	inline CommNavigationTopologyMapCore& setVertices(const std::vector<CommNavigationObjects::CommNavigationTopologyPart> &vertices) { 
		idl_CommNavigationTopologyMap.vertices.assign(vertices.begin(), vertices.end());
		return *this;
	}
	inline bool setVerticesElemAtPos(const size_t &pos, const CommNavigationObjects::CommNavigationTopologyPart &elem) {
		if(pos < idl_CommNavigationTopologyMap.vertices.size()) {
			idl_CommNavigationTopologyMap.vertices[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertVerticesVectorAtPos(const size_t &pos, const std::vector<CommNavigationObjects::CommNavigationTopologyPart> &data) {
		if(pos < idl_CommNavigationTopologyMap.vertices.size()) {
			idl_CommNavigationTopologyMap.vertices.insert(idl_CommNavigationTopologyMap.vertices.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeVertices(const size_t &size) { idl_CommNavigationTopologyMap.vertices.resize(size); }
	inline bool eraseVerticesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommNavigationTopologyMap.vertices.size() ) {
			idl_CommNavigationTopologyMap.vertices.erase(idl_CommNavigationTopologyMap.vertices.begin()+pos, idl_CommNavigationTopologyMap.vertices.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearVertices() { idl_CommNavigationTopologyMap.vertices.clear(); }
	
	// getter and setter for element Edges
	/**
	 * Getter methods for element idl_CommNavigationTopologyMap.edges of type vector<CommNavigationObjects::CommNavigationTopologyConnection>
	 */
	inline std::vector<CommNavigationObjects::CommNavigationTopologyConnection> getEdgesCopy() const { 
		return std::vector<CommNavigationObjects::CommNavigationTopologyConnection>(idl_CommNavigationTopologyMap.edges.begin(), idl_CommNavigationTopologyMap.edges.end());
	}
	inline CommNavigationObjects::CommNavigationTopologyConnection getEdgesElemAtPos(const size_t &pos) const {
		return CommNavigationObjects::CommNavigationTopologyConnection(idl_CommNavigationTopologyMap.edges[pos]);
	}
	inline size_t getEdgesSize() const { return idl_CommNavigationTopologyMap.edges.size(); }
	inline bool isEdgesEmpty() const { return idl_CommNavigationTopologyMap.edges.empty(); }
	/**
	 * Setter methods for idl_CommNavigationTopologyMap.edges of type vector<CommNavigationObjects::CommNavigationTopologyConnection>
	 */
	inline CommNavigationTopologyMapCore& setEdges(const std::vector<CommNavigationObjects::CommNavigationTopologyConnection> &edges) { 
		idl_CommNavigationTopologyMap.edges.assign(edges.begin(), edges.end());
		return *this;
	}
	inline bool setEdgesElemAtPos(const size_t &pos, const CommNavigationObjects::CommNavigationTopologyConnection &elem) {
		if(pos < idl_CommNavigationTopologyMap.edges.size()) {
			idl_CommNavigationTopologyMap.edges[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertEdgesVectorAtPos(const size_t &pos, const std::vector<CommNavigationObjects::CommNavigationTopologyConnection> &data) {
		if(pos < idl_CommNavigationTopologyMap.edges.size()) {
			idl_CommNavigationTopologyMap.edges.insert(idl_CommNavigationTopologyMap.edges.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeEdges(const size_t &size) { idl_CommNavigationTopologyMap.edges.resize(size); }
	inline bool eraseEdgesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommNavigationTopologyMap.edges.size() ) {
			idl_CommNavigationTopologyMap.edges.erase(idl_CommNavigationTopologyMap.edges.begin()+pos, idl_CommNavigationTopologyMap.edges.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearEdges() { idl_CommNavigationTopologyMap.edges.clear(); }
};

} /* namespace CommNavigationObjects */
#endif /* COMMNAVIGATIONOBJECTS_COMMNAVIGATIONTOPOLOGYMAP_CORE_H_ */
