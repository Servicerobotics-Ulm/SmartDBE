//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommNavigationObjects/CommPlannerGoalListCore.hh"

// serialization/deserialization operators
//#include "CommNavigationObjects/CommPlannerGoalListACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace CommNavigationObjects 
{
	const char* CommPlannerGoalListCore::getCompiledHash()
	{
		return CommNavigationObjectsIDL::REPO_HASH;
	}
	
	void CommPlannerGoalListCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
	}
	
	void CommPlannerGoalListCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "CommPlannerGoalListCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
	}
	
	#ifdef ENABLE_HASH
	size_t CommPlannerGoalListCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		boost::hash_combine(seed, data.id);
		boost::hash_combine(seed, data.flag);
		std::vector<ACE_CDR::Double>::const_iterator data_goalXvectorIt;
		for(data_goalXvectorIt=data.goalXvector.begin(); data_goalXvectorIt!=data.goalXvector.end(); data_goalXvectorIt++) {
			boost::hash_combine(seed, *data_goalXvectorIt);
		}
		std::vector<ACE_CDR::Double>::const_iterator data_goalYvectorIt;
		for(data_goalYvectorIt=data.goalYvector.begin(); data_goalYvectorIt!=data.goalYvector.end(); data_goalYvectorIt++) {
			boost::hash_combine(seed, *data_goalYvectorIt);
		}
		std::vector<ACE_CDR::Double>::const_iterator data_nodeObstacleVectorIt;
		for(data_nodeObstacleVectorIt=data.nodeObstacleVector.begin(); data_nodeObstacleVectorIt!=data.nodeObstacleVector.end(); data_nodeObstacleVectorIt++) {
			boost::hash_combine(seed, *data_nodeObstacleVectorIt);
		}
		boost::hash_combine(seed, data.finalGoalX);
		boost::hash_combine(seed, data.finalGoalY);
		
		return seed;
	}
	#endif
	
	// default constructor
	CommPlannerGoalListCore::CommPlannerGoalListCore()
	:	idl_CommPlannerGoalList()
	{  
		setId(0);
		setFlag(0);
		setGoalXvector(std::vector<double>());
		setGoalYvector(std::vector<double>());
		setNodeObstacleVector(std::vector<double>());
		setFinalGoalX(0.0);
		setFinalGoalY(0.0);
	}
	
	CommPlannerGoalListCore::CommPlannerGoalListCore(const DATATYPE &data)
	:	idl_CommPlannerGoalList(data)
	{  }

	CommPlannerGoalListCore::~CommPlannerGoalListCore()
	{  }
	
	void CommPlannerGoalListCore::to_ostream(std::ostream &os) const
	{
	  os << "CommPlannerGoalList(";
	  os << getId() << " ";
	  os << getFlag() << " ";
	  std::vector<double>::const_iterator goalXvectorIt;
	  std::vector<double> goalXvectorList = getGoalXvectorCopy();
	  for(goalXvectorIt=goalXvectorList.begin(); goalXvectorIt!=goalXvectorList.end(); goalXvectorIt++) {
	  	os << *goalXvectorIt << " ";
	  }
	  std::vector<double>::const_iterator goalYvectorIt;
	  std::vector<double> goalYvectorList = getGoalYvectorCopy();
	  for(goalYvectorIt=goalYvectorList.begin(); goalYvectorIt!=goalYvectorList.end(); goalYvectorIt++) {
	  	os << *goalYvectorIt << " ";
	  }
	  std::vector<double>::const_iterator nodeObstacleVectorIt;
	  std::vector<double> nodeObstacleVectorList = getNodeObstacleVectorCopy();
	  for(nodeObstacleVectorIt=nodeObstacleVectorList.begin(); nodeObstacleVectorIt!=nodeObstacleVectorList.end(); nodeObstacleVectorIt++) {
	  	os << *nodeObstacleVectorIt << " ";
	  }
	  os << getFinalGoalX() << " ";
	  os << getFinalGoalY() << " ";
	  os << ") ";
	}
	
	// convert to xml stream
	void CommPlannerGoalListCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		os << indent << "<id>" << getId() << "</id>";
		os << indent << "<flag>" << getFlag() << "</flag>";
		std::vector<double>::const_iterator goalXvectorIt;
		std::vector<double> goalXvectorList = getGoalXvectorCopy();
		counter = 0;
		os << indent << "<goalXvectorList n=\"" << goalXvectorList.size() << "\">";
		for(goalXvectorIt=goalXvectorList.begin(); goalXvectorIt!=goalXvectorList.end(); goalXvectorIt++) {
			os << indent << "<goalXvector i=\"" << counter++ << "\">" << *goalXvectorIt << "</goalXvector>";
		}
		os << indent << "</goalXvectorList>";
		std::vector<double>::const_iterator goalYvectorIt;
		std::vector<double> goalYvectorList = getGoalYvectorCopy();
		counter = 0;
		os << indent << "<goalYvectorList n=\"" << goalYvectorList.size() << "\">";
		for(goalYvectorIt=goalYvectorList.begin(); goalYvectorIt!=goalYvectorList.end(); goalYvectorIt++) {
			os << indent << "<goalYvector i=\"" << counter++ << "\">" << *goalYvectorIt << "</goalYvector>";
		}
		os << indent << "</goalYvectorList>";
		std::vector<double>::const_iterator nodeObstacleVectorIt;
		std::vector<double> nodeObstacleVectorList = getNodeObstacleVectorCopy();
		counter = 0;
		os << indent << "<nodeObstacleVectorList n=\"" << nodeObstacleVectorList.size() << "\">";
		for(nodeObstacleVectorIt=nodeObstacleVectorList.begin(); nodeObstacleVectorIt!=nodeObstacleVectorList.end(); nodeObstacleVectorIt++) {
			os << indent << "<nodeObstacleVector i=\"" << counter++ << "\">" << *nodeObstacleVectorIt << "</nodeObstacleVector>";
		}
		os << indent << "</nodeObstacleVectorList>";
		os << indent << "<finalGoalX>" << getFinalGoalX() << "</finalGoalX>";
		os << indent << "<finalGoalY>" << getFinalGoalY() << "</finalGoalY>";
	}
	
	// restore from xml stream
	void CommPlannerGoalListCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_id("<id>");
		static const Smart::KnuthMorrisPratt kmp_flag("<flag>");
		static const Smart::KnuthMorrisPratt kmp_goalXvectorList("<goalXvectorList n=\"");
		static const Smart::KnuthMorrisPratt kmp_goalXvector("\">");
		static const Smart::KnuthMorrisPratt kmp_goalYvectorList("<goalYvectorList n=\"");
		static const Smart::KnuthMorrisPratt kmp_goalYvector("\">");
		static const Smart::KnuthMorrisPratt kmp_nodeObstacleVectorList("<nodeObstacleVectorList n=\"");
		static const Smart::KnuthMorrisPratt kmp_nodeObstacleVector("\">");
		static const Smart::KnuthMorrisPratt kmp_finalGoalX("<finalGoalX>");
		static const Smart::KnuthMorrisPratt kmp_finalGoalY("<finalGoalY>");
		
		if(kmp_id.search(is)) {
			int idItem;
			is >> idItem;
			setId(idItem);
		}
		if(kmp_flag.search(is)) {
			int flagItem;
			is >> flagItem;
			setFlag(flagItem);
		}
		if(kmp_goalXvectorList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double goalXvectorItem;
			std::vector<double> goalXvectorList;
			kmp_goalXvector.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_goalXvector.search(is)) {
					is >> goalXvectorItem;
					goalXvectorList.push_back(goalXvectorItem);
				}
			}
			setGoalXvector(goalXvectorList);
		}
		if(kmp_goalYvectorList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double goalYvectorItem;
			std::vector<double> goalYvectorList;
			kmp_goalYvector.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_goalYvector.search(is)) {
					is >> goalYvectorItem;
					goalYvectorList.push_back(goalYvectorItem);
				}
			}
			setGoalYvector(goalYvectorList);
		}
		if(kmp_nodeObstacleVectorList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double nodeObstacleVectorItem;
			std::vector<double> nodeObstacleVectorList;
			kmp_nodeObstacleVector.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_nodeObstacleVector.search(is)) {
					is >> nodeObstacleVectorItem;
					nodeObstacleVectorList.push_back(nodeObstacleVectorItem);
				}
			}
			setNodeObstacleVector(nodeObstacleVectorList);
		}
		if(kmp_finalGoalX.search(is)) {
			double finalGoalXItem;
			is >> finalGoalXItem;
			setFinalGoalX(finalGoalXItem);
		}
		if(kmp_finalGoalY.search(is)) {
			double finalGoalYItem;
			is >> finalGoalYItem;
			setFinalGoalY(finalGoalYItem);
		}
	}
	
	/*
	void CommPlannerGoalListCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		CommNavigationObjectsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(CommNavigationObjectsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see CommPlannerGoalListACE.hh)
		cdr << idl_CommPlannerGoalList;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_CommPlannerGoalList);
		cdr << data_hash;
		// std::cout << "CommPlannerGoalListCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void CommPlannerGoalListCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		CommNavigationObjectsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see CommPlannerGoalListACE.hh)
		cdr >> idl_CommPlannerGoalList;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_CommPlannerGoalList);
		assert(data_hash == own_hash);
		// std::cout << "CommPlannerGoalListCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace CommNavigationObjects */
