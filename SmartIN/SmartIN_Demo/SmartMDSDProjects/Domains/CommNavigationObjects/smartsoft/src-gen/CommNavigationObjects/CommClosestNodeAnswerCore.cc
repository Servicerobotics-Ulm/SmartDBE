//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommNavigationObjects/CommClosestNodeAnswerCore.hh"

// serialization/deserialization operators
//#include "CommNavigationObjects/CommClosestNodeAnswerACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace CommNavigationObjects 
{
	const char* CommClosestNodeAnswerCore::getCompiledHash()
	{
		return CommNavigationObjectsIDL::REPO_HASH;
	}
	
	void CommClosestNodeAnswerCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for CommBasicObjects::CommPosition3d(idl_CommClosestNodeAnswer.position)
		CommBasicObjects::CommPosition3d::getAllHashValues(hashes);
	}
	
	void CommClosestNodeAnswerCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "CommClosestNodeAnswerCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for CommBasicObjects::CommPosition3d(idl_CommClosestNodeAnswer.position)
		CommBasicObjects::CommPosition3d::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t CommClosestNodeAnswerCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		boost::hash_combine(seed, data.node_id);
		seed += CommBasicObjects::CommPosition3d::generateDataHash(data.position);
		boost::hash_combine(seed, data.distance);
		boost::hash_combine(seed, data.valid);
		
		return seed;
	}
	#endif
	
	// default constructor
	CommClosestNodeAnswerCore::CommClosestNodeAnswerCore()
	:	idl_CommClosestNodeAnswer()
	{  
		setNode_id(0);
		setPosition(CommBasicObjects::CommPosition3d());
		setDistance(0.0);
		setValid(false);
	}
	
	CommClosestNodeAnswerCore::CommClosestNodeAnswerCore(const DATATYPE &data)
	:	idl_CommClosestNodeAnswer(data)
	{  }

	CommClosestNodeAnswerCore::~CommClosestNodeAnswerCore()
	{  }
	
	void CommClosestNodeAnswerCore::to_ostream(std::ostream &os) const
	{
	  os << "CommClosestNodeAnswer(";
	  os << getNode_id() << " ";
	  getPosition().to_ostream(os);
	  os << getDistance() << " ";
	  os << getValid() << " ";
	  os << ") ";
	}
	
	// convert to xml stream
	void CommClosestNodeAnswerCore::to_xml(std::ostream &os, const std::string &indent) const {
		os << indent << "<node_id>" << getNode_id() << "</node_id>";
		os << indent << "<position>";
		getPosition().to_xml(os, indent);
		os << indent << "</position>";
		os << indent << "<distance>" << getDistance() << "</distance>";
		os << indent << "<valid>" << getValid() << "</valid>";
	}
	
	// restore from xml stream
	void CommClosestNodeAnswerCore::from_xml(std::istream &is) {
		static const Smart::KnuthMorrisPratt kmp_node_id("<node_id>");
		static const Smart::KnuthMorrisPratt kmp_position("<position>");
		static const Smart::KnuthMorrisPratt kmp_distance("<distance>");
		static const Smart::KnuthMorrisPratt kmp_valid("<valid>");
		
		if(kmp_node_id.search(is)) {
			int node_idItem;
			is >> node_idItem;
			setNode_id(node_idItem);
		}
		if(kmp_position.search(is)) {
			CommBasicObjects::CommPosition3d positionItem;
			positionItem.from_xml(is);
			setPosition(positionItem);
		}
		if(kmp_distance.search(is)) {
			double distanceItem;
			is >> distanceItem;
			setDistance(distanceItem);
		}
		if(kmp_valid.search(is)) {
			bool validItem;
			is >> validItem;
			setValid(validItem);
		}
	}
	
	/*
	void CommClosestNodeAnswerCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		CommNavigationObjectsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(CommNavigationObjectsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see CommClosestNodeAnswerACE.hh)
		cdr << idl_CommClosestNodeAnswer;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_CommClosestNodeAnswer);
		cdr << data_hash;
		// std::cout << "CommClosestNodeAnswerCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void CommClosestNodeAnswerCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		CommNavigationObjectsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see CommClosestNodeAnswerACE.hh)
		cdr >> idl_CommClosestNodeAnswer;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_CommClosestNodeAnswer);
		assert(data_hash == own_hash);
		// std::cout << "CommClosestNodeAnswerCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace CommNavigationObjects */
