//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMNAVIGATIONOBJECTS_COMMNAVIGATIONGRAPHVERTEX_CORE_H_
#define COMMNAVIGATIONOBJECTS_COMMNAVIGATIONGRAPHVERTEX_CORE_H_

#include "CommNavigationObjects/CommNavigationGraphVertexData.hh"
#include "CommNavigationObjects/enumNODE_TYPE.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommNavigationObjects {
	
class CommNavigationGraphVertexCore {
protected:
	// data structure
	CommNavigationObjectsIDL::CommNavigationGraphVertex idl_CommNavigationGraphVertex;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommNavigationObjectsIDL::CommNavigationGraphVertex DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommNavigationGraphVertexCore();
	CommNavigationGraphVertexCore(const DATATYPE &data);
	// default destructor
	virtual ~CommNavigationGraphVertexCore();
	
	const DATATYPE& get() const { return idl_CommNavigationGraphVertex; }
	operator const DATATYPE&() const { return idl_CommNavigationGraphVertex; }
	DATATYPE& set() { return idl_CommNavigationGraphVertex; }

	static inline std::string identifier(void) { return "CommNavigationObjects::CommNavigationGraphVertex"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element X
	inline double getX() const { return idl_CommNavigationGraphVertex.x; }
	inline CommNavigationGraphVertexCore& setX(const double &x) { idl_CommNavigationGraphVertex.x = x; return *this; }
	
	// getter and setter for element Y
	inline double getY() const { return idl_CommNavigationGraphVertex.y; }
	inline CommNavigationGraphVertexCore& setY(const double &y) { idl_CommNavigationGraphVertex.y = y; return *this; }
	
	// getter and setter for element Pose
	inline int getPose() const { return idl_CommNavigationGraphVertex.pose; }
	inline CommNavigationGraphVertexCore& setPose(const int &pose) { idl_CommNavigationGraphVertex.pose = pose; return *this; }
	
	// getter and setter for element Path
	inline int getPath() const { return idl_CommNavigationGraphVertex.path; }
	inline CommNavigationGraphVertexCore& setPath(const int &path) { idl_CommNavigationGraphVertex.path = path; return *this; }
	
	// getter and setter for element Width
	inline double getWidth() const { return idl_CommNavigationGraphVertex.width; }
	inline CommNavigationGraphVertexCore& setWidth(const double &width) { idl_CommNavigationGraphVertex.width = width; return *this; }
	
	// getter and setter for element Type
	inline CommNavigationObjects::NODE_TYPE getType() const { return CommNavigationObjects::NODE_TYPE(idl_CommNavigationGraphVertex.type); }
	inline CommNavigationGraphVertexCore& setType(const CommNavigationObjects::NODE_TYPE &type) { idl_CommNavigationGraphVertex.type = type; return *this; }
	
	// getter and setter for element Intersec_path
	/**
	 * Getter methods for idl_CommNavigationGraphVertex.intersec_path of type vector<int>
	 */
	inline std::vector<int>& getIntersec_pathRef() { return idl_CommNavigationGraphVertex.intersec_path; }
	inline std::vector<int> getIntersec_pathCopy() const {
		return std::vector<int>(idl_CommNavigationGraphVertex.intersec_path.begin(), idl_CommNavigationGraphVertex.intersec_path.end());
	}
	inline int getIntersec_pathElemAtPos(const size_t &pos) const { return idl_CommNavigationGraphVertex.intersec_path[pos]; }
	inline size_t getIntersec_pathSize() const { return idl_CommNavigationGraphVertex.intersec_path.size(); }
	inline bool isIntersec_pathEmpty() const { return idl_CommNavigationGraphVertex.intersec_path.empty(); }
	/**
	 * Setter methods for idl_CommNavigationGraphVertex.intersec_path of type vector<int>
	 */
	inline CommNavigationGraphVertexCore& setIntersec_path(const std::vector<int> &intersec_path) { idl_CommNavigationGraphVertex.intersec_path = intersec_path; return *this; }
	inline bool setIntersec_pathElemAtPos(const size_t &pos, const int &elem) {
		if(pos < idl_CommNavigationGraphVertex.intersec_path.size()) {
			idl_CommNavigationGraphVertex.intersec_path[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertIntersec_pathVectorAtPos(const size_t &pos, const std::vector<int> &data) {
		if(pos < idl_CommNavigationGraphVertex.intersec_path.size()) {
			idl_CommNavigationGraphVertex.intersec_path.insert(idl_CommNavigationGraphVertex.intersec_path.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeIntersec_path(const size_t &size) { idl_CommNavigationGraphVertex.intersec_path.resize(size); }
	inline bool eraseIntersec_pathElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommNavigationGraphVertex.intersec_path.size() ) {
			idl_CommNavigationGraphVertex.intersec_path.erase(idl_CommNavigationGraphVertex.intersec_path.begin()+pos, idl_CommNavigationGraphVertex.intersec_path.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearIntersec_path() { idl_CommNavigationGraphVertex.intersec_path.clear(); }
};

} /* namespace CommNavigationObjects */
#endif /* COMMNAVIGATIONOBJECTS_COMMNAVIGATIONGRAPHVERTEX_CORE_H_ */
