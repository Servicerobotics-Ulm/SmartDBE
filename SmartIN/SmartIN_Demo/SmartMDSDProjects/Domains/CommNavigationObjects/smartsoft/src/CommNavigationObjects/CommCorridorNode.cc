//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "CommNavigationObjects/CommCorridorNode.hh"

using namespace CommNavigationObjects;

CommCorridorNode::CommCorridorNode()
:	CommCorridorNodeCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
CommCorridorNode::CommCorridorNode(const unsigned int &id, const double &x, const double &y, const unsigned int &pose, const unsigned int &path, const double &width, const CommNavigationObjects::NODE_TYPE &type, const CommNavigationObjects::NODE_STATUS &sts, const std::string &robotID)
:	CommCorridorNodeCore() // base constructor sets default values as defined in the model
{
	setId(id);
	setX(x);
	setY(y);
	setPose(pose);
	setPath(path);
	setWidth(width);
	setType(type);
	setSts(sts);
	setRobotID(robotID);
}
 */

CommCorridorNode::CommCorridorNode(const CommCorridorNodeCore &commCorridorNode)
:	CommCorridorNodeCore(commCorridorNode)
{  }

CommCorridorNode::CommCorridorNode(const DATATYPE &commCorridorNode)
:	CommCorridorNodeCore(commCorridorNode)
{  }

CommCorridorNode::~CommCorridorNode()
{  }

CommCorridorNode::CommCorridorNode(const graphNode &commPathNode){
	this->setId(commPathNode.id);
	this->setPath(commPathNode.path);
	this->setStsTGraphNode(commPathNode.sts);
	this->setTypeTGraphNode(commPathNode.type);
	this->setX(commPathNode.x);
	this->setY(commPathNode.y);
	this->setWidth(commPathNode.width);
	this->setPose(commPathNode.pose);
	this->setRobotID(commPathNode.robotID);
}

graphNode CommCorridorNode::getNodeTGraphNode(){
	graphNode node;
	node.id = this->getId();
	node.path = this->getPath();
	node.sts = this->getStsTGraphNode();
	node.type = this->getTypeTGraphNode();
	node.width = this->getWidth();
	node.x = this->getX();
	node.y = this->getY();
	node.pose = this->getPose();
	node.robotID = this->getRobotID();
	return node;
}

void CommCorridorNode::setStsTGraphNode(node_status sts){
	if (sts == AVAILABLE){
		this->setSts(CommNavigationObjects::NODE_STATUS::AVAILABLE);
	} else if (sts == OCCUPIED){
		this->setSts(CommNavigationObjects::NODE_STATUS::OCCUPIED);
	} else if (sts == OK){
		this->setSts(CommNavigationObjects::NODE_STATUS::OK);
	}
}

void CommCorridorNode::setTypeTGraphNode(node_type type){
	if (type == CROSS){
		this->setType(CommNavigationObjects::NODE_TYPE::CROSS);
	} else if (type == NORMAL){
		this->setType(CommNavigationObjects::NODE_TYPE::NORMAL);
	} else if (type == WAIT){
		this->setType(CommNavigationObjects::NODE_TYPE::WAIT);
	}
}


node_status CommCorridorNode::getStsTGraphNode(){
	node_status sts;
	if (this->getSts() == CommNavigationObjects::NODE_STATUS::AVAILABLE){
		sts = AVAILABLE;
	} else if (this->getSts() == CommNavigationObjects::NODE_STATUS::OCCUPIED){
		sts = OCCUPIED;
	} else if (this->getSts() == CommNavigationObjects::NODE_STATUS::OK){
		sts = OK;
	}
	return sts;
}

node_type CommCorridorNode::getTypeTGraphNode(){
	node_type type;
	if (this->getType() == CommNavigationObjects::NODE_TYPE::CROSS){
		type = CROSS;
	} else if (this->getType() == CommNavigationObjects::NODE_TYPE::NORMAL){
		type = NORMAL;
	} else if (this->getType() == CommNavigationObjects::NODE_TYPE::WAIT){
		type = WAIT;
	}
	return type;
}
