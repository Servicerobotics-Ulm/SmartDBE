//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "SmartInstitutionsServiceRepository/EnforcementReportPackageACE.hh"
#include <ace/SString.h>
#include "SmartInstitutionsServiceRepository/PackageIdentifierACE.hh"
#include "SmartInstitutionsServiceRepository/MemberIdentifierACE.hh"
#include "SmartInstitutionsServiceRepository/InstitutionStatusACE.hh"

// serialization operator for element EnforcementReportPackage
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const SmartInstitutionsServiceRepositoryIDL::EnforcementReportPackage &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element id
	good_bit = good_bit && cdr << data.id;
	// serialize list-element to
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.to.size());
	std::vector<SmartInstitutionsServiceRepositoryIDL::MemberIdentifier>::const_iterator data_toIt;
	for(data_toIt=data.to.begin(); data_toIt!=data.to.end(); data_toIt++) {
		good_bit = good_bit && cdr << *data_toIt;
	}
	// serialize list-element from
	good_bit = good_bit && cdr << data.from;
	// serialize list-element report
	good_bit = good_bit && cdr << data.report;
	// serialize list-element text
	good_bit = good_bit && cdr << ACE_CString(data.text.c_str());
	
	return good_bit;
}

// de-serialization operator for element EnforcementReportPackage
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, SmartInstitutionsServiceRepositoryIDL::EnforcementReportPackage &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element id
	good_bit = good_bit && cdr >> data.id;
	// deserialize list-type element to
	ACE_CDR::ULong data_toNbr;
	good_bit = good_bit && cdr >> data_toNbr;
	data.to.clear();
	SmartInstitutionsServiceRepositoryIDL::MemberIdentifier data_toItem;
	for(ACE_CDR::ULong i=0; i<data_toNbr; ++i) {
		good_bit = good_bit && cdr >> data_toItem;
		data.to.push_back(data_toItem);
	}
	// deserialize type element from
	good_bit = good_bit && cdr >> data.from;
	// deserialize type element report
	good_bit = good_bit && cdr >> data.report;
	// deserialize string-type element text
	ACE_CString data_text_str;
	good_bit = good_bit && cdr >> data_text_str;
	data.text = data_text_str.c_str();
	
	return good_bit;
}

// serialization operator for CommunicationObject EnforcementReportPackage
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const SmartInstitutionsServiceRepository::EnforcementReportPackage &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject EnforcementReportPackage
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, SmartInstitutionsServiceRepository::EnforcementReportPackage &obj)
{
	return cdr >> obj.set();
}
