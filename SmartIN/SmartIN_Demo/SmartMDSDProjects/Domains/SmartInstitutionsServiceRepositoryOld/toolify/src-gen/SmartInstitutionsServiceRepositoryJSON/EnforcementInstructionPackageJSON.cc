//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "EnforcementInstructionPackageJSON.hh"

#include "SmartInstitutionsServiceRepositoryJSON/PackageIdentifierJSON.hh"
#include "SmartInstitutionsServiceRepositoryJSON/MemberIdentifierJSON.hh"
#include "SmartInstitutionsServiceRepositoryJSON/MemberIdentifierJSON.hh"
#include "SmartInstitutionsServiceRepositoryJSON/InstitutionStatusJSON.hh"

namespace SmartInstitutionsServiceRepositoryIDL {

void to_json(const SmartInstitutionsServiceRepositoryIDL::EnforcementInstructionPackage& obj, nlohmann::json& j)
{
	// id: PackageIdentifier
	to_json(obj.id, j["id"]);
	// to: MemberIdentifier[]
	for(size_t idx=0; idx < obj.to.size(); idx++) {
		nlohmann::json array_element;
		to_json(obj.to.at(idx), array_element);
		j["to"].emplace_back(array_element);
	}
	// from: MemberIdentifier
	to_json(obj.from, j["from"]);
	// context: InstitutionStatus
	to_json(obj.context, j["context"]);
	// instruction: EnforcementInstruction
	j["instruction"] = obj.instruction;
	// ifCustom: String
	j["ifCustom"] = obj.ifCustom;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, SmartInstitutionsServiceRepositoryIDL::EnforcementInstructionPackage& obj)
{
	// id: PackageIdentifier
	if(j.contains("id") && j["id"].is_object()) {
		//from_json(j["id"], obj.id);
		obj.id = j["id"].get<SmartInstitutionsServiceRepositoryIDL::PackageIdentifier>();
	}
	// to: MemberIdentifier[]
	if(j.contains("to") && j["to"].is_array()) {
		auto jto = j["to"];
		obj.to.resize(jto.size());
		for(size_t idx=0; idx < jto.size(); idx++) {
			// convert the json array values individually
			if(jto.at(idx).is_object()) {
				// from_json(jto.at(idx), obj.to.at(idx));
				obj.to[idx] = jto[idx].get<SmartInstitutionsServiceRepositoryIDL::MemberIdentifier>();
			}
		}
	}
	// from: MemberIdentifier
	if(j.contains("from") && j["from"].is_object()) {
		//from_json(j["from"], obj.from);
		obj.from = j["from"].get<SmartInstitutionsServiceRepositoryIDL::MemberIdentifier>();
	}
	// context: InstitutionStatus
	if(j.contains("context") && j["context"].is_object()) {
		//from_json(j["context"], obj.context);
		obj.context = j["context"].get<SmartInstitutionsServiceRepositoryIDL::InstitutionStatus>();
	}
	// instruction: EnforcementInstruction
	if(j.contains("instruction") && j["instruction"].is_number_integer()) {
		obj.instruction = j["instruction"].get<int>();
	}
	// ifCustom: String
	if(j.contains("ifCustom") && j["ifCustom"].is_string()) {
		obj.ifCustom = j["ifCustom"].get<std::string>();
	}
}

} // end namespace SmartInstitutionsServiceRepositoryIDL
