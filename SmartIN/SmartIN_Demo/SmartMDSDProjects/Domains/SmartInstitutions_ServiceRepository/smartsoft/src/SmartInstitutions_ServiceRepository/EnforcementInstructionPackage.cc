//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "SmartInstitutions_ServiceRepository/EnforcementInstructionPackage.hh"

using namespace SmartInstitutions_ServiceRepository;

EnforcementInstructionPackage::EnforcementInstructionPackage()
:	EnforcementInstructionPackageCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
EnforcementInstructionPackage::EnforcementInstructionPackage(const SmartInstitutions_ServiceRepository::MemberIdentifier &targetInstitutionMemebr, const SmartInstitutions_ServiceRepository::EnforcerIdentifier &institutionEnforcer, const CommBasicObjects::CommTimeStamp &timestampe, const CommBasicObjects::CommBasePose &baseOdomPose, const CommBasicObjects::CommBaseVelocity &baseVelocity, const CommBasicObjects::CommBaseVelocity &baseOdomVelocity, const CommBasicObjects::CommBatteryLevel &batteryState, const CommBasicObjects::CommBumperState &baseBumperState)
:	EnforcementInstructionPackageCore() // base constructor sets default values as defined in the model
{
	setTargetInstitutionMemebr(targetInstitutionMemebr);
	setInstitutionEnforcer(institutionEnforcer);
	setTimestampe(timestampe);
	setBaseOdomPose(baseOdomPose);
	setBaseVelocity(baseVelocity);
	setBaseOdomVelocity(baseOdomVelocity);
	setBatteryState(batteryState);
	setBaseBumperState(baseBumperState);
}
 */

EnforcementInstructionPackage::EnforcementInstructionPackage(const EnforcementInstructionPackageCore &enforcementInstructionPackage)
:	EnforcementInstructionPackageCore(enforcementInstructionPackage)
{  }

EnforcementInstructionPackage::EnforcementInstructionPackage(const DATATYPE &enforcementInstructionPackage)
:	EnforcementInstructionPackageCore(enforcementInstructionPackage)
{  }

EnforcementInstructionPackage::~EnforcementInstructionPackage()
{  }
