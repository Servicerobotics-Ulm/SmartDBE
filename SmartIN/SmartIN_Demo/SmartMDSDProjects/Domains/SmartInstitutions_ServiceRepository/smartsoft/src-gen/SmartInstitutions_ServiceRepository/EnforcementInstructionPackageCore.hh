//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef SMARTINSTITUTIONS_SERVICEREPOSITORY_ENFORCEMENTINSTRUCTIONPACKAGE_CORE_H_
#define SMARTINSTITUTIONS_SERVICEREPOSITORY_ENFORCEMENTINSTRUCTIONPACKAGE_CORE_H_

#include "SmartInstitutions_ServiceRepository/EnforcementInstructionPackageData.hh"
#include "SmartInstitutions_ServiceRepository/InstitutionStatus.hh"
#include "SmartInstitutions_ServiceRepository/enumEnforcementInstruction.hh"
#include "SmartInstitutions_ServiceRepository/MemberIdentifier.hh"
#include "SmartInstitutions_ServiceRepository/PackageIdentifier.hh"

#include <iostream>
#include <string>
#include <list>

namespace SmartInstitutions_ServiceRepository {
	
class EnforcementInstructionPackageCore {
protected:
	// data structure
	SmartInstitutions_ServiceRepositoryIDL::EnforcementInstructionPackage idl_EnforcementInstructionPackage;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef SmartInstitutions_ServiceRepositoryIDL::EnforcementInstructionPackage DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	EnforcementInstructionPackageCore();
	EnforcementInstructionPackageCore(const DATATYPE &data);
	// default destructor
	virtual ~EnforcementInstructionPackageCore();
	
	const DATATYPE& get() const { return idl_EnforcementInstructionPackage; }
	operator const DATATYPE&() const { return idl_EnforcementInstructionPackage; }
	DATATYPE& set() { return idl_EnforcementInstructionPackage; }

	static inline std::string identifier(void) { return "SmartInstitutions_ServiceRepository::EnforcementInstructionPackage"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Id
	inline SmartInstitutions_ServiceRepository::PackageIdentifier getId() const { return SmartInstitutions_ServiceRepository::PackageIdentifier(idl_EnforcementInstructionPackage.id); }
	inline EnforcementInstructionPackageCore& setId(const SmartInstitutions_ServiceRepository::PackageIdentifier &id) { idl_EnforcementInstructionPackage.id = id; return *this; }
	
	// getter and setter for element To
	/**
	 * Getter methods for element idl_EnforcementInstructionPackage.to of type vector<SmartInstitutions_ServiceRepository::MemberIdentifier>
	 */
	inline std::vector<SmartInstitutions_ServiceRepository::MemberIdentifier> getToCopy() const { 
		return std::vector<SmartInstitutions_ServiceRepository::MemberIdentifier>(idl_EnforcementInstructionPackage.to.begin(), idl_EnforcementInstructionPackage.to.end());
	}
	inline SmartInstitutions_ServiceRepository::MemberIdentifier getToElemAtPos(const size_t &pos) const {
		return SmartInstitutions_ServiceRepository::MemberIdentifier(idl_EnforcementInstructionPackage.to[pos]);
	}
	inline size_t getToSize() const { return idl_EnforcementInstructionPackage.to.size(); }
	inline bool isToEmpty() const { return idl_EnforcementInstructionPackage.to.empty(); }
	/**
	 * Setter methods for idl_EnforcementInstructionPackage.to of type vector<SmartInstitutions_ServiceRepository::MemberIdentifier>
	 */
	inline EnforcementInstructionPackageCore& setTo(const std::vector<SmartInstitutions_ServiceRepository::MemberIdentifier> &to) { 
		idl_EnforcementInstructionPackage.to.assign(to.begin(), to.end());
		return *this;
	}
	inline bool setToElemAtPos(const size_t &pos, const SmartInstitutions_ServiceRepository::MemberIdentifier &elem) {
		if(pos < idl_EnforcementInstructionPackage.to.size()) {
			idl_EnforcementInstructionPackage.to[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertToVectorAtPos(const size_t &pos, const std::vector<SmartInstitutions_ServiceRepository::MemberIdentifier> &data) {
		if(pos < idl_EnforcementInstructionPackage.to.size()) {
			idl_EnforcementInstructionPackage.to.insert(idl_EnforcementInstructionPackage.to.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeTo(const size_t &size) { idl_EnforcementInstructionPackage.to.resize(size); }
	inline bool eraseToElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_EnforcementInstructionPackage.to.size() ) {
			idl_EnforcementInstructionPackage.to.erase(idl_EnforcementInstructionPackage.to.begin()+pos, idl_EnforcementInstructionPackage.to.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearTo() { idl_EnforcementInstructionPackage.to.clear(); }
	
	// getter and setter for element From
	inline SmartInstitutions_ServiceRepository::MemberIdentifier getFrom() const { return SmartInstitutions_ServiceRepository::MemberIdentifier(idl_EnforcementInstructionPackage.from); }
	inline EnforcementInstructionPackageCore& setFrom(const SmartInstitutions_ServiceRepository::MemberIdentifier &from) { idl_EnforcementInstructionPackage.from = from; return *this; }
	
	// getter and setter for element Context
	inline SmartInstitutions_ServiceRepository::InstitutionStatus getContext() const { return SmartInstitutions_ServiceRepository::InstitutionStatus(idl_EnforcementInstructionPackage.context); }
	inline EnforcementInstructionPackageCore& setContext(const SmartInstitutions_ServiceRepository::InstitutionStatus &context) { idl_EnforcementInstructionPackage.context = context; return *this; }
	
	// getter and setter for element Instruction
	inline SmartInstitutions_ServiceRepository::EnforcementInstruction getInstruction() const { return SmartInstitutions_ServiceRepository::EnforcementInstruction(idl_EnforcementInstructionPackage.instruction); }
	inline EnforcementInstructionPackageCore& setInstruction(const SmartInstitutions_ServiceRepository::EnforcementInstruction &instruction) { idl_EnforcementInstructionPackage.instruction = instruction; return *this; }
	
	// getter and setter for element IfCustom
	inline std::string getIfCustom() const { return idl_EnforcementInstructionPackage.ifCustom; }
	inline EnforcementInstructionPackageCore& setIfCustom(const std::string &ifCustom) { idl_EnforcementInstructionPackage.ifCustom = ifCustom; return *this; }
};

} /* namespace SmartInstitutions_ServiceRepository */
#endif /* SMARTINSTITUTIONS_SERVICEREPOSITORY_ENFORCEMENTINSTRUCTIONPACKAGE_CORE_H_ */
