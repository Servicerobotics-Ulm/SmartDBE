//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "SmartInstitutions_ServiceRepository/InstitutionStatusACE.hh"
#include <ace/SString.h>
#include "SmartInstitutions_ServiceRepository/MemberIdentifierACE.hh"
#include "SmartInstitutions_ServiceRepository/InstitutionIdentifierACE.hh"
#include "CommBasicObjects/CommTimeStampACE.hh"
#include "SmartInstitutions_ServiceRepository/enumInstitutionCategoryData.hh"
#include "SmartInstitutions_ServiceRepository/enumInstitutionTypeData.hh"
#include "SmartInstitutions_ServiceRepository/enumInstitutionPhaseData.hh"

// serialization operator for element InstitutionStatus
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const SmartInstitutions_ServiceRepositoryIDL::InstitutionStatus &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element institute
	good_bit = good_bit && cdr << data.institute;
	// serialize list-element category
	good_bit = good_bit && cdr.write_long(data.category);
	// serialize list-element type
	good_bit = good_bit && cdr.write_long(data.type);
	// serialize list-element institutionMembers
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.institutionMembers.size());
	std::vector<SmartInstitutions_ServiceRepositoryIDL::MemberIdentifier>::const_iterator data_institutionMembersIt;
	for(data_institutionMembersIt=data.institutionMembers.begin(); data_institutionMembersIt!=data.institutionMembers.end(); data_institutionMembersIt++) {
		good_bit = good_bit && cdr << *data_institutionMembersIt;
	}
	// serialize list-element institutionEnforcers
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.institutionEnforcers.size());
	std::vector<SmartInstitutions_ServiceRepositoryIDL::MemberIdentifier>::const_iterator data_institutionEnforcersIt;
	for(data_institutionEnforcersIt=data.institutionEnforcers.begin(); data_institutionEnforcersIt!=data.institutionEnforcers.end(); data_institutionEnforcersIt++) {
		good_bit = good_bit && cdr << *data_institutionEnforcersIt;
	}
	// serialize list-element phase
	good_bit = good_bit && cdr.write_long(data.phase);
	// serialize list-element signed_at
	good_bit = good_bit && cdr << data.signed_at;
	// serialize list-element signed_by
	good_bit = good_bit && cdr << data.signed_by;
	
	return good_bit;
}

// de-serialization operator for element InstitutionStatus
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, SmartInstitutions_ServiceRepositoryIDL::InstitutionStatus &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element institute
	good_bit = good_bit && cdr >> data.institute;
	// deserialize type element category
	good_bit = good_bit && cdr.read_long(data.category);
	// deserialize type element type
	good_bit = good_bit && cdr.read_long(data.type);
	// deserialize list-type element institutionMembers
	ACE_CDR::ULong data_institutionMembersNbr;
	good_bit = good_bit && cdr >> data_institutionMembersNbr;
	data.institutionMembers.clear();
	SmartInstitutions_ServiceRepositoryIDL::MemberIdentifier data_institutionMembersItem;
	for(ACE_CDR::ULong i=0; i<data_institutionMembersNbr; ++i) {
		good_bit = good_bit && cdr >> data_institutionMembersItem;
		data.institutionMembers.push_back(data_institutionMembersItem);
	}
	// deserialize list-type element institutionEnforcers
	ACE_CDR::ULong data_institutionEnforcersNbr;
	good_bit = good_bit && cdr >> data_institutionEnforcersNbr;
	data.institutionEnforcers.clear();
	SmartInstitutions_ServiceRepositoryIDL::MemberIdentifier data_institutionEnforcersItem;
	for(ACE_CDR::ULong i=0; i<data_institutionEnforcersNbr; ++i) {
		good_bit = good_bit && cdr >> data_institutionEnforcersItem;
		data.institutionEnforcers.push_back(data_institutionEnforcersItem);
	}
	// deserialize type element phase
	good_bit = good_bit && cdr.read_long(data.phase);
	// deserialize type element signed_at
	good_bit = good_bit && cdr >> data.signed_at;
	// deserialize type element signed_by
	good_bit = good_bit && cdr >> data.signed_by;
	
	return good_bit;
}

// serialization operator for CommunicationObject InstitutionStatus
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const SmartInstitutions_ServiceRepository::InstitutionStatus &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject InstitutionStatus
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, SmartInstitutions_ServiceRepository::InstitutionStatus &obj)
{
	return cdr >> obj.set();
}
