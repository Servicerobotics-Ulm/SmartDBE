//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "SmartInstitutions_ServiceRepository/EnforcementInstructionPackageCore.hh"

// serialization/deserialization operators
//#include "SmartInstitutions_ServiceRepository/EnforcementInstructionPackageACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace SmartInstitutions_ServiceRepository 
{
	const char* EnforcementInstructionPackageCore::getCompiledHash()
	{
		return SmartInstitutions_ServiceRepositoryIDL::REPO_HASH;
	}
	
	void EnforcementInstructionPackageCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for SmartInstitutions_ServiceRepository::PackageIdentifier(idl_EnforcementInstructionPackage.id)
		SmartInstitutions_ServiceRepository::PackageIdentifier::getAllHashValues(hashes);
		// get hash value(s) for SmartInstitutions_ServiceRepository::MemberIdentifier(idl_EnforcementInstructionPackage.to)
		SmartInstitutions_ServiceRepository::MemberIdentifier::getAllHashValues(hashes);
		// get hash value(s) for SmartInstitutions_ServiceRepository::MemberIdentifier(idl_EnforcementInstructionPackage.from)
		SmartInstitutions_ServiceRepository::MemberIdentifier::getAllHashValues(hashes);
		// get hash value(s) for SmartInstitutions_ServiceRepository::InstitutionStatus(idl_EnforcementInstructionPackage.context)
		SmartInstitutions_ServiceRepository::InstitutionStatus::getAllHashValues(hashes);
	}
	
	void EnforcementInstructionPackageCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "EnforcementInstructionPackageCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for SmartInstitutions_ServiceRepository::PackageIdentifier(idl_EnforcementInstructionPackage.id)
		SmartInstitutions_ServiceRepository::PackageIdentifier::checkAllHashValues(hashes);
		// check hash value(s) for SmartInstitutions_ServiceRepository::MemberIdentifier(idl_EnforcementInstructionPackage.to)
		SmartInstitutions_ServiceRepository::MemberIdentifier::checkAllHashValues(hashes);
		// check hash value(s) for SmartInstitutions_ServiceRepository::MemberIdentifier(idl_EnforcementInstructionPackage.from)
		SmartInstitutions_ServiceRepository::MemberIdentifier::checkAllHashValues(hashes);
		// check hash value(s) for SmartInstitutions_ServiceRepository::InstitutionStatus(idl_EnforcementInstructionPackage.context)
		SmartInstitutions_ServiceRepository::InstitutionStatus::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t EnforcementInstructionPackageCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += SmartInstitutions_ServiceRepository::PackageIdentifier::generateDataHash(data.id);
		std::vector<SmartInstitutions_ServiceRepositoryIDL::MemberIdentifier>::const_iterator data_toIt;
		for(data_toIt=data.to.begin(); data_toIt!=data.to.end(); data_toIt++) {
			seed += SmartInstitutions_ServiceRepository::MemberIdentifier::generateDataHash(*data_toIt);
		}
		seed += SmartInstitutions_ServiceRepository::MemberIdentifier::generateDataHash(data.from);
		seed += SmartInstitutions_ServiceRepository::InstitutionStatus::generateDataHash(data.context);
		boost::hash_combine(seed, data.instruction);
		boost::hash_combine(seed, std::string(data.ifCustom.c_str()));
		
		return seed;
	}
	#endif
	
	// default constructor
	EnforcementInstructionPackageCore::EnforcementInstructionPackageCore()
	:	idl_EnforcementInstructionPackage()
	{  
		setId(SmartInstitutions_ServiceRepository::PackageIdentifier());
		setTo(std::vector<SmartInstitutions_ServiceRepository::MemberIdentifier>());
		setFrom(SmartInstitutions_ServiceRepository::MemberIdentifier());
		setContext(SmartInstitutions_ServiceRepository::InstitutionStatus());
		setInstruction(SmartInstitutions_ServiceRepository::EnforcementInstruction());
		setIfCustom("");
	}
	
	EnforcementInstructionPackageCore::EnforcementInstructionPackageCore(const DATATYPE &data)
	:	idl_EnforcementInstructionPackage(data)
	{  }

	EnforcementInstructionPackageCore::~EnforcementInstructionPackageCore()
	{  }
	
	void EnforcementInstructionPackageCore::to_ostream(std::ostream &os) const
	{
	  os << "EnforcementInstructionPackage(";
	  getId().to_ostream(os);
	  std::vector<SmartInstitutions_ServiceRepository::MemberIdentifier>::const_iterator toIt;
	  std::vector<SmartInstitutions_ServiceRepository::MemberIdentifier> toList = getToCopy();
	  for(toIt=toList.begin(); toIt!=toList.end(); toIt++) {
	  	toIt->to_ostream(os);
	  }
	  getFrom().to_ostream(os);
	  getContext().to_ostream(os);
	  getInstruction().to_ostream(os);
	  os << getIfCustom() << " ";
	  os << ") ";
	}
	
	// convert to xml stream
	void EnforcementInstructionPackageCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		os << indent << "<id>";
		getId().to_xml(os, indent);
		os << indent << "</id>";
		std::vector<SmartInstitutions_ServiceRepository::MemberIdentifier>::const_iterator toIt;
		std::vector<SmartInstitutions_ServiceRepository::MemberIdentifier> toList = getToCopy();
		counter = 0;
		os << indent << "<toList n=\"" << toList.size() << "\">";
		for(toIt=toList.begin(); toIt!=toList.end(); toIt++) {
			os << indent << "<to i=\"" << counter++ << "\">";
			toIt->to_xml(os, indent);
			os << indent << "</to>";
		}
		os << indent << "</toList>";
		os << indent << "<from>";
		getFrom().to_xml(os, indent);
		os << indent << "</from>";
		os << indent << "<context>";
		getContext().to_xml(os, indent);
		os << indent << "</context>";
		os << indent << "<instruction>";
		getInstruction().to_xml(os, indent);
		os << indent << "</instruction>";
		os << indent << "<ifCustom>" << getIfCustom() << "</ifCustom>";
	}
	
	// restore from xml stream
	void EnforcementInstructionPackageCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_id("<id>");
		static const Smart::KnuthMorrisPratt kmp_toList("<toList n=\"");
		static const Smart::KnuthMorrisPratt kmp_to("\">");
		static const Smart::KnuthMorrisPratt kmp_from("<from>");
		static const Smart::KnuthMorrisPratt kmp_context("<context>");
		static const Smart::KnuthMorrisPratt kmp_instruction("<instruction>");
		static const Smart::KnuthMorrisPratt kmp_ifCustom("<ifCustom>");
		
		if(kmp_id.search(is)) {
			SmartInstitutions_ServiceRepository::PackageIdentifier idItem;
			idItem.from_xml(is);
			setId(idItem);
		}
		if(kmp_toList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			SmartInstitutions_ServiceRepository::MemberIdentifier toItem;
			std::vector<SmartInstitutions_ServiceRepository::MemberIdentifier> toList;
			kmp_to.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_to.search(is)) {
					toItem.from_xml(is);
					toList.push_back(toItem);
				}
			}
			setTo(toList);
		}
		if(kmp_from.search(is)) {
			SmartInstitutions_ServiceRepository::MemberIdentifier fromItem;
			fromItem.from_xml(is);
			setFrom(fromItem);
		}
		if(kmp_context.search(is)) {
			SmartInstitutions_ServiceRepository::InstitutionStatus contextItem;
			contextItem.from_xml(is);
			setContext(contextItem);
		}
		if(kmp_instruction.search(is)) {
			SmartInstitutions_ServiceRepository::EnforcementInstruction instructionItem;
			instructionItem.from_xml(is);
			setInstruction(instructionItem);
		}
		if(kmp_ifCustom.search(is)) {
			std::string ifCustomItem;
			is >> ifCustomItem;
			setIfCustom(ifCustomItem);
		}
	}
	
	/*
	void EnforcementInstructionPackageCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		SmartInstitutions_ServiceRepositoryIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(SmartInstitutions_ServiceRepositoryIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see EnforcementInstructionPackageACE.hh)
		cdr << idl_EnforcementInstructionPackage;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_EnforcementInstructionPackage);
		cdr << data_hash;
		// std::cout << "EnforcementInstructionPackageCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void EnforcementInstructionPackageCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		SmartInstitutions_ServiceRepositoryIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see EnforcementInstructionPackageACE.hh)
		cdr >> idl_EnforcementInstructionPackage;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_EnforcementInstructionPackage);
		assert(data_hash == own_hash);
		// std::cout << "EnforcementInstructionPackageCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace SmartInstitutions_ServiceRepository */
