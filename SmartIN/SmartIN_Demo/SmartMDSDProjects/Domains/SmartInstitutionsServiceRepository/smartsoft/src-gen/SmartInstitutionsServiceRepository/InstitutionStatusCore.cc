//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "SmartInstitutionsServiceRepository/InstitutionStatusCore.hh"

// serialization/deserialization operators
//#include "SmartInstitutionsServiceRepository/InstitutionStatusACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace SmartInstitutionsServiceRepository 
{
	const char* InstitutionStatusCore::getCompiledHash()
	{
		return SmartInstitutionsServiceRepositoryIDL::REPO_HASH;
	}
	
	void InstitutionStatusCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for SmartInstitutionsServiceRepository::InstitutionIdentifier(idl_InstitutionStatus.institute)
		SmartInstitutionsServiceRepository::InstitutionIdentifier::getAllHashValues(hashes);
		// get hash value(s) for SmartInstitutionsServiceRepository::MemberIdentifier(idl_InstitutionStatus.institutionMembers)
		SmartInstitutionsServiceRepository::MemberIdentifier::getAllHashValues(hashes);
		// get hash value(s) for SmartInstitutionsServiceRepository::MemberIdentifier(idl_InstitutionStatus.institutionEnforcers)
		SmartInstitutionsServiceRepository::MemberIdentifier::getAllHashValues(hashes);
		// get hash value(s) for CommBasicObjects::CommTimeStamp(idl_InstitutionStatus.signed_at)
		CommBasicObjects::CommTimeStamp::getAllHashValues(hashes);
		// get hash value(s) for SmartInstitutionsServiceRepository::MemberIdentifier(idl_InstitutionStatus.signed_by)
		SmartInstitutionsServiceRepository::MemberIdentifier::getAllHashValues(hashes);
	}
	
	void InstitutionStatusCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "InstitutionStatusCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for SmartInstitutionsServiceRepository::InstitutionIdentifier(idl_InstitutionStatus.institute)
		SmartInstitutionsServiceRepository::InstitutionIdentifier::checkAllHashValues(hashes);
		// check hash value(s) for SmartInstitutionsServiceRepository::MemberIdentifier(idl_InstitutionStatus.institutionMembers)
		SmartInstitutionsServiceRepository::MemberIdentifier::checkAllHashValues(hashes);
		// check hash value(s) for SmartInstitutionsServiceRepository::MemberIdentifier(idl_InstitutionStatus.institutionEnforcers)
		SmartInstitutionsServiceRepository::MemberIdentifier::checkAllHashValues(hashes);
		// check hash value(s) for CommBasicObjects::CommTimeStamp(idl_InstitutionStatus.signed_at)
		CommBasicObjects::CommTimeStamp::checkAllHashValues(hashes);
		// check hash value(s) for SmartInstitutionsServiceRepository::MemberIdentifier(idl_InstitutionStatus.signed_by)
		SmartInstitutionsServiceRepository::MemberIdentifier::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t InstitutionStatusCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += SmartInstitutionsServiceRepository::InstitutionIdentifier::generateDataHash(data.institute);
		boost::hash_combine(seed, data.category);
		boost::hash_combine(seed, data.type);
		std::vector<SmartInstitutionsServiceRepositoryIDL::MemberIdentifier>::const_iterator data_institutionMembersIt;
		for(data_institutionMembersIt=data.institutionMembers.begin(); data_institutionMembersIt!=data.institutionMembers.end(); data_institutionMembersIt++) {
			seed += SmartInstitutionsServiceRepository::MemberIdentifier::generateDataHash(*data_institutionMembersIt);
		}
		std::vector<SmartInstitutionsServiceRepositoryIDL::MemberIdentifier>::const_iterator data_institutionEnforcersIt;
		for(data_institutionEnforcersIt=data.institutionEnforcers.begin(); data_institutionEnforcersIt!=data.institutionEnforcers.end(); data_institutionEnforcersIt++) {
			seed += SmartInstitutionsServiceRepository::MemberIdentifier::generateDataHash(*data_institutionEnforcersIt);
		}
		boost::hash_combine(seed, data.phase);
		seed += CommBasicObjects::CommTimeStamp::generateDataHash(data.signed_at);
		seed += SmartInstitutionsServiceRepository::MemberIdentifier::generateDataHash(data.signed_by);
		
		return seed;
	}
	#endif
	
	// default constructor
	InstitutionStatusCore::InstitutionStatusCore()
	:	idl_InstitutionStatus()
	{  
		setInstitute(SmartInstitutionsServiceRepository::InstitutionIdentifier());
		setCategory(SmartInstitutionsServiceRepository::InstitutionCategory());
		setType(SmartInstitutionsServiceRepository::InstitutionType());
		setInstitutionMembers(std::vector<SmartInstitutionsServiceRepository::MemberIdentifier>());
		setInstitutionEnforcers(std::vector<SmartInstitutionsServiceRepository::MemberIdentifier>());
		setPhase(SmartInstitutionsServiceRepository::InstitutionPhase());
		setSigned_at(CommBasicObjects::CommTimeStamp());
		setSigned_by(SmartInstitutionsServiceRepository::MemberIdentifier());
	}
	
	InstitutionStatusCore::InstitutionStatusCore(const DATATYPE &data)
	:	idl_InstitutionStatus(data)
	{  }

	InstitutionStatusCore::~InstitutionStatusCore()
	{  }
	
	void InstitutionStatusCore::to_ostream(std::ostream &os) const
	{
	  os << "InstitutionStatus(";
	  getInstitute().to_ostream(os);
	  getCategory().to_ostream(os);
	  getType().to_ostream(os);
	  std::vector<SmartInstitutionsServiceRepository::MemberIdentifier>::const_iterator institutionMembersIt;
	  std::vector<SmartInstitutionsServiceRepository::MemberIdentifier> institutionMembersList = getInstitutionMembersCopy();
	  for(institutionMembersIt=institutionMembersList.begin(); institutionMembersIt!=institutionMembersList.end(); institutionMembersIt++) {
	  	institutionMembersIt->to_ostream(os);
	  }
	  std::vector<SmartInstitutionsServiceRepository::MemberIdentifier>::const_iterator institutionEnforcersIt;
	  std::vector<SmartInstitutionsServiceRepository::MemberIdentifier> institutionEnforcersList = getInstitutionEnforcersCopy();
	  for(institutionEnforcersIt=institutionEnforcersList.begin(); institutionEnforcersIt!=institutionEnforcersList.end(); institutionEnforcersIt++) {
	  	institutionEnforcersIt->to_ostream(os);
	  }
	  getPhase().to_ostream(os);
	  getSigned_at().to_ostream(os);
	  getSigned_by().to_ostream(os);
	  os << ") ";
	}
	
	// convert to xml stream
	void InstitutionStatusCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		os << indent << "<institute>";
		getInstitute().to_xml(os, indent);
		os << indent << "</institute>";
		os << indent << "<category>";
		getCategory().to_xml(os, indent);
		os << indent << "</category>";
		os << indent << "<type>";
		getType().to_xml(os, indent);
		os << indent << "</type>";
		std::vector<SmartInstitutionsServiceRepository::MemberIdentifier>::const_iterator institutionMembersIt;
		std::vector<SmartInstitutionsServiceRepository::MemberIdentifier> institutionMembersList = getInstitutionMembersCopy();
		counter = 0;
		os << indent << "<institutionMembersList n=\"" << institutionMembersList.size() << "\">";
		for(institutionMembersIt=institutionMembersList.begin(); institutionMembersIt!=institutionMembersList.end(); institutionMembersIt++) {
			os << indent << "<institutionMembers i=\"" << counter++ << "\">";
			institutionMembersIt->to_xml(os, indent);
			os << indent << "</institutionMembers>";
		}
		os << indent << "</institutionMembersList>";
		std::vector<SmartInstitutionsServiceRepository::MemberIdentifier>::const_iterator institutionEnforcersIt;
		std::vector<SmartInstitutionsServiceRepository::MemberIdentifier> institutionEnforcersList = getInstitutionEnforcersCopy();
		counter = 0;
		os << indent << "<institutionEnforcersList n=\"" << institutionEnforcersList.size() << "\">";
		for(institutionEnforcersIt=institutionEnforcersList.begin(); institutionEnforcersIt!=institutionEnforcersList.end(); institutionEnforcersIt++) {
			os << indent << "<institutionEnforcers i=\"" << counter++ << "\">";
			institutionEnforcersIt->to_xml(os, indent);
			os << indent << "</institutionEnforcers>";
		}
		os << indent << "</institutionEnforcersList>";
		os << indent << "<phase>";
		getPhase().to_xml(os, indent);
		os << indent << "</phase>";
		os << indent << "<signed_at>";
		getSigned_at().to_xml(os, indent);
		os << indent << "</signed_at>";
		os << indent << "<signed_by>";
		getSigned_by().to_xml(os, indent);
		os << indent << "</signed_by>";
	}
	
	// restore from xml stream
	void InstitutionStatusCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_institute("<institute>");
		static const Smart::KnuthMorrisPratt kmp_category("<category>");
		static const Smart::KnuthMorrisPratt kmp_type("<type>");
		static const Smart::KnuthMorrisPratt kmp_institutionMembersList("<institutionMembersList n=\"");
		static const Smart::KnuthMorrisPratt kmp_institutionMembers("\">");
		static const Smart::KnuthMorrisPratt kmp_institutionEnforcersList("<institutionEnforcersList n=\"");
		static const Smart::KnuthMorrisPratt kmp_institutionEnforcers("\">");
		static const Smart::KnuthMorrisPratt kmp_phase("<phase>");
		static const Smart::KnuthMorrisPratt kmp_signed_at("<signed_at>");
		static const Smart::KnuthMorrisPratt kmp_signed_by("<signed_by>");
		
		if(kmp_institute.search(is)) {
			SmartInstitutionsServiceRepository::InstitutionIdentifier instituteItem;
			instituteItem.from_xml(is);
			setInstitute(instituteItem);
		}
		if(kmp_category.search(is)) {
			SmartInstitutionsServiceRepository::InstitutionCategory categoryItem;
			categoryItem.from_xml(is);
			setCategory(categoryItem);
		}
		if(kmp_type.search(is)) {
			SmartInstitutionsServiceRepository::InstitutionType typeItem;
			typeItem.from_xml(is);
			setType(typeItem);
		}
		if(kmp_institutionMembersList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			SmartInstitutionsServiceRepository::MemberIdentifier institutionMembersItem;
			std::vector<SmartInstitutionsServiceRepository::MemberIdentifier> institutionMembersList;
			kmp_institutionMembers.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_institutionMembers.search(is)) {
					institutionMembersItem.from_xml(is);
					institutionMembersList.push_back(institutionMembersItem);
				}
			}
			setInstitutionMembers(institutionMembersList);
		}
		if(kmp_institutionEnforcersList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			SmartInstitutionsServiceRepository::MemberIdentifier institutionEnforcersItem;
			std::vector<SmartInstitutionsServiceRepository::MemberIdentifier> institutionEnforcersList;
			kmp_institutionEnforcers.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_institutionEnforcers.search(is)) {
					institutionEnforcersItem.from_xml(is);
					institutionEnforcersList.push_back(institutionEnforcersItem);
				}
			}
			setInstitutionEnforcers(institutionEnforcersList);
		}
		if(kmp_phase.search(is)) {
			SmartInstitutionsServiceRepository::InstitutionPhase phaseItem;
			phaseItem.from_xml(is);
			setPhase(phaseItem);
		}
		if(kmp_signed_at.search(is)) {
			CommBasicObjects::CommTimeStamp signed_atItem;
			signed_atItem.from_xml(is);
			setSigned_at(signed_atItem);
		}
		if(kmp_signed_by.search(is)) {
			SmartInstitutionsServiceRepository::MemberIdentifier signed_byItem;
			signed_byItem.from_xml(is);
			setSigned_by(signed_byItem);
		}
	}
	
	/*
	void InstitutionStatusCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		SmartInstitutionsServiceRepositoryIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(SmartInstitutionsServiceRepositoryIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see InstitutionStatusACE.hh)
		cdr << idl_InstitutionStatus;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_InstitutionStatus);
		cdr << data_hash;
		// std::cout << "InstitutionStatusCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void InstitutionStatusCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		SmartInstitutionsServiceRepositoryIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see InstitutionStatusACE.hh)
		cdr >> idl_InstitutionStatus;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_InstitutionStatus);
		assert(data_hash == own_hash);
		// std::cout << "InstitutionStatusCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace SmartInstitutionsServiceRepository */
