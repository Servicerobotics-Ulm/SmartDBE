//-----------------------------------------------------------------------------------
// Code generated by the Toolify Robotics GmbH extension for the SmartMDSD Toolchain 
// 
// Toolify Robotics GmbH
// Weinbergweg 216
// 89075 Ulm 
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//-----------------------------------------------------------------------------------

#include "SmartIN_CommandJSON.hh"

#include "CommBasicObjectsJSON/CommTaskMessageJSON.hh"

namespace SmartInstitutionsServiceRepositoryIDL {

void to_json(const SmartInstitutionsServiceRepositoryIDL::SmartIN_Command& obj, nlohmann::json& j)
{
	// msg: CommTaskMessage
	to_json(obj.msg, j["msg"]);
	// commandID: UInt64
	j["commandID"] = obj.commandID;
	// command: String
	j["command"] = obj.command;
}

/**
 * this transformation handles missing values and checks for correct types:
 * - missing primitive type values (including simple arrays) are set to zero values
 * - missing object type values are skipped entirely
 * - types are checked before performing the type-cast operation
 */
void from_json(const nlohmann::json& j, SmartInstitutionsServiceRepositoryIDL::SmartIN_Command& obj)
{
	// msg: CommTaskMessage
	if(j.contains("msg") && j["msg"].is_object()) {
		//from_json(j["msg"], obj.msg);
		obj.msg = j["msg"].get<CommBasicObjectsIDL::CommTaskMessage>();
	}
	// commandID: UInt64
	if(j.contains("commandID") && j["commandID"].is_number_unsigned()) {
		obj.commandID = j["commandID"].get<unsigned long>();
	}
	// command: String
	if(j.contains("command") && j["command"].is_string()) {
		obj.command = j["command"].get<std::string>();
	}
}

} // end namespace SmartInstitutionsServiceRepositoryIDL
