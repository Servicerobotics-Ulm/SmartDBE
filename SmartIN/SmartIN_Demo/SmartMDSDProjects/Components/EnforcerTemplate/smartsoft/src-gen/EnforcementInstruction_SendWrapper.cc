//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

// include wrapper header
#include "EnforcementInstruction_SendWrapper.hh"

// include component's main class
#include "EnforcerTemplate.hh"

// other extensin includes

EnforcementInstruction_SendWrapper::EnforcementInstruction_SendWrapper(Smart::ISendClientPattern<SmartInstitutionsServiceRepository::EnforcementInstructionPackage> *enforcementInstruction_Send) {
	this->enforcementInstruction_Send = enforcementInstruction_Send;
	update_status = Smart::SMART_NODATA;
}

EnforcementInstruction_SendWrapper::~EnforcementInstruction_SendWrapper() {
}


Smart::StatusCode EnforcementInstruction_SendWrapper::send(SmartInstitutionsServiceRepository::EnforcementInstructionPackage &enforcementInstruction_SendDataObject) {
	std::unique_lock<std::mutex> lock(update_mutex);
	updateData = enforcementInstruction_SendDataObject;
	update_status = enforcementInstruction_Send->send(enforcementInstruction_SendDataObject);
	return update_status;
}

Smart::StatusCode EnforcementInstruction_SendWrapper::getLatestUpdate(SmartInstitutionsServiceRepository::EnforcementInstructionPackage &enforcementInstruction_SendDataObject) {
	std::unique_lock<std::mutex> lock(update_mutex);
	enforcementInstruction_SendDataObject = updateData;
	return update_status;
}
