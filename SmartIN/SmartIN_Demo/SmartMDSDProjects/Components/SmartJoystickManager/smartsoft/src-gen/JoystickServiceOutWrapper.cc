//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

// include wrapper header
#include "JoystickServiceOutWrapper.hh"

// include component's main class
#include "SmartJoystickManager.hh"

// other extensin includes

JoystickServiceOutWrapper::JoystickServiceOutWrapper(Smart::IPushServerPattern<CommBasicObjects::CommJoystick> *joystickServiceOut) {
	this->joystickServiceOut = joystickServiceOut;
	update_status = Smart::SMART_NODATA;
}

JoystickServiceOutWrapper::~JoystickServiceOutWrapper() {
}


Smart::StatusCode JoystickServiceOutWrapper::put(CommBasicObjects::CommJoystick &joystickServiceOutDataObject) {
	std::unique_lock<std::mutex> lock(update_mutex);
	updateData = joystickServiceOutDataObject;
	update_status = joystickServiceOut->put(joystickServiceOutDataObject);
	return update_status;
}

Smart::StatusCode JoystickServiceOutWrapper::getLatestUpdate(CommBasicObjects::CommJoystick &joystickServiceOutDataObject) {
	std::unique_lock<std::mutex> lock(update_mutex);
	joystickServiceOutDataObject = updateData;
	return update_status;
}
