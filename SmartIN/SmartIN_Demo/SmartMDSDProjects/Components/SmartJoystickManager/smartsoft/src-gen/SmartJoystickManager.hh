//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _SMARTJOYSTICKMANAGER_HH
#define _SMARTJOYSTICKMANAGER_HH

#include <map>
#include <iostream>
#include "aceSmartSoft.hh"
#include "smartQueryServerTaskTrigger_T.h"
#include "SmartJoystickManagerCore.hh"

#include "SmartJoystickManagerPortFactoryInterface.hh"
#include "SmartJoystickManagerExtension.hh"

// forward declarations
class SmartJoystickManagerPortFactoryInterface;
class SmartJoystickManagerExtension;

// includes for PlainOpcUaSmartJoystickManagerExtension
// include plain OPC UA device clients
// include plain OPC UA status servers


// include communication objects
#include <CommBasicObjects/CommJoystick.hh>
#include <CommBasicObjects/CommJoystickACE.hh>

// include tasks
#include "JoystickManTask.hh"
// include UpcallManagers and InputCollectors
#include "JoystickServiceIn_1UpcallManager.hh"
#include "JoystickServiceIn_1InputCollector.hh"
#include "JoystickServiceIn_2UpcallManager.hh"
#include "JoystickServiceIn_2InputCollector.hh"
#include "JoystickServiceIn_3UpcallManager.hh"
#include "JoystickServiceIn_3InputCollector.hh"
#include "JoystickServiceIn_4UpcallManager.hh"
#include "JoystickServiceIn_4InputCollector.hh"
#include "JoystickServiceIn_5UpcallManager.hh"
#include "JoystickServiceIn_5InputCollector.hh"

// include input-handler(s)
// include request-handler(s)
// output port wrappers
#include "JoystickServiceOutWrapper.hh"

// include handler
#include "CompHandler.hh"


#include "SmartStateChangeHandler.hh"

#define COMP SmartJoystickManager::instance()

class SmartJoystickManager : public SmartJoystickManagerCore {
private:
	static SmartJoystickManager *_smartJoystickManager;
	
	// constructor
	SmartJoystickManager();
	
	// copy-constructor
	SmartJoystickManager(const SmartJoystickManager& cc);
	
	// destructor
	~SmartJoystickManager() { };
	
	// load parameter from ini file
	void loadParameter(int argc, char* argv[]);
	
	// instantiate comp-handler
	CompHandler compHandler;
	
	// helper method that maps a string-name to an according TaskTriggerSubject
	Smart::TaskTriggerSubject* getInputTaskTriggerFromString(const std::string &client);
	
	// internal map storing the different port-creation factories (that internally map to specific middleware implementations)
	std::map<std::string, SmartJoystickManagerPortFactoryInterface*> portFactoryRegistry;
	
	// internal map storing various extensions of this component class
	std::map<std::string, SmartJoystickManagerExtension*> componentExtensionRegistry;
	
public:
	
	// define tasks
	Smart::TaskTriggerSubject* joystickManTaskTrigger;
	JoystickManTask *joystickManTask;
	
	// define input-ports
	// InputPort JoystickServiceIn_1
	Smart::IPushClientPattern<CommBasicObjects::CommJoystick> *joystickServiceIn_1;
	Smart::InputTaskTrigger<CommBasicObjects::CommJoystick> *joystickServiceIn_1InputTaskTrigger;
	JoystickServiceIn_1UpcallManager *joystickServiceIn_1UpcallManager;
	JoystickServiceIn_1InputCollector *joystickServiceIn_1InputCollector;
	// InputPort JoystickServiceIn_2
	Smart::IPushClientPattern<CommBasicObjects::CommJoystick> *joystickServiceIn_2;
	Smart::InputTaskTrigger<CommBasicObjects::CommJoystick> *joystickServiceIn_2InputTaskTrigger;
	JoystickServiceIn_2UpcallManager *joystickServiceIn_2UpcallManager;
	JoystickServiceIn_2InputCollector *joystickServiceIn_2InputCollector;
	// InputPort JoystickServiceIn_3
	Smart::IPushClientPattern<CommBasicObjects::CommJoystick> *joystickServiceIn_3;
	Smart::InputTaskTrigger<CommBasicObjects::CommJoystick> *joystickServiceIn_3InputTaskTrigger;
	JoystickServiceIn_3UpcallManager *joystickServiceIn_3UpcallManager;
	JoystickServiceIn_3InputCollector *joystickServiceIn_3InputCollector;
	// InputPort JoystickServiceIn_4
	Smart::IPushClientPattern<CommBasicObjects::CommJoystick> *joystickServiceIn_4;
	Smart::InputTaskTrigger<CommBasicObjects::CommJoystick> *joystickServiceIn_4InputTaskTrigger;
	JoystickServiceIn_4UpcallManager *joystickServiceIn_4UpcallManager;
	JoystickServiceIn_4InputCollector *joystickServiceIn_4InputCollector;
	// InputPort JoystickServiceIn_5
	Smart::IPushClientPattern<CommBasicObjects::CommJoystick> *joystickServiceIn_5;
	Smart::InputTaskTrigger<CommBasicObjects::CommJoystick> *joystickServiceIn_5InputTaskTrigger;
	JoystickServiceIn_5UpcallManager *joystickServiceIn_5UpcallManager;
	JoystickServiceIn_5InputCollector *joystickServiceIn_5InputCollector;
	
	// define request-ports
	
	// define input-handler
	
	// define output-ports
	Smart::IPushServerPattern<CommBasicObjects::CommJoystick> *joystickServiceOut;
	JoystickServiceOutWrapper *joystickServiceOutWrapper;
	
	// define answer-ports
	
	// define request-handlers
	
	
	// define default slave ports
	SmartACE::StateSlave *stateSlave;
	SmartStateChangeHandler *stateChangeHandler;
	SmartACE::WiringSlave *wiringSlave;
	
	
	/// this method is used to register different PortFactory classes (one for each supported middleware framework)
	void addPortFactory(const std::string &name, SmartJoystickManagerPortFactoryInterface *portFactory);
	
	SmartACE::SmartComponent* getComponentImpl();
	
	/// this method is used to register different component-extension classes
	void addExtension(SmartJoystickManagerExtension *extension);
	
	/// this method allows to access the registered component-extensions (automatically converting to the actuall implementation type)
	template <typename T>
	T* getExtension(const std::string &name) {
		auto it = componentExtensionRegistry.find(name);
		if(it != componentExtensionRegistry.end()) {
			return dynamic_cast<T*>(it->second);
		}
		return 0;
	}
	
	/// initialize component's internal members
	void init(int argc, char *argv[]);
	
	/// execute the component's infrastructure
	void run();
	
	/// clean-up component's resources
	void fini();
	
	/// call this method to set the overall component into the Alive state (i.e. component is then ready to operate)
	void setStartupFinished();
	
	/// connect all component's client ports
	Smart::StatusCode connectAndStartAllServices();
	
	/// start all assocuated Activities
	void startAllTasks();
	
	/// start all associated timers
	void startAllTimers();
	
	Smart::StatusCode connectJoystickServiceIn_1(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectJoystickServiceIn_2(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectJoystickServiceIn_3(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectJoystickServiceIn_4(const std::string &serverName, const std::string &serviceName);
	Smart::StatusCode connectJoystickServiceIn_5(const std::string &serverName, const std::string &serviceName);

	// return singleton instance
	static SmartJoystickManager* instance()
	{
		if(_smartJoystickManager == 0) {
			_smartJoystickManager = new SmartJoystickManager();
		}
		return _smartJoystickManager;
	}
	
	static void deleteInstance() {
		if(_smartJoystickManager != 0) {
			delete _smartJoystickManager;
		}
	}
	
	// connections parameter
	struct connections_struct
	{
		// component struct
		struct component_struct
		{
			// the name of the component
			std::string name;
			std::string initialComponentMode;
			std::string defaultScheduler;
			bool useLogger;
		} component;
		
		//--- task parameter ---
		struct JoystickManTask_struct {
			double minActFreq;
			double maxActFreq;
			std::string trigger;
			// only one of the following two params is 
			// actually used at run-time according 
			// to the system config model
			double periodicActFreq;
			// or
			std::string inPortRef;
			int prescale;
			// scheduling parameters
			std::string scheduler;
			int priority;
			int cpuAffinity;
		} joystickManTask;
		
		//--- upcall parameter ---
		
		//--- server port parameter ---
		struct JoystickServiceOut_struct {
				std::string serviceName;
				std::string roboticMiddleware;
		} joystickServiceOut;
	
		//--- client port parameter ---
		struct JoystickServiceIn_1_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} joystickServiceIn_1;
		struct JoystickServiceIn_2_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} joystickServiceIn_2;
		struct JoystickServiceIn_3_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} joystickServiceIn_3;
		struct JoystickServiceIn_4_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} joystickServiceIn_4;
		struct JoystickServiceIn_5_struct {
			bool initialConnect;
			std::string serverName;
			std::string serviceName;
			std::string wiringName;
			long interval;
			std::string roboticMiddleware;
		} joystickServiceIn_5;
		
	} connections;
};
#endif
