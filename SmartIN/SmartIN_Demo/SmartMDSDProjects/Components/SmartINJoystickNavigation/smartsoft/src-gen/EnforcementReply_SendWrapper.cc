//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

// include wrapper header
#include "EnforcementReply_SendWrapper.hh"

// include component's main class
#include "SmartINJoystickNavigation.hh"

// other extensin includes

EnforcementReply_SendWrapper::EnforcementReply_SendWrapper(Smart::ISendClientPattern<SmartInstitutionsServiceRepository::EnforcementReplyPackage> *enforcementReply_Send) {
	this->enforcementReply_Send = enforcementReply_Send;
	update_status = Smart::SMART_NODATA;
}

EnforcementReply_SendWrapper::~EnforcementReply_SendWrapper() {
}


Smart::StatusCode EnforcementReply_SendWrapper::send(SmartInstitutionsServiceRepository::EnforcementReplyPackage &enforcementReply_SendDataObject) {
	std::unique_lock<std::mutex> lock(update_mutex);
	updateData = enforcementReply_SendDataObject;
	update_status = enforcementReply_Send->send(enforcementReply_SendDataObject);
	return update_status;
}

Smart::StatusCode EnforcementReply_SendWrapper::getLatestUpdate(SmartInstitutionsServiceRepository::EnforcementReplyPackage &enforcementReply_SendDataObject) {
	std::unique_lock<std::mutex> lock(update_mutex);
	enforcementReply_SendDataObject = updateData;
	return update_status;
}
