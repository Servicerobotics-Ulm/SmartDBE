//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef COMPONENTA_PORTFACTORYINTERFACE_HH_
#define COMPONENTA_PORTFACTORYINTERFACE_HH_

// include communication objects
#include <CommBasicObjects/CommTaskEventState.hh>
#include <CommBasicObjects/CommTaskEventStateACE.hh>
#include <CommBasicObjects/CommTrafficLights.hh>
#include <CommBasicObjects/CommTrafficLightsACE.hh>
#include <SmartInstitutions_ServiceRepository/EnforcementInstructionPackage.hh>
#include <SmartInstitutions_ServiceRepository/EnforcementInstructionPackageACE.hh>
#include <SmartInstitutions_ServiceRepository/EnforcementReplyPackage.hh>
#include <SmartInstitutions_ServiceRepository/EnforcementReplyPackageACE.hh>
#include <SmartInstitutions_ServiceRepository/EnforcementReportPackage.hh>
#include <SmartInstitutions_ServiceRepository/EnforcementReportPackageACE.hh>
#include <SmartInstitutions_ServiceRepository/MemberIdentifier.hh>
#include <SmartInstitutions_ServiceRepository/MemberIdentifierACE.hh>
#include <SmartInstitutions_ServiceRepository/SmartIN_Command.hh>
#include <SmartInstitutions_ServiceRepository/SmartIN_CommandACE.hh>
#include <SmartInstitutions_ServiceRepository/SmartIN_EventType.hh>
#include <SmartInstitutions_ServiceRepository/SmartIN_EventTypeACE.hh>

#include <chrono>

// include component's main class
#include "ComponentA.hh"

// forward declaration
class ComponentA;

class ComponentAPortFactoryInterface {
public:
	ComponentAPortFactoryInterface() { };
	virtual ~ComponentAPortFactoryInterface() { };

	virtual void initialize(ComponentA *component, int argc, char* argv[]) = 0;
	virtual int onStartup() = 0;

	virtual Smart::IPushClientPattern<SmartInstitutions_ServiceRepository::EnforcementInstructionPackage> * createEnforcementInstruction_Push() = 0;
	virtual Smart::ISendClientPattern<SmartInstitutions_ServiceRepository::EnforcementReplyPackage> * createEnforcementReply_Send() = 0;
	virtual Smart::ISendClientPattern<SmartInstitutions_ServiceRepository::EnforcementReportPackage> * createEnforcementReport_Send() = 0;
	virtual Smart::IEventClientPattern<SmartInstitutions_ServiceRepository::SmartIN_Command, SmartInstitutions_ServiceRepository::SmartIN_EventType> * createEvent_Listener() = 0;
	
	virtual Smart::ISendServerPattern<SmartInstitutions_ServiceRepository::EnforcementInstructionPackage> * createEnforcementInstruction_Send(const std::string &serviceName) = 0;
	virtual Smart::IPushServerPattern<SmartInstitutions_ServiceRepository::EnforcementReplyPackage> * createEnforcementReply_Push(const std::string &serviceName) = 0;
	virtual Smart::IPushServerPattern<SmartInstitutions_ServiceRepository::EnforcementReportPackage> * createEnforcementReport_Push(const std::string &serviceName) = 0;
	virtual Smart::IQueryServerPattern<SmartInstitutions_ServiceRepository::EnforcementInstructionPackage, SmartInstitutions_ServiceRepository::EnforcementReplyPackage> * createEnforcement_QueryReply(const std::string &serviceName) = 0;
	virtual Smart::IEventServerPattern<SmartInstitutions_ServiceRepository::SmartIN_Command, SmartInstitutions_ServiceRepository::SmartIN_EventType, CommBasicObjects::CommTaskEventState> * createEvent_Creator(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<SmartInstitutions_ServiceRepository::SmartIN_Command, SmartInstitutions_ServiceRepository::SmartIN_EventType, CommBasicObjects::CommTaskEventState>> event_CreatorEventTestHandler) = 0;
	virtual Smart::IQueryServerPattern<SmartInstitutions_ServiceRepository::MemberIdentifier, SmartInstitutions_ServiceRepository::EnforcementReportPackage> * createReport_QueryReply(const std::string &serviceName) = 0;
	virtual Smart::IPushServerPattern<CommBasicObjects::CommTrafficLights> * createTrafficLightsServiceOut(const std::string &serviceName) = 0;

	virtual int onShutdown(const std::chrono::steady_clock::duration &timeoutTime=std::chrono::seconds(2)) = 0;
	virtual void destroy() = 0;
};

#endif /* COMPONENTA_PORTFACTORYINTERFACE_HH_ */
