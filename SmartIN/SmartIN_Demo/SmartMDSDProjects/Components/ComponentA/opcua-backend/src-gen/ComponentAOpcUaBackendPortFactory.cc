//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "ComponentAOpcUaBackendPortFactory.hh"

// include all potentially required pattern implementations
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/PushClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/EventClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QClientOPCUA.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/SendClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QueryClient.hpp>

#include <SeRoNetSDK/SeRoNet/OPCUA/Server/PushServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/EventServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/SendServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/QueryServer.hpp>

// include referenced CommunicationObject SeRoNetSDK self description implementations
#include "CommBasicObjectsOpcUa/CommBaseStateOpcUa.hh"
#include "CommBasicObjectsOpcUa/CommTaskEventStateOpcUa.hh"
#include "SmartInstitutionsServiceRepositoryOpcUa/EnforcementInstructionPackageOpcUa.hh"
#include "SmartInstitutionsServiceRepositoryOpcUa/EnforcementReplyPackageOpcUa.hh"
#include "SmartInstitutionsServiceRepositoryOpcUa/EnforcementReportPackageOpcUa.hh"
#include "SmartInstitutionsServiceRepositoryOpcUa/MemberIdentifierOpcUa.hh"
#include "SmartInstitutionsServiceRepositoryOpcUa/SmartIN_CommandOpcUa.hh"
#include "SmartInstitutionsServiceRepositoryOpcUa/SmartIN_EventTypeOpcUa.hh"

// create a static instance of the OpcUaBackendPortFactory
static ComponentAOpcUaBackendPortFactory OpcUaBackendPortFactory;

ComponentAOpcUaBackendPortFactory::ComponentAOpcUaBackendPortFactory()
{  
	componentImpl = 0;
	ComponentA::instance()->addPortFactory("OpcUa_SeRoNet", this);
}

ComponentAOpcUaBackendPortFactory::~ComponentAOpcUaBackendPortFactory()
{  }

void ComponentAOpcUaBackendPortFactory::initialize(ComponentA *component, int argc, char* argv[])
{
	componentImpl = new SeRoNet::Utils::Component(component->connections.component.name);
}

int ComponentAOpcUaBackendPortFactory::onStartup()
{
	if (!component_thread.joinable()) {
    	component_thread = std::thread(&ComponentAOpcUaBackendPortFactory::task_execution, this);
    	return 0;
    }
	return -1;
}

Smart::IPushClientPattern<SmartInstitutionsServiceRepository::EnforcementInstructionPackage> * ComponentAOpcUaBackendPortFactory::createEnforcementInstruction_Push()
{
	return new SeRoNet::OPCUA::Client::PushClient<SmartInstitutionsServiceRepository::EnforcementInstructionPackage>(componentImpl);
}

Smart::ISendClientPattern<SmartInstitutionsServiceRepository::EnforcementReplyPackage> * ComponentAOpcUaBackendPortFactory::createEnforcementReply_Send()
{
	return new SeRoNet::OPCUA::Client::SendClient<SmartInstitutionsServiceRepository::EnforcementReplyPackage>(componentImpl);
}

Smart::ISendClientPattern<SmartInstitutionsServiceRepository::EnforcementReportPackage> * ComponentAOpcUaBackendPortFactory::createEnforcementReport_Send()
{
	return new SeRoNet::OPCUA::Client::SendClient<SmartInstitutionsServiceRepository::EnforcementReportPackage>(componentImpl);
}

Smart::IEventClientPattern<SmartInstitutionsServiceRepository::SmartIN_Command, SmartInstitutionsServiceRepository::SmartIN_EventType> * ComponentAOpcUaBackendPortFactory::createEvent_Listener()
{
	return new SeRoNet::OPCUA::Client::EventClient<SmartInstitutionsServiceRepository::SmartIN_Command, SmartInstitutionsServiceRepository::SmartIN_EventType>(componentImpl);
}


Smart::IPushServerPattern<CommBasicObjects::CommBaseState> * ComponentAOpcUaBackendPortFactory::createBaseStateServiceOut(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::PushServer<CommBasicObjects::CommBaseState>(componentImpl, serviceName);
}

Smart::ISendServerPattern<SmartInstitutionsServiceRepository::EnforcementInstructionPackage> * ComponentAOpcUaBackendPortFactory::createEnforcementInstruction_Send(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::SendServer<SmartInstitutionsServiceRepository::EnforcementInstructionPackage>(componentImpl, serviceName);
}

Smart::IPushServerPattern<SmartInstitutionsServiceRepository::EnforcementReplyPackage> * ComponentAOpcUaBackendPortFactory::createEnforcementReply_Push(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::PushServer<SmartInstitutionsServiceRepository::EnforcementReplyPackage>(componentImpl, serviceName);
}

Smart::IPushServerPattern<SmartInstitutionsServiceRepository::EnforcementReportPackage> * ComponentAOpcUaBackendPortFactory::createEnforcementReport_Push(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::PushServer<SmartInstitutionsServiceRepository::EnforcementReportPackage>(componentImpl, serviceName);
}

Smart::IQueryServerPattern<SmartInstitutionsServiceRepository::EnforcementInstructionPackage, SmartInstitutionsServiceRepository::EnforcementReplyPackage> * ComponentAOpcUaBackendPortFactory::createEnforcement_QueryResponder(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::QueryServer<SmartInstitutionsServiceRepository::EnforcementInstructionPackage, SmartInstitutionsServiceRepository::EnforcementReplyPackage>(componentImpl, serviceName);
}

Smart::IEventServerPattern<SmartInstitutionsServiceRepository::SmartIN_Command, SmartInstitutionsServiceRepository::SmartIN_EventType, CommBasicObjects::CommTaskEventState> * ComponentAOpcUaBackendPortFactory::createEvent_Creator(const std::string &serviceName, std::shared_ptr<Smart::IEventTestHandler<SmartInstitutionsServiceRepository::SmartIN_Command, SmartInstitutionsServiceRepository::SmartIN_EventType, CommBasicObjects::CommTaskEventState>> event_CreatorEventTestHandler)
{
	return new SeRoNet::OPCUA::Server::EventServer<SmartInstitutionsServiceRepository::SmartIN_Command, SmartInstitutionsServiceRepository::SmartIN_EventType, CommBasicObjects::CommTaskEventState>(componentImpl, serviceName, event_CreatorEventTestHandler);
}

Smart::IQueryServerPattern<SmartInstitutionsServiceRepository::MemberIdentifier, SmartInstitutionsServiceRepository::EnforcementReportPackage> * ComponentAOpcUaBackendPortFactory::createReport_QueryResponder(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::QueryServer<SmartInstitutionsServiceRepository::MemberIdentifier, SmartInstitutionsServiceRepository::EnforcementReportPackage>(componentImpl, serviceName);
}


int ComponentAOpcUaBackendPortFactory::task_execution()
{
	componentImpl->run();
	return 0;
}

int ComponentAOpcUaBackendPortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	// stop component-internal infrastructure
	componentImpl->stopRunning();
	// wait on component thread to exit
	if (component_thread.joinable()) {
		// FIXME: don't wait infinetly (use timeoutTime here)
    	component_thread.join();
    }
	return 0;
}

void ComponentAOpcUaBackendPortFactory::destroy()
{
	// clean-up component's internally used resources
	delete componentImpl;
}
